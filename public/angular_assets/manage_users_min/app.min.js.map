{"version":3,"sources":["app_manage_users.js","account/createAccount.js","account/resetPassword.js","account/signIn.js","ads/ads.js","controllers/universalCtrl.js","email/resend_email.js","req/response_filter.js","services/globals.js","adirectives/banners/bannerDir.js","adirectives/banners/universalBanner.js","adirectives/post-topic/post_topic.js","controllers/userManagerCtrl.js","services/post-category-service.js","services/post-service.js","services/userService.js","filters/filters.js","filters/post-form-validation.js","directives/ckeditor/ckeditor.js","directives/manage-users/adminUsersDir.js","directives/manage-users/allUsersDir.js","directives/manage-users/bannedUsersDir.js","directives/manage-users/unApprovedUsers.js","directives/manage-users/user_display.js","directives/manage-users/user_permissions.js","directives/manage-users/usersCountDir.js","directives/manage-post-categories/changePostCategory.js","directives/manage-post-categories/postCategoryActions.js","directives/manage-post-categories/postCategoryCtrl.js","directives/new-edit-post/editPost.js","directives/new-edit-post/newPostDir.js","directives/new-edit-post/post-content.js","directives/new-edit-post/post-tags.js","directives/post-validate-messages/postMessages.js","directives/uploaders/postUploader.js"],"names":["trackDigests","app","run","$rootScope","Promise","setScheduler","cb","$evalAsync","angular","module","config","$locationProvider","html5Mode","enabled","directive","$http","restrict","link","$scope","createAccount","details","post","then","resp","data","main","responseStatusHandler","err","registrationDetails","password1","password2","createMain","isBusy","email","firstName","lastName","username","redirect","resetMain","resetFormModel","newPassword","confirmNewPassword","submitResetPasswordEmail","localUserLogin","loginData","resolve","document","referrer","loginFormModel","password","signInMain","submitLocalLoginForm","$element","$attrs","putImageAd","size","adsize","e","html","empty","append","console","log","toString","display","s","words","width","$","window","indexOf","localStorageServiceProvider","setPrefix","setStorageCookieDomain","location","hostname","search","setStorageType","controller","$filter","$window","$location","ngDialog","$anchorScroll","$sce","localStorageService","getLocationHost","port","userLocationData","getUserLocationData","reject","getNewLocationData","found","locationData","temp","country","address","saveKeyToCookie","geoError","geolocator","locateByIP","checkCookieIsEnabled","loc","getKeyFromCookie","hasOwnProperty","msg","checkLocalStorageSupport","isSupported","cookie","saveToLocalStorage","key","val","object","value","timestamp","Date","getTime","set","getFromLocalStorage","maxAgeSeconds","checkIfExistsOnLocalStorage","get","dateString","now","removeFromLocalStorage","maxAgeInDays","JSON","stringify","removeKeyFromCookie","keys","len","length","exists","i","keyArray","all","clearAll","forEach","remove","windowWidth","bootStrapWidth","parseInt","trustAsHtml","intersectionArray","arr1","arr2","_","intersection","getAmazonS3Url","keyWithoutSlash","domain","defaultProfilePicture","isAdmin","user","arr","adminLevels","assetsDomainWithSlash","goToTop","hash","back","showToast","type","clearBanners","$broadcast","redirectToAbout","href","redirectToLogin","reloadPage","reload","redirectToHome","redirectToPage","pathWithFirstSlash","redirectToPreviousPage","showExecuting","message","open","templateUrl","className","overlay","showClose","closeByEscape","closeByDocument","cache","trapFocus","preserveFocus","history","resendConfirmationEmail","userUniqueCuid","dialog","success","close","error","filter","$q","$log","makeBanner","show","bannerClass","not_authorized_dialog","template","sign_in_dialog","openConfirm","redirectPage","notify","id","banner","signInBanner","registrationBanner","reason","warn","factory","userData","userDataFromServer","toastr","toastType","text","clear","warning","closeButton","tapToDismiss","timeOut","clearToasts","$on","event","universalBanner","getPostTopic","pageNumber","mainTopicModel","topic","theModel","requestedPage","buttonLoading","topicSearch","element","replaceWith","finishedLoading","errResp","topicObject","parse","model","showMore","button","UserService","getUsersCount","getUsersCountFromServer","usersCount","updateUsersCount","errResponse","allPostCategories","getAllPostCategories","getAllPostCategoriesFromServer","updateAllPostCategories","newPostCategories","getCurrentEditPostModelFromServer","postIndex","submitNewPost","newPost","submitPostUpdate","postUpdate","trashPost","postUniqueCuid","unTrashPost","allUsers","adminUsers","usersNotApproved","bannedUsers","newUsersCount","getAllUsers","getAllUsersFromServer","updateAllUsers","usersArray","getAdminUsers","getAdminUsersFromServer","updateAdminUsers","getUsersNotApproved","getUsersNotApprovedFromServer","updateUsersNotApproved","getBannedUsers","getBannedUsersFromServer","updateBannedUsers","addAdminPrivileges","removeAdminPrivileges","approveUser","banUser","unBanUser","convertToSlug","Text","toLowerCase","replace","postShortHeading","postHeading","broadcast","broadcastShowToast","errors","addMessage","newMessage","messages","postHeadingText","postShortHeadingText","postContent","postContentText","postSummary","postSummaryText","postTags","numberOfTags","tag","require","scope","elm","attr","ngModel","ck","CKEDITOR","on","$apply","$setViewValue","getData","$render","setData","$viewValue","globals","adminUsersModel","filterString","allUsersModel","bannedUsersModel","usersNotApprovedModel","isCollapsed","ngTableParams","getUsers","options","getAllPermissions","permissions","code","query","quantity","users","loadingUser","searchModel","getUserData","obj","getUserWithUniqueCuid","uniqueCuid","userPermissionsModel","prepareUserPermissionsModel","userPermissions","isChecked","userToDisplay","changeUserToDisplay","tableParams","page","count","total","counts","$defer","params","resultObj","totalResults","updateUserPermissions","permissionsArray","push","newPermissionsArray","resetPermissionChanges","deleteUser","getCategoryPosts","postCategoryUniqueCuid","categoryModel","categoryDetails","categoryPosts","postsToChange","categoryPostsTableParams","resObj","posts","loadUncategorizedPosts","postsArray","selectAll","index","unselectAll","moveSelected","continueMoving","postUniqueCuidArray","allCategories","allPostCategoriesData","categoryNameModel","name","addPostCategory","editPostCategoryName","postCategoryName","continueEditing","updatedPostCategoryName","deletePostCategory","continueDeleting","PostCategoryService","PostService","$interval","continueRendering","addExtraInfoToModel","postModel","writers","getFullEditPostModel","Object","thePost","step","authorName","getAllWriters","postUploads","postHeaderImageKey","postType","authorUniqueCuid","thisUser","postCategoriesArray","previousStep","incrementStep","nextStep","currentStep","validateMainPostForm","validateFinalizePostForm","submitFinal","cancel","continueTrashing","preparedPostContent","$watch","showSpan","Upload","incrementUploadingPercent","uploading","percent","uploadPostImageDirect","fields","file","upload","url","s3BucketUrl","method","AWSAccessKeyId","acl","policy","signature","Content-Type","filename","progress","evt","loaded","status","headers","originalname","amazonS3Url","completePath","hideProgressBars","uploadPdfDirect","uploadZipDirect","uploadPostImage","uploadPostImageToServer","fileData","selectedFileType","isUploading","progressIntervalPromise","newVal","oldVal","showUploading","uploadDirect","files","fileNameWithExtension","uploadPdf","uploadZip"],"mappings":"AAAA,QAAAA,cAAAC,GACAA,EAAAC,KAAA,aAAA,SAAAC,GACAC,QAAAC,aAAA,SAAAC,GACAH,EAAAI,WAAAD,QAMA,GAAAL,KAAAO,QAAAC,OAAA,OACA,aACA,eACA,oCACA,cACA,eACA,SACA,WACA,YACA,UACA,uBAEAC,QAAA,oBAAA,SAAAC,GACAA,EAAAC,WACAC,SAAA,MAIAb,cAAAC,KC3BAO,QAAAC,OAAA,OACAK,UAAA,sBAAA,aAAA,QAAA,SAAAX,EAAAY,GACA,OACAC,SAAA,KACAC,KAAA,SAAAC,GAsBA,QAAAC,GAAAC,GACA,MAAAL,GAAAM,KAAA,iBAAAD,GACAE,KAAA,SAAAC,GAGA,MAFAA,GAAAA,EAAAC,KACArB,EAAAsB,KAAAC,sBAAAH,IACA,IAJAR,SAMA,SAAAY,GAKA,MAJAA,GAAAA,EAAAH,KACArB,EAAAsB,KAAAC,sBAAAC,GACAT,EAAAU,oBAAAC,UAAA,GACAX,EAAAU,oBAAAE,UAAA,IACA,IAjCAZ,EAAAa,YACAC,QAAA,GAGAd,EAAAU,qBACAK,MAAA,GACAC,UAAA,GACAC,SAAA,GACAC,SAAA,GACAP,UAAA,GACAC,UAAA,IAGAZ,EAAAC,cAAA,SAAAkB,GAEA,MADAnB,GAAAa,WAAAC,QAAA,EACAb,EAAAD,EAAAU,oBAAAS,GACAf,KAAA,WACAJ,EAAAa,WAAAC,QAAA,UCtBAxB,QAAAC,OAAA,OACAK,UAAA,sBAAA,aAAA,QAAA,SAAAX,EAAAY,GACA,OACAC,SAAA,KACAC,KAAA,SAAAC,GAEAA,EAAAoB,WACAN,QAAA,GAGAd,EAAAqB,gBACAN,MAAA,GACAO,YAAA,GACAC,mBAAA,IAIAvB,EAAAwB,yBAAA,WAEA,MADAxB,GAAAoB,UAAAN,QAAA,EACAjB,EAAAM,KAAA,2BAAAH,EAAAqB,gBACAjB,KAAA,SAAAC,GACAA,EAAAA,EAAAC,KACArB,EAAAsB,KAAAC,sBAAAH,KAHAR,SAMA,SAAAY,GACAA,EAAAA,EAAAH,KACArB,EAAAsB,KAAAC,sBAAAC,GACAT,EAAAqB,eAAAN,MAAA,GACAf,EAAAqB,eAAAC,YAAA,GACAtB,EAAAqB,eAAAE,mBAAA,GACAvB,EAAAoB,UAAAN,QAAA,UC/BAxB,QAAAC,OAAA,OACAK,UAAA,eAAA,aAAA,QAAA,SAAAX,EAAAY,GACA,OACAC,SAAA,KACAC,KAAA,SAAAC,GAmBA,QAAAyB,GAAAC,EAAAP,GACA,MAAAjC,SAAAyC,UACAvB,KAAA,WACA,MAAAe,GACAtB,EAAAM,KAAA,4BAAAyB,SAAAC,SAAAH,GAEA7B,EAAAM,KAAA,kBAAAuB,KAGAtB,KAAA,SAAAC,GAGA,MAFAA,GAAAA,EAAAC,KACArB,EAAAsB,KAAAC,sBAAAH,IACA,IAXAnB,SAaA,SAAAuB,GAIA,MAHAA,GAAAA,EAAAH,KACAN,EAAA8B,eAAAC,SAAA,GACA9C,EAAAsB,KAAAC,sBAAAC,IACA,IAnCAT,EAAAgC,YACAlB,QAAA,GAGAd,EAAA8B,gBACAZ,SAAA,GACAa,SAAA,IAGA/B,EAAAiC,qBAAA,SAAAd,GAEA,MADAnB,GAAAgC,WAAAlB,QAAA,EACAW,EAAAzB,EAAA8B,eAAAX,GACAf,KAAA,WACAJ,EAAAgC,WAAAlB,QAAA,UCnBAxB,QAAAC,OAAA,OACAK,UAAA,oBAAA,aAAA,QAAA,SAAAX,EAAAY,GACA,OACAC,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GAkBA,QAAAC,KACAlD,QAAAyC,UACAvB,KAAA,WACA,MAAAP,GAAAM,KAAA,mBACAkC,KAAAC,IADAzC,SAGA,SAAA0C,GAGA,KAFAA,GAAAA,EAAAjC,KACArB,EAAAsB,KAAAC,sBAAA+B,GACAA,IAEAnC,KAAA,SAAAC,GAGA,MAFAA,GAAAA,EAAAC,KACArB,EAAAsB,KAAAC,sBAAAH,GACAA,MAGAD,KAAA,SAAAoC,GACAN,EAAAO,QACAP,EAAAQ,OAAAF,KAlBAtD,SAoBA,SAAAqD,GACAI,QAAAC,IAAAL,KAvCA,GAAAD,GAAAH,EAAAG,OAAAO,WACAC,EAAAC,EAAAC,MAAAb,EAAAW,SAEAG,EAAAC,EAAAC,QAAAF,OAEAA,IAAA,MAAAH,EAAAM,QAAA,MAAA,GACAhB,IACAa,GAAA,KAAA,KAAAA,GAAAH,EAAAM,QAAA,MAAA,GACAhB,IACAa,GAAA,KAAA,IAAAA,GAAAH,EAAAM,QAAA,MAAA,GACAhB,IACA,IAAAa,GAAAH,EAAAM,QAAA,MAAA,IACAhB,SCjBA9C,QAAAC,OAAA,OACAC,QAAA,8BAAA,SAAA6D,GACAA,EACAC,UAAA,OACAC,uBAAA,KAAA3B,SAAA4B,SAAAC,SAAAC,OAAA,mBAAA,sBAAA,IACAC,eAAA,mBAGArE,QAAAC,OAAA,OACAqE,WAAA,uBAAA,UAAA,UAAA,YAAA,SAAA,aAAA,WAAA,gBAAA,OAAA,sBAAA,QACA,SAAAC,EAAAC,EAAAC,EAAA/D,EAAAf,EAAA+E,EAAAC,EAAAC,EAAAC,EAAAtE,GA2SA,QAAAuE,KACA,MAAA,KAAAxC,SAAA4B,SAAAC,SAAAC,OAAA,mBACA,4BACA,KAAA9B,SAAA4B,SAAAC,SAAAC,OAAA,aACA,kDAEAK,EAAAM,OACA,oBAAAN,EAAAM,OAEA,mBAlTApF,EAAAsB,MAEA+D,iBAAA,KAEAC,oBAAA,WAUArF,QAAAyC,UACAvB,KAAA,WACA,MAAA,IAAAlB,SAAA,SAAAyC,EAAA6C,GAyBA,QAAAC,KAGA,QAAAC,GAAAC,GAEA,GAAAC,IACAC,QAAAF,EAAAG,QAAAD,QAEA5F,GAAAsB,KAAAwE,gBAAA,eAAAH,EAAA,GACAjD,GAAA,GAGA,QAAAqD,GAAAzC,GACA,GAAAqC,IACAC,QAAA,KAEA5F,GAAAsB,KAAAwE,gBAAA,eAAAH,EAAA,GACAJ,EAAAjC,GAhBA0C,WAAAC,WAAAR,EAAAM,EAAA,GAxBA,GAAA/F,EAAAsB,KAAA4E,uBAAA,CAEA,GAAAC,IAEAA,EAAAnG,EAAAsB,KAAA8E,iBAAA,eAAA,UACAD,EAAAE,eAAA,YAAAF,EAAAP,QACAlD,GAAA,GAKA8C,QAGA,CACA9B,QAAAC,IAAA,uBACA,IAAAgC,IACAC,QAAA,KAEA5F,GAAAsB,KAAAwE,gBAAA,eAAAH,EAAA,GACAjD,GAAA,QAxBAzC,SAiDA,SAAAqD,GACA,IAAAA,EAAAgD,IAIA,KAAAhD,EAHAI,SAAAC,IAAAL,EAAAgD,OAnDArG,SAyDA,SAAAqD,GACAI,QAAAC,IAAAL,MAIAiD,yBAAA,WACA,MAAArB,GAAAsB,aACA,GAEA,GAIAN,qBAAA,WACA,MAAAhB,GAAAuB,OAAAD,aACA,GAEA,GAIAE,mBAAA,SAAAC,EAAAC,GACA,GAAAC,IACAC,MAAAF,EACAG,WAAA,GAAAC,OAAAC,UAEA,OAAA/B,GAAAgC,IAAAP,EAAAE,IAGAM,oBAAA,SAAAR,EAAAS,GAIA,GAHAA,IACAA,EAAA,OAEApH,EAAAsB,KAAA+F,4BAAAV,GAAA,CACA,GAAAE,GAAA3B,EAAAoC,IAAAX,GACAY,EAAAV,EAAAE,UACAS,GAAA,GAAAR,OAAAC,UAAArD,UACA,OAAA4D,GAAAD,EAAA,IAAAH,GACApH,EAAAsB,KAAAmG,wBAAAd,KACA,GAEAE,EAAAC,MAGA,OAAA,GAIAhB,gBAAA,SAAAa,EAAAC,EAAAc,GACAA,IACAA,EAAA,EAEA,IAAAb,IACAC,MAAAF,EACAG,WAAA,GAAAC,OAAAC,UAGA,OADAJ,GAAAc,KAAAC,UAAAf,GACA3B,EAAAuB,OAAAS,IAAAP,EAAAE,EAAAa,IAGAtB,iBAAA,SAAAO,EAAAS,GACAA,IACAA,EAAA,MAEA,IAAAP,GAAA3B,EAAAuB,OAAAa,IAAAX,EACA,IAAAE,EAAA,CACA,GAAAU,GAAAV,EAAAE,UACAS,GAAA,GAAAR,OAAAC,UAAArD,UACA,OAAA4D,GAAAD,EAAA,IAAAH,GACApH,EAAAsB,KAAAuG,oBAAAlB,IACA,GAEAE,EAAAC,MAGA,OAAA,GAIAO,4BAAA,SAAAV,GAIA,IAAA,GAHAmB,GAAA5C,EAAA4C,OACAC,EAAAD,EAAAE,OACAC,GAAA,EACAC,EAAA,EAAAH,EAAAG,EAAAA,IACA,GAAAJ,EAAAI,IAAAvB,EAAA,CACAsB,GAAA,CACA,OAGA,MAAAA,IAGAR,uBAAA,SAAAU,EAAAC,GACA,MAAAA,GACAlD,EAAAmD,YAEAF,EAAAG,QAAA,SAAA3B,GACAzB,EAAAqD,OAAA5B,MAIA,IAGAkB,oBAAA,SAAAlB,GACA,MAAAzB,GAAAuB,OAAA8B,OAAA5B,IAGA6B,YAAAvE,EAAAC,QAAAF,QAEAyE,eAAA,SAAAzE,GAGA,MAFAA,GAAA0E,SAAA1E,GAEAA,GAAA,KACA,KACAA,GAAA,KAAA,KAAAA,EACA,KACAA,GAAA,KAAA,IAAAA,EACA,KACA,IAAAA,EACA,KADA,QAMA2E,YAAA,SAAA7B,GACA,MAAA7B,GAAA0D,YAAA7B,IAGA8B,kBAAA,SAAAC,EAAAC,GACA,MAAAC,GAAAC,aAAAH,EAAAC,IAGAG,eAAA,SAAAC,GACA,GAAAC,GAAA,qCACA,OAAAA,GAAAD,GAGAE,sBAAA,gEAEAC,QAAA,SAAAC,GACA,GAAAC,IAAA,GAAA,IAAA,IACA,OAAA,KAAAD,EAAAE,YAAAxB,QAAA,EAAAe,EAAAC,aAAAM,EAAAE,YAAAD,GAAAvB,OAAA,GAGAyB,sBAAA,WACA,MAAA,uCAGAC,QAAA,WACA5E,EAAA6E,KAAA,WACA3E,KAGA4E,KAAA,WACA5J,EAAA4J,QAGArI,sBAAA,SAAAH,GACAwD,EAAA,kBAAAxD,IAGAyI,UAAA,SAAAC,EAAAxD,GACAtG,EAAA6J,UAAAC,EAAAxD,IAGAyD,aAAA,WACA/J,EAAAgK,WAAA,iBAGAC,gBAAA,WACApF,EAAAN,SAAA2F,KAAA,UAGAC,gBAAA,WACAtF,EAAAN,SAAA2F,KAAA,gBAGAE,WAAA,WACAvF,EAAAN,SAAA8F,UAGAC,eAAA,WACAzF,EAAAN,SAAA2F,KAAA,KAGAK,eAAA,SAAAC,GACA3F,EAAAN,SAAA2F,KAAA/E,IAAAqF,GAGAC,uBAAA,WACAvG,OAAAK,SAAA2F,KAAAvH,SAAAC,UAGA8H,cAAA,SAAAC,GACA,GAAArE,EAOA,OAHAA,GAHAqE,GAAA,gBAAAA,IAAA,IAAAA,EAAA3C,OAGA2C,EAAA,MAFA,uBAKA5F,EAAA6F,MACAvJ,MACAsJ,QAAArE,GAEAuE,YAAA,+BACAC,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,MAMArL,EAAAsB,KAAAgE,sBAEAtF,EAAA4J,KAAA,WACA1F,OAAAoH,QAAA1B,WClTAvJ,QAAAC,OAAA,OACAK,UAAA,oBAAA,aAAA,QAAA,SAAAX,EAAAY,GACA,OACAC,SAAA,KACAC,KAAA,SAAAC,GAeA,QAAAwK,GAAAC,GACA,MAAA5K,GAAAM,KAAA,4BACAsK,eAAAA,IAfAzK,EAAAwK,wBAAA,SAAAC,GACA,GAAAC,GAAAzL,EAAAsB,KAAAoJ,cAAA,gBACAa,GAAAC,GACAE,QAAA,SAAAtK,GACAqK,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAApK,GACAiK,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAAC,WCfAnB,QAAAC,OAAA,OACAuL,OAAA,kBAAA,KAAA,OAAA,UAAA,aAAA,WAAA,SAAAC,EAAAC,EAAAlH,EAAA7E,EAAA+E,GACA,MAAA,UAAA3D,GACA,QAAA4K,GAAAC,EAAAC,EAAA5F,GACA,OACA2F,KAAAA,GAAA,GAAA,EACAC,YAAAA,EACA5F,IAAAA,GAyDA,QAAA6F,KACApH,EAAA6F,MACAwB,SAAA,8BACAtB,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,IAIA,QAAAgB,GAAA1B,GACA5F,EAAAuH,aACAjL,MACAsJ,QAAAA,GAEAyB,SAAA,uBACAtB,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,IACAlK,KAAA,WACAnB,EAAAsB,KAAAiJ,eAAA,iBACA,WACAvK,EAAAsB,KAAAiJ,eAAA,YApFA,GAAA,OAAAnJ,GAAA,gBAAAA,GAAA,CAeA,GAdAA,EAAAc,UACAd,EAAAmL,eACA1H,EAAAN,SAAA2F,KAAA9I,EAAAmL,cAGAnL,EAAAiJ,QACArK,EAAAsB,KAAA8I,aAEAhJ,EAAAoL,QACApL,EAAA0I,MAAA1I,EAAAkF,KACAtG,EAAA6J,UAAAzI,EAAA0I,KAAA1I,EAAAkF,KAIAlF,EAAAqK,QACArK,EAAAqL,GACA,OAAArL,EAAAqL,IACA,IAAA,iBACAN,GACA,MACA,KAAA,UACAE,EAAAjL,EAAAkF,KAOAlF,EAAAsL,QACAtL,EAAA8K,aAAA9K,EAAAkF,KACAtG,EAAAgK,WAAA,kBAAAgC,GAAA,EAAA5K,EAAA8K,YAAA9K,EAAAkF,MAGAlF,EAAAuL,cACAvL,EAAA8K,aAAA9K,EAAAkF,KACAtG,EAAAgK,WAAA,eAAAgC,GAAA,EAAA5K,EAAA8K,YAAA9K,EAAAkF,MAGAlF,EAAAwL,oBACAxL,EAAA8K,aAAA9K,EAAAkF,KACAtG,EAAAgK,WAAA,qBAAAgC,GAAA,EAAA5K,EAAA8K,YAAA9K,EAAAkF,MAGAlF,EAAAyL,QACAd,EAAAe,KAAA1L,EAAAyL,QAMA,OAAA,MC9DAxM,QAAAC,OAAA,OACAyM,QAAA,WAAA,YAAA,QACA,SAAAjI,EAAAlE,GACA,GAAAoM,KAEA,QAEAA,SAAA,SAAA3L,GACA,MAAAA,GACA2L,EAAA3L,EAGA2L,GAIAC,mBAAA,WACA,MAAArM,GAAA0G,IAAA,qBAGAnC,gBAAA,WACA,MAAA,KAAAxC,SAAA4B,SAAAC,SAAAC,OAAA,mBACA,4BACA,KAAA9B,SAAA4B,SAAAC,SAAAC,OAAA,aACA,kDAEAK,EAAAM,OACA,oBAAAN,EAAAM,OAEA,wBC7BA/E,QAAAC,OAAA,OACAK,UAAA,mBAAA,aAAA,SAAA,SAAAX,EAAAkN,GACA,OACArM,SAAA,KACAC,KAAA,WACAd,EAAA6J,UAAA,SAAAsD,EAAAC,GACA,OAAAD,GACA,IAAA,UACAD,EAAAG,QACAH,EAAAxB,QAAA0B,EACA,MACA,KAAA,UACAF,EAAAG,QACAH,EAAAI,QAAAF,EAAA,WACAG,aAAA,EACAC,cAAA,GAEA,MACA,KAAA,QACAN,EAAAG,QACAH,EAAAtB,MAAAwB,EAAA,SACAG,aAAA,EACAC,cAAA,EACAC,SAAA,GAEA,MACA,SAEAP,EAAAG,UAIArN,EAAA0N,YAAA,WACAR,EAAAG,cAKA1M,UAAA,qBAAA,aAAA,SAAAX,GACA,OACAa,SAAA,KACAC,KAAA,SAAAC,GACAA,EAAA4L,cACAV,MAAA,EACAC,YAAA,GACA5F,IAAA,IAGAtG,EAAA2N,IAAA,eAAA,SAAAC,EAAAlB,GACA3L,EAAA4L,aAAAD,IAGA1M,EAAA2N,IAAA,eAAA,WACA5M,EAAA4L,cACAV,MAAA,EACAC,YAAA,GACA5F,IAAA,WAMA3F,UAAA,2BAAA,aAAA,SAAAX,GACA,OACAa,SAAA,KACAC,KAAA,SAAAC,GACAA,EAAA6L,oBACAX,MAAA,EACAC,YAAA,GACA5F,IAAA,IAGAtG,EAAA2N,IAAA,qBAAA,SAAAC,EAAAlB,GACA3L,EAAA6L,mBAAAF,IAGA1M,EAAA2N,IAAA,eAAA,WACA5M,EAAA6L,oBACAX,MAAA,EACAC,YAAA,GACA5F,IAAA,WChFAjG,QAAAC,OAAA,OACAK,UAAA,wBAAA,aAAA,UAAA,SAAAX,GACA,OACAa,SAAA,KACAC,KAAA,SAAAC,GACAA,EAAA8M,iBACA5B,MAAA,EACAC,YAAA,GACA5F,IAAA,IAGAtG,EAAA2N,IAAA,kBAAA,SAAAC,EAAAlB,GACA3L,EAAA8M,gBAAAnB,IAGA1M,EAAA2N,IAAA,eAAA,WACA5M,EAAA8M,iBACA5B,MAAA,EACAC,YAAA,GACA5F,IAAA,WCnBAjG,QAAAC,OAAA,OACAK,UAAA,kBAAA,aAAA,QAAA,SAAAX,EAAAY,GAEA,OACAC,SAAA,KACAC,KAAA,SAAAC,GAIA,QAAA+M,GAAAC,GACAhN,EAAAiN,gBACAC,MAAAlN,EAAAmN,SAAAD,MACAE,cAAAJ,GAIAhN,EAAAiN,eAAAC,OAAAlN,EAAAiN,eAAAG,gBACApN,EAAAqN,gBACAC,EAAAtN,EAAAiN,gBACAtC,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAL,EAAAmN,SAAAH,aACA1N,QAAAiO,QAAA,oBAAAC,YAAAnN,GACAL,EAAAyN,oBAEA5C,MAAA,SAAA6C,GACAzO,EAAAsB,KAAAC,sBAAAkN,GACA1N,EAAAyN,qBAKA,QAAAH,GAAAK,GACA,GAAAT,GAAAS,EAAAT,MACAF,EAAAW,EAAAP,aACA,OAAAvN,GAAA0G,IAAA,kBAAA2G,EAAA,SAAAvF,SAAAqF,IA5BAhN,EAAAmN,SAAAvG,KAAAgH,MAAA5N,EAAA6N,OAgCA7N,EAAA8N,SAAA,WACAf,EAAApF,SAAA3H,EAAAmN,SAAAH,YAAA,IAIAhN,EAAAqN,cAAA,WACAnK,EAAA,gBAAA6K,OAAA,YAEA/N,EAAAyN,gBAAA,WACAvK,EAAA,gBAAA6K,OAAA,eChDAzO,QAAAC,OAAA,OACAqE,WAAA,yBAAA,KAAA,SAAA,aAAA,cAAA,UACA,SAAAmH,EAAA/K,EAAAf,EAAA+O,GAIA,QAAAC,KACAD,EAAAE,0BACAvD,QAAA,SAAAtK,GACAL,EAAAmO,WAAAH,EAAAI,iBAAA/N,EAAA8N,YACAlP,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,KATArO,EAAAmO,WAAAH,EAAAC,gBAaAA,OCjBA3O,QAAAC,OAAA,OACAyM,QAAA,uBAAA,QAAA,aACA,SAAAnM,EAAAZ,GAEA,GAAAqP,KAEA,QAEAC,qBAAA,WACA,MAAAD,IAGAE,+BAAA,WACA,MAAA3O,GAAAM,KAAA,+BAGAsO,wBAAA,SAAAC,GAGA,MAFAJ,GAAAI,EACAzP,EAAAgK,WAAA,uBACAqF,OCnBAhP,QAAAC,OAAA,OACAyM,QAAA,eAAA,UAAA,QACA,SAAAnI,EAAAhE,GAEA,OAEA8O,kCAAA,SAAAC,GACA,MAAA/O,GAAAM,KAAA,gBACAyO,UAAAA,KAIAC,cAAA,SAAAC,GACA,MAAAjP,GAAAM,KAAA,gBACA2O,QAAAA,KAIAC,iBAAA,SAAA5O,GACA,MAAAN,GAAAM,KAAA,mBACA6O,WAAA7O,KAIA8O,UAAA,SAAAC,GACA,MAAArP,GAAAM,KAAA,kBACA+O,eAAAA,KAIAC,YAAA,SAAAD,GACA,MAAArP,GAAAM,KAAA,yBC/BAb,QAAAC,OAAA,OACAyM,QAAA,eAAA,UAAA,QACA,SAAAnI,EAAAhE,GAEA,GAAAsO,MACAiB,KACAC,KACAC,KACAC,IAEA,QAEAtB,cAAA,WACA,MAAAE,IAGAD,wBAAA,WACA,MAAArO,GAAAM,KAAA,0BAGAiO,iBAAA,SAAAoB,GAEA,MADArB,GAAAqB,GAIAC,YAAA,WACA,MAAAL,IAGAM,sBAAA,WACA,MAAA7P,GAAAM,KAAA,wBAGAwP,eAAA,SAAAC,GAEA,MADAR,GAAAQ,GAIAC,cAAA,WACA,MAAAR,IAGAS,wBAAA,WACA,MAAAjQ,GAAAM,KAAA,0BAGA4P,iBAAA,SAAAH,GAEA,MADAP,GAAAO,GAIAI,oBAAA,WACA,MAAAV,IAGAW,8BAAA,WACA,MAAApQ,GAAAM,KAAA,gCAGA+P,uBAAA,SAAAN,GAEA,MADAN,GAAAM,GAIAO,eAAA,WACA,MAAAZ,IAGAa,yBAAA,WACA,MAAAvQ,GAAAM,KAAA,2BAGAkQ,kBAAA,SAAAT,GAEA,MADAL,GAAAK,GAIAU,mBAAA,SAAA7F,GACA,MAAA5K,GAAAM,KAAA,2BACAsK,eAAAA,KAIA8F,sBAAA,SAAA9F,GACA,MAAA5K,GAAAM,KAAA,8BACAsK,eAAAA,KAIA+F,YAAA,SAAA/F,GACA,MAAA5K,GAAAM,KAAA,oBACAsK,eAAAA,KAIAgG,QAAA,SAAAhG,GACA,MAAA5K,GAAAM,KAAA,gBACAsK,eAAAA,KAIAiG,UAAA,SAAAjG,GACA,MAAA5K,GAAAM,KAAA,kBACAsK,eAAAA,SCvGAnL,QAAAC,OAAA,OACAuL,OAAA,cAAA,WACA,MAAA,UAAA3K,GACA,QAAAwQ,GAAAC,GACA,MAAAA,GACAC,cACAC,QAAA,WAAA,IACAA,QAAA,MAAA,KAGA,GAAAzE,GAAAsE,EAAAxQ,EAAA4Q,iBACA,OAAA1E,GAAA,IAAAlM,EAAAyO,cCXAtP,QAAAC,OAAA,OACAuL,OAAA,uBAAA,aAAA,SAAA7L,GACA,MAAA,UAAA+R,EAAAC,GAGA,QAAAC,GAAAnI,EAAAsD,GACA4E,GACAhS,EAAAsB,KAAAuI,UAAAC,EAAAsD,GAJA,GAAA8E,GAAA,CAuBA,OAfAH,IACA,GAAAA,EAAA/J,SACAkK,IACAD,EAAA,UAAA,4BAEA,GAAAC,GACAH,EAAA/J,OAAA,KACAiK,EAAA,UAAA,+DACAC,OAIAA,IACAD,EAAA,UAAA,4BAEA,GAAAC,MAGArG,OAAA,uBAAA,WACA,MAAA,UAAAkG,GAGA,QAAAI,GAAAC,GACAC,EACAA,EAAAA,EAAA,KAAAD,EAEAC,GAAAD,EANA,GAAAC,GAAA,EAUA,IAAAN,EAAA,CACA,GAAAO,GAAArO,EAAA,QAAA8N,EAAA,UAAA3E,MAEA,IAAAkF,EAAAtK,QACAmK,EAAA,4BAEAG,EAAAtK,OAAA,GAAAsK,EAAAtK,OAAA,IACAmK,EAAA,gDAGAA,GAAA,2BAEA,OAAAE,OAIAxG,OAAA,4BAAA,aAAA,SAAA7L,GACA,MAAA,UAAA8R,EAAAE,GAGA,QAAAC,GAAAnI,EAAAsD,GACA4E,GACAhS,EAAAsB,KAAAuI,UAAAC,EAAAsD,GAJA,GAAA8E,GAAA,CA6BA,OArBAJ,IACA,GAAAA,EAAA9J,SACAkK,IACAD,EAAA,UAAA,kCAEA,GAAAC,GACAJ,EAAA9J,OAAA,KACAiK,EAAA,UAAA,qEACAC,KAGA,GAAAA,GACAJ,EAAA9J,OAAA,KACAiK,EAAA,UAAA,oEACAC,OAIAA,IACAD,EAAA,UAAA,kCAEA,GAAAC,MAGArG,OAAA,4BAAA,WACA,MAAA,UAAAiG,GAGA,QAAAK,GAAAC,GACAC,EACAA,EAAAA,EAAA,KAAAD,EAEAC,GAAAD,EANA,GAAAC,GAAA,EAUA,IAAAP,EAAA,CACA,GAAAS,GAAAtO,EAAA,QAAA6N,EAAA,UAAA1E,MAEA,IAAAmF,EAAAvK,QACAmK,EAAA,2BAEAI,EAAAvK,OAAA,GAAAuK,EAAAvK,OAAA,IACAmK,EAAA,4CAEAI,EAAAvK,OAAA,IACAmK,EAAA,gDAGAA,GAAA,2BAEA,OAAAE,OAIAxG,OAAA,uBAAA,aAAA,SAAA7L,GACA,MAAA,UAAAwS,EAAAR,GACA,QAAAC,GAAAnI,EAAAsD,GACA4E,GACAhS,EAAAsB,KAAAuI,UAAAC,EAAAsD,GAIA,GAAAoF,EAAA,CACA,GAAAC,GAAAxO,EAAA,QAAAuO,EAAA,UAAApF,MAIA,OAHA,IAAAqF,EAAAzK,QACAiK,EAAA,UAAA,0CAEAQ,EAAAzK,OAAA,EAGA,MADAiK,GAAA,UAAA,2CACA,MAIApG,OAAA,uBAAA,WACA,MAAA,UAAA2G,GACA,GAAAA,EAAA,CACA,GAAAC,GAAAxO,EAAA,QAAAuO,EAAA,UAAApF,MACA,OAAA,IAAAqF,EAAAzK,OACA,2BAEA,GAGA,MAAA,+BAIA6D,OAAA,uBAAA,aAAA,SAAA7L,GACA,MAAA,UAAA0S,EAAAV,GAGA,QAAAC,GAAAnI,EAAAsD,GACA4E,GACAhS,EAAAsB,KAAAuI,UAAAC,EAAAsD,GAJA,GAAA8E,GAAA,CAQA,IAAAQ,EAAA,CACA,GAAAC,GAAA1O,EAAA,QAAAyO,EAAA,UAAAtF,MAEA,IAAAuF,EAAA3K,SACAkK,IACAD,EAAA,UAAA,qCAEA,GAAAC,GACAS,EAAA3K,OAAA,MACAkK,IACAD,EAAA,UAAA,sDAIAC,KACAD,EAAA,UAAA,mCAEA,OAAA,IAAAC,MAGArG,OAAA,uBAAA,WACA,MAAA,UAAA6G,GAGA,QAAAP,GAAAC,GACAC,EACAA,EAAAA,EAAA,KAAAD,EAEAC,GAAAD,EANA,GAAAC,GAAA,EAUA,IAAAK,EAAA,CACA,GAAAC,GAAA1O,EAAA,QAAAyO,EAAA,UAAAtF,MAEA,IAAAuF,EAAA3K,QACAmK,EAAA,oCAEAQ,EAAA3K,OAAA,KACAmK,EAAA,qDAGAA,GAAA,mCAEA,OAAAE,OAIAxG,OAAA,oBAAA,aAAA,SAAA7L,GACA,MAAA,UAAA4S,EAAAZ,GAGA,QAAAC,GAAAnI,EAAAsD,GACA4E,GACAhS,EAAAsB,KAAAuI,UAAAC,EAAAsD,GAJA,GAAA8E,GAAA,EAQAW,EAAA,CAqCA,OAnCAD,IACAA,EAAAtK,QAAA,SAAAwK,GACAD,IACAC,GAAAA,EAAA1F,OACA,GAAA8E,GACAY,EAAA1F,KAAApF,OAAA,IACAkK,IACAD,EAAA,UAAA,yDAIA,GAAAC,GACAY,EAAA1F,KAAApF,OAAA,KACAkK,IACAD,EAAA,UAAA,4DAMA,GAAAC,IACA,EAAAW,IACAX,IACAD,EAAA,UAAA,4CAEAY,EAAA,IACAX,IACAD,EAAA,UAAA,qDAIAC,IACAD,EAAA,UAAA,4CAGA,GAAAC,MAGArG,OAAA,oBAAA,WACA,MAAA,UAAA+G,GAGA,QAAAT,GAAAC,GACAC,EACAA,EAAAA,EAAA,KAAAD,EAEAC,GAAAD,EANA,GAAAC,GAAA,GAUAQ,EAAA,CAqBA,OAnBAD,KACAA,EAAAtK,QAAA,SAAAwK,GACAD,IACAC,GAAAA,EAAA1F,OACA0F,EAAA1F,KAAApF,OAAA,GACAmK,EAAA,wDAGAW,EAAA1F,KAAApF,OAAA,IACAmK,EAAA,2DAKAU,EAAA,GACAV,EAAA,kDAIAE,MCzSAhS,QAAAC,OAAA,OACAK,UAAA,WAAA,WACA,OACAoS,QAAA,WACAjS,KAAA,SAAAkS,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAC,SAAAxB,QAAAoB,EAAA,GAEAE,KAEAC,EAAAE,GAAA,aAAA,WACAN,EAAAO,OAAA,WACAJ,EAAAK,cAAAJ,EAAAK,eAIAN,EAAAO,QAAA,SAAA5M,GACAsM,EAAAO,QAAAR,EAAAS,kBChBAvT,QAAAC,OAAA,OACAK,UAAA,cAAA,KAAA,OAAA,aAAA,cAAA,UAAA,SAAAmL,EAAAC,EAAA/L,EAAA+O,EAAA8E,GACA,OACAhJ,YAAA,mBACAhK,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GAOA,QAAA0N,KACA7B,EAAA8B,0BACAnF,QAAA,SAAAtK,GACAL,EAAAqP,WAAArB,EAAA+B,iBAAA1P,EAAAuP,YACA3Q,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,KAZArO,EAAA+S,iBACAC,aAAA,IAEAhT,EAAAqP,WAAArB,EAAA6B,gBAYAA,IAEA5Q,EAAA2N,IAAA,cAAA,WACAiD,MAGA5Q,EAAA2N,IAAA,YAAA,mBC5BAtN,QAAAC,OAAA,OACAK,UAAA,YAAA,KAAA,OAAA,aAAA,cAAA,UAAA,SAAAmL,EAAAC,EAAA/L,EAAA+O,EAAA8E,GACA,OACAhJ,YAAA,iBACAhK,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GASA,QAAAsN,KACAzB,EAAA0B,wBACA/E,QAAA,SAAAtK,GACAL,EAAAoP,SAAApB,EAAA2B,eAAAtP,EAAAuP,YACA3Q,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,KAbArO,EAAAiT,eACAD,aAAA,IAGAhT,EAAAoP,SAAApB,EAAAyB,cAYAA,IAEAxQ,EAAA2N,IAAA,cAAA,WACA6C,MAGAxQ,EAAA2N,IAAA,YAAA,mBC9BAtN,QAAAC,OAAA,OACAK,UAAA,eAAA,KAAA,OAAA,aAAA,cAAA,UAAA,SAAAmL,EAAAC,EAAA/L,EAAA+O,EAAA8E,GACA,OACAhJ,YAAA,oBACAhK,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GASA,QAAAgO,KACAnC,EAAAoC,2BACAzF,QAAA,SAAAtK,GACAL,EAAAuP,YAAAvB,EAAAqC,kBAAAhQ,EAAAuP,YACA3Q,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,KAbArO,EAAAkT,kBACAF,aAAA,IAGAhT,EAAAuP,YAAAvB,EAAAmC,iBAYAA,IAEAlR,EAAA2N,IAAA,cAAA,WACAuD,MAGAlR,EAAA2N,IAAA,YAAA,mBC9BAtN,QAAAC,OAAA,OACAK,UAAA,mBAAA,KAAA,OAAA,aAAA,cAAA,UAAA,SAAAmL,EAAAC,EAAA/L,EAAA+O,EAAA8E,GACA,OACAhJ,YAAA,wBACAhK,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GAOA,QAAA6N,KACAhC,EAAAiC,gCACAtF,QAAA,SAAAtK,GACAL,EAAAsP,iBAAAtB,EAAAkC,uBAAA7P,EAAAuP,YACA3Q,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,KAZArO,EAAAmT,uBACAH,aAAA,IAEAhT,EAAAsP,iBAAAtB,EAAAgC,sBAYAA,IAEA/Q,EAAA2N,IAAA,cAAA,WACAoD,MAGA/Q,EAAA2N,IAAA,YAAA,mBC5BAtN,QAAAC,OAAA,OACAK,UAAA,eAAA,aAAA,cAAA,QAAA,SAAAX,EAAA+O,EAAAnO,GACA,OACAiK,YAAA,oBACAhK,SAAA,KACAmS,OACA1J,KAAA,KAEAxI,KAAA,SAAAC,EAAAkC,EAAAC,GAGAnC,EAAAoT,aAAA,EAEApT,EAAAwK,wBAAA,SAAAC,GAYA,QAAAD,GAAAC,GACA,MAAA5K,GAAAM,KAAA,4BACAsK,eAAAA,IAbA,GAAAC,GAAAzL,EAAAsB,KAAAoJ,cAAA,gBACAa,GAAAC,GACAE,QAAA,SAAAtK,GACAqK,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAApK,GACAiK,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAAC,MAWAT,EAAAsQ,mBAAA,SAAA7F,GACAuD,EAAAsC,mBAAA7F,GACAE,QAAA,SAAAtK,GACApB,EAAAgK,WAAA,eACAhK,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,MAGArO,EAAAuQ,sBAAA,SAAA9F,GACAuD,EAAAuC,sBAAA9F,GACAE,QAAA,SAAAtK,GACApB,EAAAgK,WAAA,eACAhK,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,MAGArO,EAAAwQ,YAAA,SAAA/F,GACAuD,EAAAwC,YAAA/F,GACAE,QAAA,SAAAtK,GACApB,EAAAgK,WAAA,eACAhK,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,MAGArO,EAAAyQ,QAAA,SAAAhG,GACAuD,EAAAyC,QAAAhG,GACAE,QAAA,SAAAtK,GACApB,EAAAgK,WAAA,eACAhK,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,MAGArO,EAAA0Q,UAAA,SAAAjG,GACAuD,EAAA0C,UAAAjG,GACAE,QAAA,SAAAtK,GACApB,EAAAgK,WAAA,eACAhK,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,WChFA/O,QAAAC,OAAA,OACAqE,WAAA,6BAAA,aAAA,SAAA,gBAAA,QAAA,SAAA3E,EAAAe,EAAAqT,EAAAxT,GAqIA,QAAAyT,GAAAC,GAEA,MAAArU,SAAAyC,UACAvB,KAAA,WACA,MAAAJ,GAAAO,KAAAiT,oBACA7I,QAAA,SAAArK,GACArB,EAAAsB,KAAAC,sBAAAF,GACAN,EAAAO,KAAAkT,YAAAnT,EAAAmT,cAEA5I,MAAA,SAAApK,GAEA,KADAxB,GAAAsB,KAAAC,sBAAAC,IAEAiT,KAAA,SAIAtT,KAAA,WAYA,MAXAmT,GAAAI,QACAJ,EAAAI,MAAA,OAGAJ,EAAAnG,gBACAmG,EAAAnG,cAAA,GAGAmG,EAAAK,WACAL,EAAAK,SAAA,IAEA/T,EAAAM,KAAA,oBACAwT,MAAAJ,EAAAI,MACAvG,cAAAmG,EAAAnG,cACAwG,SAAAL,EAAAK,WAEAxT,KAAA,SAAAE,GAGA,MAFAA,GAAAA,EAAAA,KACArB,EAAAsB,KAAAC,sBAAAF,GACAA,IARAT,SAUA,SAAAY,GAIA,MAHAA,GAAAA,EAAAH,KACAqC,QAAAC,IAAAnC,GACAxB,EAAAsB,KAAAC,sBAAAC,GACA,SAxCAvB,SA4CA,SAAAuB,GACA,MAAA,QAlLAT,EAAAO,MACAsT,SACA5H,YACA6H,aAAA,EACAC,aACAJ,MAAA,IAGAK,YAAA,WACA,MAAA9U,SAAAyC,UACAvB,KAAA,WAEA,MADAJ,GAAAO,KAAAuT,aAAA,EACAjU,EAAA0G,IAAA,sBAEAnG,KAAA,SAAA6T,GACAA,EAAAA,EAAA3T,KACA2T,EAAAhI,SAGAjM,EAAAO,KAAA0L,SAAAgI,EAAAhI,SAFAhN,EAAAsB,KAAA6I,kBAIApJ,EAAAO,KAAAuT,aAAA,KAIAI,sBAAA,SAAAC,GAEA,MADAnU,GAAAO,KAAAuT,aAAA,EACAjU,EAAAM,KAAA,8BACAgU,WAAAA,IAEA/T,KAAA,SAAAC,GAIA,MAHAA,GAAAA,EAAAC,KACArB,EAAAsB,KAAAC,sBAAAH,GACAL,EAAAO,KAAAuT,aAAA,EACAzT,EAAA4L,SAGA5L,EAAA4L,cAVApM,SAaA,SAAAY,GAGA,KAFAA,GAAAA,EAAAH,KACAN,EAAAO,KAAAuT,aAAA,EACArT,KAIAgT,eAEAD,kBAAA,WACA,MAAA3T,GAAAM,KAAA,+BAKAiU,wBAEAC,4BAAA,SAAA9L,GACA,GAAA+L,GAAA/L,EAAAE,WACA,OAAAvJ,SAAAyC,UACAvB,KAAA,WACA,IAAA,GAAAwF,KAAA5F,GAAAO,KAAAkT,YACAzT,EAAAO,KAAAkT,YAAAnO,eAAAM,KACA0O,EAAAlR,QAAAuE,SAAA/B,IAAA,IACA5F,EAAAO,KAAA6T,qBAAAxO,MACA5F,EAAAO,KAAA6T,qBAAAxO,GAAA2O,WAAA,IAEAvU,EAAAO,KAAA6T,qBAAAxO,MACA5F,EAAAO,KAAA6T,qBAAAxO,GAAA2O,WAAA,GAKA,OAAAhM,MAIAiM,iBAEAC,oBAAA,SAAAN,GACA,MAAAjV,SAAAyC,UACAvB,KAAA,WACA,MAAAJ,GAAAO,KAAAyT,gBAEA5T,KAAA,WACA,MAAAJ,GAAAO,KAAA2T,sBAAAC,KAEA/T,KAAA,SAAAmI,GACA,MAAAvI,GAAAO,KAAA8T,4BAAA9L,KAEAnI,KAAA,SAAAmI,GACAvI,EAAAO,KAAAiU,cAAAjM,IAXArJ,SAaA,SAAAuB,GACAxB,EAAAsB,KAAAC,sBAAAC,GACAkC,QAAAC,IAAAnC,OAKAT,EAAA0U,YAAA,GAAArB,IACAsB,KAAA,EACAC,MAAA,KAEAC,MAAA,EACAC,QAAA,GAAA,GAAA,GAAA,IAEApC,QAAA,SAAAqC,EAAAC,GAEA1B,GACAK,MAAA3T,EAAAO,KAAAwT,YAAAJ,MACAvG,cAAA4H,EAAAL,OACAf,SAAAoB,EAAAJ,UAEAxU,KAAA,SAAAE,GACA,GAAAA,EAAA,CACA,GAAA2U,GAAA3U,EAAA2U,SACAD,GAAAH,MAAAI,EAAAC,cACAF,EAAAL,KAAAM,EAAAN,MACA3U,EAAAO,KAAAsT,MAAAoB,EAAApB,MACAkB,EAAApT,QAAA3B,EAAAO,KAAAsT,WAEA7T,GAAAO,KAAAsT,SACAmB,EAAAL,KAAA,GACAI,EAAApT,QAAA3B,EAAAO,KAAAsT,eA4DAjU,UAAA,iBAAA,aAAA,QAAA,SAAAX,EAAAY,GACA,OACAC,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GAGAnC,EAAAmV,sBAAA,SAAA1K,EAAA2J,GAGA,MAFApU,GAAAO,KAAAuT,aAAA,EAEA5U,QAAAyC,UACAvB,KAAA,WACA,MAAA,IAAAlB,SAAA,SAAAyC,EAAA6C,GACA,GAAA4P,EAAA,CACA,GAAAgB,KAEA,KAAA,GAAAxP,KAAAwO,GACAA,EAAA9O,eAAAM,IACAwO,EAAAxO,GAAA2O,WACAa,EAAAC,KAAA1N,SAAA/B,GAKAjE,GAAAyT,OAGA5Q,IACAkP,KAAA,IACAjT,IAAA,0BAAA2T,QAKAhU,KAAA,SAAAkV,GACA,MAAAzV,GAAAM,KAAA,8BACAsK,eAAAA,EACA6K,oBAAAA,IAEAlV,KAAA,SAAAC,GAEA,MADAA,GAAAA,EAAAC,OALAT,SAQA,SAAAY,GAEA,KADAA,GAAAA,EAAAH,SAIAF,KAAA,SAAAC,GAEA,MADApB,GAAAsB,KAAAC,sBAAAH,GACAL,EAAAO,KAAAkU,oBAAAhK,KAxCAvL,SA0CA,SAAAuB,GACAxB,EAAAsB,KAAAC,sBAAAC,GACAkC,QAAAC,IAAAnC,MAIAT,EAAAuV,uBAAA,SAAA9K,GAEA,MAAAzK,GAAAO,KAAAkU,oBAAAhK,SAOA7K,UAAA,eAAA,aAAA,QAAA,cAAA,WAAA,SAAAX,EAAAY,EAAAmO,EAAAhK,GACA,OACAlE,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GAGAnC,EAAAwQ,YAAA,SAAA/F,GACAuD,EAAAwC,YAAA/F,GACAE,QAAA,SAAAtK,GACApB,EAAAgK,WAAA,eACAhK,EAAAsB,KAAAC,sBAAAH,GACAL,EAAAO,KAAAkU,oBAAAhK,KAEAI,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,GACArO,EAAAO,KAAAkU,oBAAAhK,MAKAzK,EAAAyQ,QAAA,SAAAhG,GACAuD,EAAAyC,QAAAhG,GACAE,QAAA,SAAAtK,GACApB,EAAAgK,WAAA,eACAhK,EAAAsB,KAAAC,sBAAAH,GACAL,EAAAO,KAAAkU,oBAAAhK,KAEAI,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,GACArO,EAAAO,KAAAkU,oBAAAhK,MAKAzK,EAAA0Q,UAAA,SAAAjG,GACAuD,EAAA0C,UAAAjG,GACAE,QAAA,SAAAtK,GACApB,EAAAgK,WAAA,eACAhK,EAAAsB,KAAAC,sBAAAH,GACAL,EAAAO,KAAAkU,oBAAAhK,KAEAI,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,GACArO,EAAAO,KAAAkU,oBAAAhK,MAIAzK,EAAAwV,WAAA,SAAA/K,GACA,MAAAvL,SAAAyC,UACAvB,KAAA,WACA,MAAA4D,GAAAuH,aACAF,SAAA,0CACAtB,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,MAXApL,SAcA,WAEA,KADAc,GAAAO,KAAAuI,UAAA,UAAA,uBAEA4K,KAAA,OAGAtT,KAAA,WACA,MAAAP,GAAAM,KAAA,mBACAsK,eAAAA,IADA5K,SAGA,SAAAY,GAGA,KAFAA,GAAAA,EAAAH,KACArB,EAAAsB,KAAAC,sBAAAC,GACAA,IAEAL,KAAA,SAAAC,GAGA,MAFAA,GAAAA,EAAAC,KACArB,EAAAsB,KAAAC,sBAAAH,GACAA,MAGAD,KAAA,WAGAnB,EAAAsB,KAAA8I,eAtCAnK,SAwCA,SAAAuB,GACAkC,QAAAC,IAAAnC,WCtVAnB,QAAAC,OAAA,OACAK,UAAA,cAAA,KAAA,OAAA,aAAA,UAAA,SAAAmL,EAAAC,EAAA/L,EAAA6T,GACA,OACAhJ,YAAA,uBACAhK,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GACAlD,EAAA2N,IAAA,cAAA,mBCNAtN,QAAAC,OAAA,OACAK,UAAA,2BAAA,aAAA,QAAA,WAAA,gBAAA,SAAAX,EAAAY,EAAAmE,EAAAqP,GACA,OACAvT,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GAwCA,QAAAsT,GAAAlC,GAEA,MAAArU,SAAAyC,UACAvB,KAAA,WAcA,MAZAmT,GAAAmC,yBACAnC,EAAAmC,uBAAA,OAGAnC,EAAAnG,gBACAmG,EAAAnG,cAAA,GAGAmG,EAAAK,WACAL,EAAAK,SAAA,IAGA/T,EAAAM,KAAA,2BACAuV,uBAAAnC,EAAAmC,uBACAtI,cAAAmG,EAAAnG,cACAwG,SAAAL,EAAAK,WAEAxT,KAAA,SAAAC,GAGA,MAFAA,GAAAA,EAAAC,KACArB,EAAAsB,KAAAC,sBAAAH,GACAA,IARAR,SAUA,SAAAY,GAIA,MAHAA,GAAAA,EAAAH,KACAqC,QAAAC,IAAAnC,GACAxB,EAAAsB,KAAAC,sBAAAC,GACA,SAIAL,KAAA,SAAAC,GACA,MAAAA,KAlCAnB,SAoCA,SAAAuB,GAGA,MAFAkC,SAAAC,IAAAnC,GACAxB,EAAA6J,UAAA,UAAArI,EAAA8E,KAAA,uCACA,OA9EAvF,EAAA2V,eACAC,mBACAC,iBACAC,kBAGA9V,EAAA+V,yBAAA,GAAA1C,IACAsB,KAAA,EACAC,MAAA,KAEAC,MAAA,EACAC,QAAA,GAAA,GAAA,GAAA,IAEApC,QAAA,SAAAqC,EAAAC,GAEAS,GACAC,uBAAA1V,EAAA2V,cAAAC,gBAAAF,uBACAtI,cAAA4H,EAAAL,OACAf,SAAAoB,EAAAJ,UAEAxU,KAAA,SAAAC,GACA,GAAAA,EAAA,CACA,GAAA2V,GAAA3V,EAAA2V,MACAhB,GAAAH,MAAAmB,EAAAd,cACAF,EAAAL,KAAAqB,EAAArB,MACA3U,EAAA2V,cAAAE,cAAAG,EAAAC,MACAlB,EAAApT,QAAA3B,EAAA2V,cAAAE,mBAEA7V,GAAA2V,cAAAE,iBACAb,EAAAL,KAAA,GACAI,EAAApT,QAAA3B,EAAA2V,cAAAE,oBAoDA7V,EAAAkW,uBAAA,WACA,GAAAxL,GAAA1K,EAAAO,KAAAoJ,cAAA,UACA9J,GAAAM,KAAA,+BACAwK,QAAA,SAAAtK,GACAqK,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAAH,GACAL,EAAA2V,cAAAE,cAAAxV,EAAA8V,WACAnW,EAAA2V,cAAAC,qBAEA/K,MAAA,SAAAwD,GACA3D,EAAAE,QAEA3L,EAAAsB,KAAAC,sBAAA6N,MAIArO,EAAAoW,UAAA,WACApW,EAAA2V,cAAAE,cAAAtO,QAAA,SAAApH,EAAAkW,GACAlW,EAAAoU,WAAA,KAIAvU,EAAAsW,YAAA,WACAtW,EAAA2V,cAAAE,cAAAtO,QAAA,SAAApH,EAAAkW,GACAlW,EAAAoU,WAAA,KAIAvU,EAAAuW,aAAA,WA2BA,QAAAC,GAAAd,GACA,GAAAhL,GAAA1K,EAAAO,KAAAoJ,cAAA,SACA,OAAA9J,GAAAM,KAAA,gCACAsW,oBAAAzW,EAAA2V,cAAAG,cACAJ,uBAAAA,IAEA/K,QAAA,SAAAtK,GACAqK,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAAH,GAGAL,EAAA2V,cAAAG,iBAGA9V,EAAAuO,yBAEA1D,MAAA,SAAAwD,GACA3D,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAA6N,KA5CArO,EAAA2V,cAAAE,cAAAtO,QAAA,SAAApH,EAAAkW,GACAlW,EAAAoU,WACAvU,EAAA2V,cAAAG,cAAAT,KAAAlV,EAAA+O,kBAIAlP,EAAA2V,cAAAG,cAAA7O,OAAA,EACAjD,EAAAuH,aACAjL,MACAoW,cAAA1W,EAAAsO,kBAAAqI,uBAEAtL,SAAA,mCACAtB,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,IACAlK,KAAA,SAAAsV,GACAc,EAAAd,IACA,WACA1V,EAAAO,KAAAuI,UAAA,UAAA,oBAyBA9I,EAAAO,KAAAuI,UAAA,UAAA,qCCtKAxJ,QAAAC,OAAA,OACAK,UAAA,4BAAA,KAAA,OAAA,aAAA,QAAA,UAAA,WAAA,SAAAmL,EAAAC,EAAA/L,EAAAY,EAAAiT,EAAA9O,GACA,OACAlE,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GAEAnC,EAAA4W,mBACAC,KAAA,IAGA7W,EAAA8W,gBAAA,WACA,GAAA9W,EAAA4W,kBAAAC,KAAA5P,OAAA,EAAA,CACA,GAAAyD,GAAA1K,EAAAO,KAAAoJ,cAAA,SACA9J,GAAAM,KAAA,uBAAAH,EAAA4W,mBACAjM,QAAA,SAAAtK,GACAqK,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAAH,GACAL,EAAA4W,kBAAAC,KAAA,GAEA7W,EAAAuO,yBAEA1D,MAAA,SAAAwD,GACA3D,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAA6N,SAGApP,GAAAsB,KAAAuI,UAAA,UAAA,mCAIA9I,EAAA+W,qBAAA,SAAArB,EAAAsB,GAuBA,QAAAC,GAAAJ,GACA,GAAAnM,GAAA1K,EAAAO,KAAAoJ,cAAA,SACA9J,GAAAM,KAAA,6BACA+W,wBAAAL,EACAnB,uBAAAA,IAEA/K,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAqK,EAAAE,QAEA5K,EAAAuO,yBAEA1D,MAAA,SAAAwD,GACA3D,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAA6N,KApCArK,EAAAuH,aACAjL,MACA0W,iBAAAA,GAEA3L,SAAA,0BACAtB,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,IACAlK,KAAA,SAAAyW,GACAA,GAAAA,EAAA5P,OAAA,EACAgQ,EAAAJ,GAEA7W,EAAAO,KAAAuI,UAAA,UAAA,wBAEA,WACA9I,EAAAO,KAAAuI,UAAA,UAAA,qBAoBA9I,EAAAmX,mBAAA,SAAAzB,EAAAsB,GAmBA,QAAAI,KACA,GAAA1M,GAAA1K,EAAAO,KAAAoJ,cAAA,WACA9J,GAAAM,KAAA,2BACAuV,uBAAAA,IAEA/K,QAAA,SAAAtK,GACAqK,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAAH,GACAL,EAAA4W,kBAAAC,KAAA,GAEA7W,EAAAuO,yBAEA1D,MAAA,SAAAwD,GACA3D,EAAAE,QACA3L,EAAAsB,KAAAC,sBAAA6N,KAhCArK,EAAAuH,aACAjL,MACA0W,iBAAAA,GAEA3L,SAAA,+BACAtB,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,IACAlK,KAAA,WACAgX,KACA,WACApX,EAAAO,KAAAuI,UAAA,UAAA,8BCxFAxJ,QAAAC,OAAA,OACAqE,WAAA,0BAAA,KAAA,SAAA,aAAA,sBAAA,UACA,SAAAmH,EAAA/K,EAAAf,EAAAoY,EAAAvE,GAEA9S,EAAAsO,kBAAA+I,EAAA9I,uBAEAvO,EAAAuO,qBAAA,WACA8I,EAAA7I,iCACA7D,QAAA,SAAAtK,GACAL,EAAAsO,kBAAA+I,EAAA5I,wBAAApO,EAAAiO,mBACArP,EAAAsB,KAAAC,sBAAAH,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,MAIArO,EAAAuO,uBAEAtP,EAAA2N,IAAA,sBAAA,WACA5M,EAAAsO,kBAAA+I,EAAA9I,4BCpBAjP,QAAAC,OAAA,OACAK,UAAA,0BAAA,UAAA,aAAA,cAAA,UAAA,QAAA,YAAA,WAAA,SAAAiE,EAAA5E,EAAAqY,EAAAxE,EAAAjT,EAAA0X,EAAAvT,GACA,OACAlE,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC;AAoBA,QAAAqV,KAyBA,QAAAC,KACAzX,EAAA0X,UAAApJ,qBACAtO,EAAA0X,UAAAC,WAKA,QAAAC,KACAN,EAAA3I,kCAAA3O,EAAA4O,WACAjE,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAwX,OAAA9Q,KAAA1G,EAAAyX,SAAA7Q,OAAA,GACAjH,EAAA0X,UAAArX,EAAAyX,QACA9X,EAAA0X,UAAAK,KAAA,EAGAN,IACAzX,EAAA0X,UAAAM,WAAA3X,EAAAyX,QAAAE,WACAhY,EAAAuO,uBACAvO,EAAAiY,kBAGAjY,EAAA0X,UAAAK,KAAA,EAEAN,IACAzX,EAAAuO,uBACAvO,EAAAiY,mBAGApN,MAAA,SAAAwD,GAEAoJ,IACAxY,EAAAsB,KAAAC,sBAAA6N,KAnDArO,EAAA0X,WACApJ,qBACAY,eAAA,GACAwG,uBAAA,GACA1E,YAAA,GACAS,YAAA,GACAE,YAAA,GACAE,YACAqG,eACAnH,iBAAA,GACAoH,mBAAA,GACAC,SAAA,SACAC,iBAAAC,EAAAnE,WACAwD,WACAI,KAAA,GAyCAH,IAEA5X,EAAAuO,qBAAA,WACA1O,EAAAM,KAAA,0BACAwK,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAL,EAAA0X,UAAApJ,kBAAAjO,EAAAkY,sBAEA1N,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,MAGArO,EAAAiY,cAAA,WACApY,EAAAM,KAAA,mBACAwK,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAL,EAAA0X,UAAAC,QAAAtX,EAAAuP,aAEA/E,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,MAGArO,EAAAwY,aAAA,WACAxY,EAAA0X,UAAAK,OACA9Y,EAAAsB,KAAAoI,WAGA3I,EAAAyY,cAAA,WACAzY,EAAA0X,UAAAK,OACA9Y,EAAAsB,KAAAoI,WAIA3I,EAAA0Y,SAAA,SAAAC,GAEA,GAAAhR,SAAAgR,KACA,GAAA3Y,EAAA0X,UAAAhC,uBAAAzO,OACAhI,EAAAsB,KAAAuI,UAAA,UAAA,4BACA,GAAA9I,EAAA0X,UAAAU,SAAAnR,OACAhI,EAAAsB,KAAAuI,UAAA,UAAA,+BAEA9I,EAAAyY,iBAKA,GAAA9Q,SAAAgR,IACA3Y,EAAA4Y,sBAAA,IACA5Y,EAAAyY,gBAKA,GAAA9Q,SAAAgR,IACA3Y,EAAA6Y,0BAAA,IACA7Y,EAAAyY,iBAQAzY,EAAA4Y,qBAAA,SAAAnN,GACA,GAAA0F,GAAA,CAcA,OAbAtN,GAAA,uBAAA7D,EAAA0X,UAAA1G,YAAAvF,IACA0F,IAEA,GAAAA,IACAtN,EAAA,uBAAA7D,EAAA0X,UAAAjG,YAAAhG,IACA0F,KAGA,GAAAA,IACAtN,EAAA,oBAAA7D,EAAA0X,UAAA7F,SAAApG,IACA0F,KAGA,GAAAA,GAGAnR,EAAA6Y,yBAAA,SAAApN,GACA,GAAA0F,GAAA,CAiBA,OAhBA,IAAAA,IACAnR,EAAA0X,UAAAS,oBAAA,GAAAnY,EAAA0X,UAAAS,mBAAAlR,SACAkK,IACAlS,EAAAsB,KAAAuI,UAAA,UAAA,oCAGA,GAAAqI,IACAtN,EAAA,4BAAA7D,EAAA0X,UAAA3G,iBAAAtF,IACA0F,KAGA,GAAAA,IACAtN,EAAA,uBAAA7D,EAAA0X,UAAA/F,YAAAlG,IACA0F,KAGA,GAAAA,GAIAnR,EAAA8Y,YAAA,WACA9Y,EAAA4Y,sBAAA,IAEA5Y,EAAAyY,gBAEAnB,EAAAvI,iBAAA/O,EAAA0X,WACA/M,QAAA,SAAAtK,GACA,GAAAyX,GAAAzX,EAAAyX,OACA7Y,GAAAsB,KAAAC,sBAAAH,GAEApB,EAAAsB,KAAAiJ,eAAA,SAAA3F,EAAA,cAAAiU,MAEAjN,MAAA,SAAAwD,GACArO,EAAAwY,eACAvZ,EAAAsB,KAAAC,sBAAA6N,GACApP,EAAAsB,KAAAoI,aAGA1J,EAAAsB,KAAAoI,WAIA3I,EAAA+Y,OAAA,WACA/U,EAAAuH,aACAF,SAAA,6BACAtB,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,IACAlK,KAAA,WACAnB,EAAAsB,KAAAiJ,eAAA,SAAA3F,EAAA,cAAA7D,EAAA0X,aACA,eAwCA,QAAAzI,GAAAC,GACA,MAAArP,GAAAM,KAAA,kBACA+O,eAAAA,IAnQA,GAAAoJ,KAIAxF,GAAA5G,qBACAvB,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAA,EAAA4L,UAGAqM,EAAAjY,EAAA4L,SACAuL,KAHAvY,EAAAsB,KAAA6I,oBAMAyB,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,KAmNArO,EAAAiP,UAAA,WAmBA,QAAA+J,GAAA9J,GACAD,EAAAC,GACAvE,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACApB,EAAAsB,KAAAgJ,mBAEAsB,MAAA,SAAApK,GACAxB,EAAAsB,KAAAC,sBAAAC,KAzBAT,EAAA0X,UAAAxI,gBACAlL,EAAAuH,aACAF,SAAA,yCACAtB,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,IACAlK,KAAA,WACA4Y,EAAAhZ,EAAA0X,UAAAxI,iBACA,WACAlP,EAAAO,KAAAuI,UAAA,UAAA,8BCvPAxJ,QAAAC,OAAA,OACAK,UAAA,yBAAA,UAAA,aAAA,cAAA,UAAA,QAAA,YAAA,WAAA,SAAAiE,EAAA5E,EAAAqY,EAAAxE,EAAAjT,EAAA0X,EAAAvT,GACA,OACAlE,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GAoBA,QAAAqV,KAIAxX,EAAA0X,WACApJ,qBACAoH,uBAAA,GACA1E,YAAA,GACAS,YAAA,GACAE,YAAA,GACAE,YACAqG,eACAnH,iBAAA,GACAoH,mBAAA,GACAC,SAAA,SACAC,iBAAAC,EAAAnE,WACAwD,WACAI,KAAA,GAIA/X,EAAAwY,aAAA,WACAxY,EAAA0X,UAAAK,OACA9Y,EAAAsB,KAAAoI,WAGA3I,EAAAyY,cAAA,WACAzY,EAAA0X,UAAAK,OACA9Y,EAAAsB,KAAAoI,WAIA3I,EAAA0Y,SAAA,SAAAC,GAEA,GAAAhR,SAAAgR,KACA,GAAA3Y,EAAA0X,UAAAhC,uBAAAzO,OACAhI,EAAAsB,KAAAuI,UAAA,UAAA,4BACA,GAAA9I,EAAA0X,UAAAU,SAAAnR,OACAhI,EAAAsB,KAAAuI,UAAA,UAAA,+BAEA9I,EAAAyY,iBAKA,GAAA9Q,SAAAgR,IACA3Y,EAAA4Y,sBAAA,IACA5Y,EAAAyY,gBAKA,GAAA9Q,SAAAgR,IACA3Y,EAAA6Y,0BAAA,IACA7Y,EAAAyY,iBAMAzY,EAAAuO,qBAAA,WACA1O,EAAAM,KAAA,0BACAwK,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAL,EAAA0X,UAAApJ,kBAAAjO,EAAAkY,sBAEA1N,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,MAGArO,EAAAiY,cAAA,WACApY,EAAAM,KAAA,mBACAwK,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAL,EAAA0X,UAAAC,QAAAtX,EAAAuP,aAEA/E,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,MAGArO,EAAAuO,uBACAvO,EAAAiY,gBAIAjY,EAAA4Y,qBAAA,SAAAnN,GACA,GAAA0F,GAAA,CAcA,OAbAtN,GAAA,uBAAA7D,EAAA0X,UAAA1G,YAAAvF,IACA0F,IAEA,GAAAA,IACAtN,EAAA,uBAAA7D,EAAA0X,UAAAjG,YAAAhG,IACA0F,KAGA,GAAAA,IACAtN,EAAA,oBAAA7D,EAAA0X,UAAA7F,SAAApG,IACA0F,KAGA,GAAAA,GAGAnR,EAAA6Y,yBAAA,SAAApN,GACA,GAAA0F,GAAA,CAiBA,OAhBA,IAAAA,IACAnR,EAAA0X,UAAAS,oBAAA,GAAAnY,EAAA0X,UAAAS,mBAAAlR,SACAkK,IACAlS,EAAAsB,KAAAuI,UAAA,UAAA,oCAGA,GAAAqI,IACAtN,EAAA,4BAAA7D,EAAA0X,UAAA3G,iBAAAtF,IACA0F,KAGA,GAAAA,IACAtN,EAAA,uBAAA7D,EAAA0X,UAAA/F,YAAAlG,IACA0F,KAGA,GAAAA,GAIAnR,EAAA8Y,YAAA,WACA9Y,EAAA4Y,sBAAA,GAIAtB,EAAAzI,cAAA7O,EAAA0X,WACA/M,QAAA,SAAAtK,GACA,GAAAyX,GAAAzX,EAAAyX,OACA7Y,GAAAsB,KAAAC,sBAAAH,GACApB,EAAAsB,KAAAiJ,eAAA,SAAA3F,EAAA,cAAAiU,MAEAjN,MAAA,SAAAwD,GACArO,EAAAwY,eACAvZ,EAAAsB,KAAAC,sBAAA6N,GACApP,EAAAsB,KAAAoI,YAGA1J,EAAAsB,KAAAoI,WAIA3I,EAAA+Y,OAAA,WACA/U,EAAAuH,aACAF,SAAA,0BACAtB,UAAA,yBACAC,SAAA,EACAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,WAAA,EACAC,eAAA,IACAlK,KAAA,WACAnB,EAAAsB,KAAAgJ,kBACA,eAjLA,GAAA+O,KAIAxF,GAAA5G,qBACAvB,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAA,EAAA4L,UAGAqM,EAAAjY,EAAA4L,SACAuL,KAHAvY,EAAAsB,KAAA6I,oBAMAyB,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,UCrBA/O,QAAAC,OAAA,OACAK,UAAA,eAAA,WACA,OACAkK,YAAA,oBACAmI,OACAR,YAAA,UAEA3R,SAAA,KACAC,KAAA,SAAAC,GACAA,EAAAiZ,oBAAAjZ,EAAAyR,YACAzR,EAAAkZ,OAAA,cAAA,WACAlZ,EAAAiZ,oBAAAjZ,EAAAyR,mBCXAnS,QAAAC,OAAA,OACAK,UAAA,YAAA,UAAA,SAAAiE,GACA,OACAiG,YAAA,iBACAmI,OACAJ,SAAA,UAEA/R,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,SCRA7C,QAAAC,OAAA,OACAK,UAAA,mBAAA,UAAA,SAAAiE,GACA,OACAwH,SAAA,0HAGAvL,SAAA,KACAmS,OACAjB,YAAA,UAEAjR,KAAA,SAAAC,EAAAkC,EAAAC,GACAnC,EAAAmZ,SAAA,WACA,OAAAtV,EAAA,uBAAA7D,EAAAgR,mBAKApR,UAAA,wBAAA,UAAA,SAAAiE,GACA,OACAwH,SAAA,oIAGAvL,SAAA,KACAmS,OACAlB,iBAAA,UAEAhR,KAAA,SAAAC,EAAAkC,EAAAC,GACAnC,EAAAmZ,SAAA,WACA,OAAAtV,EAAA,4BAAA7D,EAAA+Q,wBAKAnR,UAAA,mBAAA,UAAA,SAAAiE,GACA,OACAwH,SAAA,0HAGAvL,SAAA,KACAmS,OACAR,YAAA,UAEA1R,KAAA,SAAAC,EAAAkC,EAAAC,GACAnC,EAAAmZ,SAAA,WACA,OAAAtV,EAAA,uBAAA7D,EAAAyR,mBAKA7R,UAAA,mBAAA,UAAA,SAAAiE,GACA,OACAwH,SAAA,0HAGAvL,SAAA,KACAmS,OACAN,YAAA,UAEA5R,KAAA,SAAAC,EAAAkC,EAAAC,GACAnC,EAAAmZ,SAAA,WACA,OAAAtV,EAAA,uBAAA7D,EAAA2R,mBAKA/R,UAAA,eAAA,UAAA,SAAAiE,GACA,OACAwH,SAAA,oHAGAvL,SAAA,KACAmS,OACAJ,SAAA,UAEA9R,KAAA,SAAAC,EAAAkC,EAAAC,GACAnC,EAAAmZ,SAAA,WACA,OAAAtV,EAAA,oBAAA7D,EAAA6R,gBC5EAvS,QAAAC,OAAA,OACAK,UAAA,gBAAA,aAAA,UAAA,QAAA,SAAA,YAAA,SAAAX,EAAA6T,EAAAjT,EAAAuZ,EAAA7B,GACA,OAEAzN,YAAA,qBACAhK,SAAA,KACAC,KAAA,SAAAC,EAAAkC,EAAAC,GAaA,QAAAkX,KACArZ,EAAAsZ,UAAAC,QAAA,KACAvZ,EAAAsZ,UAAAC,UA8EA,QAAAC,GAAAC,EAAAC,EAAAxZ,GACAkZ,EAAAO,QACAC,IAAA1Z,EAAA2Z,YACAC,OAAA,OACAL,QACA7T,IAAA1F,EAAA0F,IACAmU,eAAA,uBACAC,IAAA,cACAC,OAAA/Z,EAAA+Z,OACAC,UAAAha,EAAAga,UACAC,eAAA,IAAAT,EAAA3Q,KAAA2Q,EAAA3Q,KAAA,2BACAqR,SAAAV,EAAA7C,MAEA6C,KAAAA,IACAW,SAAA,SAAAC,GACAta,EAAAsZ,UAAAC,QAAA5R,SAAA,IAAA2S,EAAAC,OAAAD,EAAAzF,SAEAlK,QAAA,SAAArK,EAAAka,EAAAC,EAAAjb,GACAP,EAAAsB,KAAAC,sBAAAF,GACArB,EAAAsB,KAAAuI,UAAA,UAAA,8BACA9I,EAAA0X,UAAAQ,YAAA7C,MACAtM,KAAA,QACAzI,MACAoa,aAAAhB,EAAA7C,KACA8D,YAAAza,EAAA0a,gBAGA5a,EAAA6a,qBAEAhQ,MAAA,SAAAwD,GACApP,EAAAsB,KAAAuI,UAAA,UAAA,0IACAnG,QAAAC,IAAAyL,GACArO,EAAA6a,qBAGA,QAAAC,GAAArB,EAAAC,EAAAxZ,GACAkZ,EAAAO,QACAC,IAAA1Z,EAAA2Z,YACAC,OAAA,OACAL,QACA7T,IAAA1F,EAAA0F,IACAmU,eAAA,uBACAC,IAAA,cACAC,OAAA/Z,EAAA+Z,OACAC,UAAAha,EAAAga,UACAC,eAAA,IAAAT,EAAA3Q,KAAA2Q,EAAA3Q,KAAA,2BACAqR,SAAAV,EAAA7C,MAEA6C,KAAAA,IACAW,SAAA,SAAAC,GACAta,EAAAsZ,UAAAC,QAAA5R,SAAA,IAAA2S,EAAAC,OAAAD,EAAAzF,SAEAlK,QAAA,SAAArK,EAAAka,EAAAC,EAAAjb,GACAP,EAAAsB,KAAAC,sBAAAF,GACArB,EAAAsB,KAAAuI,UAAA,UAAA,8BACA9I,EAAA0X,UAAAQ,YAAA7C,MACAtM,KAAA,MACAzI,MACAoa,aAAAhB,EAAA7C,KACA8D,YAAAza,EAAA0a,gBAGA5a,EAAA6a,qBAEAhQ,MAAA,SAAAwD,GACApP,EAAAsB,KAAAuI,UAAA,UAAA,0IACAnG,QAAAC,IAAAyL,GACArO,EAAA6a,qBAGA,QAAAE,GAAAtB,EAAAC,EAAAxZ,GACAkZ,EAAAO,QACAC,IAAA1Z,EAAA2Z,YACAC,OAAA,OACAL,QACA7T,IAAA1F,EAAA0F,IACAmU,eAAA,uBACAC,IAAA,cACAC,OAAA/Z,EAAA+Z,OACAC,UAAAha,EAAAga,UACAC,eAAA,IAAAT,EAAA3Q,KAAA2Q,EAAA3Q,KAAA,2BACAqR,SAAAV,EAAA7C,MAEA6C,KAAAA,IACAW,SAAA,SAAAC,GACAta,EAAAsZ,UAAAC,QAAA5R,SAAA,IAAA2S,EAAAC,OAAAD,EAAAzF,SAEAlK,QAAA,SAAArK,EAAAka,EAAAC,EAAAjb,GACAP,EAAAsB,KAAAC,sBAAAF,GACArB,EAAAsB,KAAAuI,UAAA,UAAA,8BACA9I,EAAA0X,UAAAQ,YAAA7C,MACAtM,KAAA,MACAzI,MACAoa,aAAAhB,EAAA7C,KACA8D,YAAAza,EAAA0a,gBAGA5a,EAAA6a,qBAEAhQ,MAAA,SAAAwD,GACApP,EAAAsB,KAAAuI,UAAA,UAAA,0IACAnG,QAAAC,IAAAyL,GACArO,EAAA6a,qBAkBA,QAAAG,GAAAvB,EAAAC,GACAuB,EAAAxB,EAAAC,GACAW,SAAA,SAAAC,GACAta,EAAAsZ,UAAAC,QAAA5R,SAAA,GAAA2S,EAAAC,OAAAD,EAAAzF,SAEAlK,QAAA,SAAArK,EAAAka,EAAAC,EAAAjb,GACAP,EAAAsB,KAAAC,sBAAAF,GACAN,EAAA0X,UAAAQ,YAAA7C,MACAtM,KAAA,QACAzI,KAAAA,EAAA4a,WAEAlb,EAAA6a,qBAEAhQ,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,GACArO,EAAA6a,qBAGA,QAAAI,GAAAxB,EAAAC,GACA,MAAAN,GAAAO,QACAC,IAAA9G,EAAA1O,kBAAA,uBACAqV,OAAAA,EACAC,KAAAA,IA1OA1Z,EAAAmb,kBACApS,KAAA,SAGA/I,EAAAob,aAAA,EACApb,EAAAsZ,WACApO,MAAA,EACAqO,QAAA,EACAiB,OAAA,eAUA,IAAAa,EAEArb,GAAAkZ,OAAA,WACA,MAAAlZ,GAAAsZ,UAAAC,SACA,SAAA+B,EAAAC,GAEA,IAAAD,IACAtb,EAAAsZ,UAAAkB,OAAA,gBACAa,EAAA9D,EAAA8B,EAAA,QAIArZ,EAAAwb,cAAA,WACAxb,EAAAob,aAAA,EACApb,EAAAsZ,UAAAC,QAAA,EACAvZ,EAAAsZ,UAAAkB,OAAA,YACAxa,EAAAsZ,UAAApO,MAAA,GAGAlL,EAAA6a,iBAAA,WACA7a,EAAAob,aAAA,EACApb,EAAAsZ,UAAApO,MAAA,EACAlL,EAAAsZ,UAAAkB,OAAA,YAGAa,GACA9D,EAAAwB,OAAAsC,IAIArb,EAAAyb,aAAA,SAAAC,GACA,GAAAA,GAAAA,EAAAzU,OAAA,CACA,GAAAyS,GAAAgC,EAAA,GACAjC,IACA,WAAAzZ,EAAAmb,iBAAApS,MACA/I,EAAAwb,gBACA3b,EAAAM,KAAA,uBACAwb,sBAAAjC,EAAA7C,OACAlM,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAmZ,EAAAC,EAAAC,EAAArZ,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,GACArO,EAAA6a,sBAEA,QAAA7a,EAAAmb,iBAAApS,MACA/I,EAAAwb,gBACA3b,EAAAM,KAAA,qBACAwb,sBAAAjC,EAAA7C,OACAlM,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACAya,EAAArB,EAAAC,EAAArZ,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,GACArO,EAAA6a,sBAEA,QAAA7a,EAAAmb,iBAAApS,OACA/I,EAAAwb,gBACA3b,EAAAM,KAAA,qBACAwb,sBAAAjC,EAAA7C,OACAlM,QAAA,SAAAtK,GACApB,EAAAsB,KAAAC,sBAAAH,GACA0a,EAAAtB,EAAAC,EAAArZ,KAEAwK,MAAA,SAAAwD,GACApP,EAAAsB,KAAAC,sBAAA6N,GACArO,EAAA6a,wBA+GA7a,EAAA2Z,OAAA,SAAA+B,GACA,GAAAA,GAAAA,EAAAzU,OAAA,CACA,GAAAyS,GAAAgC,EAAA,GACAjC,IACAzZ,GAAAwb,gBACA,UAAAxb,EAAAmb,iBAAApS,KACAiS,EAAAvB,EAAAC,GACA,QAAA1Z,EAAAmb,iBAAApS,KACA6S,UAAAnC,EAAAC,GACA,QAAA1Z,EAAAmb,iBAAApS,MACA8S,UAAApC,EAAAC","file":"app.min.js","sourcesContent":["function trackDigests(app) {\n    app.run([\"$rootScope\", function ($rootScope) {\n        Promise.setScheduler(function (cb) {\n            $rootScope.$evalAsync(cb);\n        });\n    }]);\n}\n\n//angular sanitize included in textAngular\nvar app = angular.module('app', [\n    'ngSanitize',\n    'ui.bootstrap',\n    'angularUtils.directives.dirDisqus',\n    'ngTagsInput',\n    'ngFileUpload',\n    'toastr',\n    'ngDialog',\n    'ui.select',\n    'ngTable',\n    'LocalStorageModule'\n])\n    .config(['$locationProvider', function ($locationProvider) {\n        $locationProvider.html5Mode({\n            enabled: true\n        });\n    }]);\n\ntrackDigests(app);","angular.module('app')\n    .directive('createAccountScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.createMain = {\n                    isBusy: false\n                };\n\n                $scope.registrationDetails = {\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    username: \"\",\n                    password1: \"\",\n                    password2: \"\"\n                };\n\n                $scope.createAccount = function (redirect) {\n                    $scope.createMain.isBusy = true;\n                    return createAccount($scope.registrationDetails, redirect)\n                        .then(function () {\n                            $scope.createMain.isBusy = false;\n                        });\n                };\n\n                function createAccount(details) {\n                    return $http.post('/createAccount', details)\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            $scope.registrationDetails.password1 = \"\";\n                            $scope.registrationDetails.password2 = \"\";\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('resetPasswordScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.resetMain = {\n                    isBusy: false\n                };\n\n                $scope.resetFormModel = {\n                    email: \"\",\n                    newPassword: \"\",\n                    confirmNewPassword: \"\"\n                };\n\n                //this is the first step\n                $scope.submitResetPasswordEmail = function () {\n                    $scope.resetMain.isBusy = true;\n                    return $http.post('/api/resetPassword/email', $scope.resetFormModel)\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            //don't remove isBusy here to prevent the user from submitting the details again\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            $scope.resetFormModel.email = \"\";\n                            $scope.resetFormModel.newPassword = \"\";\n                            $scope.resetFormModel.confirmNewPassword = \"\";\n                            $scope.resetMain.isBusy = false;\n                        });\n                };\n            }\n        };\n    }]);","angular.module('app')\n    .directive('signInScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.signInMain = {\n                    isBusy: false\n                };\n\n                $scope.loginFormModel = {\n                    username: \"\",\n                    password: \"\"\n                };\n\n                $scope.submitLocalLoginForm = function (redirect) {\n                    $scope.signInMain.isBusy = true;\n                    return localUserLogin($scope.loginFormModel, redirect)\n                        .then(function () {\n                            $scope.signInMain.isBusy = false;\n                        });\n                };\n\n                function localUserLogin(loginData, redirect) {\n                    return Promise.resolve()\n                        .then(function () {\n                            if (redirect) {\n                                return $http.post('/localUserLogin?lastpage=' + document.referrer, loginData);\n                            } else {\n                                return $http.post('/localUserLogin', loginData);\n                            }\n                        })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $scope.loginFormModel.password = \"\";\n                            $rootScope.main.responseStatusHandler(err);\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('imageAdDirective', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                var adsize = $attrs.adsize.toString();\n                var display = s.words($attrs.display);  //s is underscore string library\n\n                var width = $(window).width();\n\n                if (width >= 1200 && display.indexOf('lg') > -1) {\n                    putImageAd();\n                } else if (width >= 992 && width < 1200 && display.indexOf('md') > -1) {\n                    putImageAd();\n                } else if (width >= 768 && width < 992 && display.indexOf('sm') > -1) {\n                    putImageAd();\n                } else if (width < 768 && display.indexOf('xs') > -1) {\n                    putImageAd();\n                } else {\n                    //don't display\n                }\n\n                function putImageAd() {\n                    Promise.resolve()\n                        .then(function () {\n                            return $http.post('/ad/imageAdHtml', {\n                                size: adsize\n                            })\n                                .catch(function (e) {\n                                    e = e.data;\n                                    $rootScope.main.responseStatusHandler(e);\n                                    throw e;\n                                })\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp;\n                                });\n                        })\n                        .then(function (html) {\n                            $element.empty();\n                            $element.append(html);\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .config(function (localStorageServiceProvider) {\n        localStorageServiceProvider\n            .setPrefix('app')\n            .setStorageCookieDomain(document.location.hostname.search(\"africanexponent\") !== -1 ? 'africanexponent.com' : '')\n            .setStorageType('localStorage');\n    });\n\nangular.module('app')\n    .controller('UniversalController', ['$filter', '$window', '$location', '$scope', '$rootScope', 'ngDialog', '$anchorScroll', '$sce', 'localStorageService', '$http',\n        function ($filter, $window, $location, $scope, $rootScope, ngDialog, $anchorScroll, $sce, localStorageService, $http) {\n\n            $rootScope.main = {\n\n                userLocationData: null,\n\n                getUserLocationData: function () {\n\n                    //localStorageKey is 'userLocation'\n\n                    var html5GeoOptions = {\n                        enableHighAccuracy: false,\n                        timeout: 30000,\n                        maximumAge: 86400 * 1000 //default to one day\n                    };\n\n                    Promise.resolve()\n                        .then(function () {\n                            return new Promise(function (resolve, reject) {\n\n                                if ($rootScope.main.checkCookieIsEnabled()) {\n\n                                    var loc;\n\n                                    if (loc = $rootScope.main.getKeyFromCookie('userLocation', 86400 * 7)) {  //checks that the cookie is no more than 7 days old\n                                        if (loc.hasOwnProperty('country') && loc.country) {\n                                            resolve(true);\n                                        } else {\n                                            getNewLocationData();\n                                        }\n                                    } else {\n                                        getNewLocationData();\n                                    }\n\n                                } else {\n                                    console.log('Cookie not supported');\n                                    var temp = {\n                                        country: null\n                                    };\n                                    $rootScope.main.saveKeyToCookie('userLocation', temp, 7); //save for next viewed page\n                                    resolve(true);\n                                }\n\n                                function getNewLocationData() {\n                                    geolocator.locateByIP(found, geoError, 2); //true will cause it to fallback to ip address\n\n                                    function found(locationData) {\n\n                                        var temp = {\n                                            country: locationData.address.country\n                                        };\n                                        $rootScope.main.saveKeyToCookie('userLocation', temp, 1); //save for next viewed page\n                                        resolve(true);\n                                    }\n\n                                    function geoError(e) {\n                                        var temp = {\n                                            country: null\n                                        };\n                                        $rootScope.main.saveKeyToCookie('userLocation', temp, 1); //save for next viewed page\n                                        reject(e);\n                                    }\n                                }\n                            });\n                        })\n                        .catch(function (e) {\n                            if (e.msg) {\n                                console.log(e.msg);\n                            }\n                            else {\n                                throw e;\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                        });\n                },\n\n                checkLocalStorageSupport: function () {\n                    if (localStorageService.isSupported) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n\n                checkCookieIsEnabled: function () {\n                    if (localStorageService.cookie.isSupported) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n\n                saveToLocalStorage: function (key, val) {\n                    var object = {\n                        value: val,\n                        timestamp: new Date().getTime()\n                    };\n                    return localStorageService.set(key, object); //returns a boolean\n                },\n\n                getFromLocalStorage: function (key, maxAgeSeconds) {\n                    if (!maxAgeSeconds) {\n                        maxAgeSeconds = 86400; //default to one day\n                    }\n                    if ($rootScope.main.checkIfExistsOnLocalStorage(key)) {\n                        var object = localStorageService.get(key);\n                        var dateString = object.timestamp;\n                        var now = new Date().getTime().toString();\n                        if (now - dateString > (maxAgeSeconds * 1000)) {\n                            $rootScope.main.removeFromLocalStorage([key]); //remove expired item from local storage\n                            return false;\n                        } else {\n                            return object.value;\n                        }\n                    } else {\n                        return false;\n                    }\n                },\n\n                saveKeyToCookie: function (key, val, maxAgeInDays) {\n                    if (!maxAgeInDays) {\n                        maxAgeInDays = 2; //defaults to 2 day(s)\n                    }\n                    var object = {\n                        value: val,\n                        timestamp: new Date().getTime()\n                    };\n                    object = JSON.stringify(object);\n                    return localStorageService.cookie.set(key, object, maxAgeInDays); //returns a boolean\n                },\n\n                getKeyFromCookie: function (key, maxAgeSeconds) {\n                    if (!maxAgeSeconds) {\n                        maxAgeSeconds = 86400; //default to one day\n                    }\n                    var object = localStorageService.cookie.get(key);\n                    if (object) {\n                        var dateString = object.timestamp;\n                        var now = new Date().getTime().toString();\n                        if ((now - dateString) > (maxAgeSeconds * 1000)) {\n                            $rootScope.main.removeKeyFromCookie(key); //remove expired item from local storage\n                            return false;\n                        } else {\n                            return object.value;\n                        }\n                    } else {\n                        return false;\n                    }\n                },\n\n                checkIfExistsOnLocalStorage: function (key) {\n                    var keys = localStorageService.keys();\n                    var len = keys.length;\n                    var exists = false;\n                    for (var i = 0; i < len; i++) {\n                        if (keys[i] == key) {\n                            exists = true;\n                            break;\n                        }\n                    }\n                    return exists;\n                },\n\n                removeFromLocalStorage: function (keyArray, all) {  //if all is true, it clears all keys\n                    if (all) {\n                        return localStorageService.clearAll();\n                    } else {\n                        keyArray.forEach(function (key) {\n                            localStorageService.remove(key);\n                        });\n                    }\n\n                    return true;\n                },\n\n                removeKeyFromCookie: function (key) {  //if all is true, it clears all keys\n                    return localStorageService.cookie.remove(key);\n                },\n\n                windowWidth: $(window).width(),\n\n                bootStrapWidth: function (width) {\n                    width = parseInt(width);\n\n                    if (width >= 1200) {\n                        return 'lg';\n                    } else if (width >= 992 && width < 1200) {\n                        return 'md';\n                    } else if (width >= 768 && width < 992) {\n                        return 'sm';\n                    } else if (width < 768) {\n                        return 'xs';\n                    }\n                },\n\n\n                trustAsHtml: function (value) {\n                    return $sce.trustAsHtml(value);\n                },\n\n                intersectionArray: function (arr1, arr2) {\n                    return _.intersection(arr1, arr2);\n                },\n\n                getAmazonS3Url: function (keyWithoutSlash) {\n                    var domain = 'https://assets.africanexponent.com/';\n                    return domain + keyWithoutSlash;\n                },\n\n                defaultProfilePicture: '/public/imgsmin/default_avatar/default_avatar_red_462_462.png',\n\n                isAdmin: function (user) {\n                    var arr = [77, 100, 101];\n                    return user.adminLevels.length === 0 ? false : _.intersection(user.adminLevels, arr).length > 0;\n                },\n\n                assetsDomainWithSlash: function () {\n                    return 'https://assets.africanexponent.com/';\n                },\n\n                goToTop: function () {\n                    $location.hash('pageTop');\n                    $anchorScroll();\n                },\n\n                back: function () {\n                    $rootScope.back();\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                showToast: function (type, msg) {\n                    $rootScope.showToast(type, msg);\n                },\n\n                clearBanners: function () {\n                    $rootScope.$broadcast('clearBanners');\n                },\n\n                redirectToAbout: function () {\n                    $window.location.href = '/about';\n                },\n\n                redirectToLogin: function () {\n                    $window.location.href = '/notLoggedIn';\n                },\n\n                reloadPage: function () {\n                    $window.location.reload();\n                },\n\n                redirectToHome: function () {\n                    $window.location.href = '/';\n                },\n\n                redirectToPage: function (pathWithFirstSlash) {\n                    $window.location.href = getLocationHost() + pathWithFirstSlash;\n                },\n\n                redirectToPreviousPage: function () {\n                    window.location.href = document.referrer;\n                },\n\n                showExecuting: function (message) {\n                    var msg;\n                    if (!message || typeof message !== 'string' || message.length === 0) {\n                        msg = 'Performing action...';\n                    } else {\n                        msg = message + '...';\n                    }\n\n                    return ngDialog.open({\n                        data: {\n                            message: msg\n                        },\n                        templateUrl: 'views/dialogs/executing.html',\n                        className: 'ngdialog-theme-default',\n                        overlay: true,\n                        showClose: false,\n                        closeByEscape: false,\n                        closeByDocument: false,\n                        cache: true,\n                        trapFocus: false,\n                        preserveFocus: true\n                    });\n                }\n\n            };\n\n            $rootScope.main.getUserLocationData();\n\n            $rootScope.back = function () {\n                window.history.back();\n            };\n\n            function getLocationHost() {\n                if (document.location.hostname.search(\"africanexponent\") !== -1) {\n                    return \"//www.africanexponent.com\";\n                } else if (document.location.hostname.search(\"amazonaws\") !== -1) {\n                    return \"//ec2-54-85-41-117.compute-1.amazonaws.com:3000\";\n                } else {\n                    if ($location.port()) {\n                        return 'http://localhost' + \":\" + $location.port();\n                    } else {\n                        return 'http://localhost';\n                    }\n                }\n            }\n        }\n    ]);","angular.module('app')\n    .directive('resendEmailScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    var dialog = $rootScope.main.showExecuting('Sending Email');\n                    resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            dialog.close();\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            dialog.close();\n                            $rootScope.main.responseStatusHandler(err);\n                        });\n                };\n\n                function resendConfirmationEmail(userUniqueCuid) {\n                    return $http.post('/resendConfirmationEmail', {\n                        userUniqueCuid: userUniqueCuid\n                    });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', 'ngDialog', function ($q, $log, $window, $rootScope, ngDialog) {\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                };\n            }\n\n            if (resp !== null && typeof resp === 'object') {\n                if (resp.redirect) {\n                    if (resp.redirectPage) {\n                        $window.location.href = resp.redirectPage;\n                    }\n                }\n                if (resp.reload) {\n                    $rootScope.main.reloadPage();\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.showToast(resp.type, resp.msg);\n                        //showNotificationBar(resp.type, resp.msg);\n                    }\n                }\n                if (resp.dialog) {\n                    if (resp.id) {\n                        switch (resp.id) {\n                            case \"not-authorized\":\n                                not_authorized_dialog();\n                                break;\n                            case \"sign-in\":\n                                sign_in_dialog(resp.msg);\n                                break;\n                            default:\n                            //do nothing\n                        }\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.signInBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('signInBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n\n            function not_authorized_dialog() {\n                ngDialog.open({\n                    template: '/dialog/not-authorized.html',\n                    className: 'ngdialog-theme-default',\n                    overlay: true,\n                    showClose: false,\n                    closeByEscape: true,\n                    closeByDocument: true,\n                    cache: false,\n                    trapFocus: true,\n                    preserveFocus: true\n                });\n            }\n\n            function sign_in_dialog(message) {\n                ngDialog.openConfirm({\n                    data: {\n                        message: message\n                    },\n                    template: '/dialog/sign-in.html',\n                    className: 'ngdialog-theme-default',\n                    overlay: true,\n                    showClose: false,\n                    closeByEscape: false,\n                    closeByDocument: false,\n                    cache: true,\n                    trapFocus: true,\n                    preserveFocus: true\n                }).then(function () {\n                    $rootScope.main.redirectToPage('/notLoggedIn');\n                }, function () {\n                    $rootScope.main.redirectToPage('/about');\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .factory('globals', ['$location', '$http',\n        function ($location, $http) {\n            var userData = {};\n\n            return {\n\n                userData: function (data) {\n                    if (data) {\n                        userData = data;\n                        return userData;\n                    } else {\n                        return userData;\n                    }\n                },\n\n                userDataFromServer: function () {\n                    return $http.get('/api/getUserData');\n                },\n\n                getLocationHost: function () {\n                    if (document.location.hostname.search(\"africanexponent\") !== -1) {\n                        return \"//www.africanexponent.com\";\n                    } else if (document.location.hostname.search(\"amazonaws\") !== -1) {\n                        return \"//ec2-54-85-41-117.compute-1.amazonaws.com:3000\";\n                    } else {\n                        if ($location.port()) {\n                            return 'http://localhost' + \":\" + $location.port();\n                        } else {\n                            return 'http://localhost';\n                        }\n                    }\n                }\n            };\n        }\n    ]);","angular.module('app')\n    .directive('toastrDirective', ['$rootScope', 'toastr', function ($rootScope, toastr) {\n        return {\n            restrict: 'AE',\n            link: function () {\n                $rootScope.showToast = function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                };\n\n                $rootScope.clearToasts = function () {\n                    toastr.clear();\n                };\n            }\n        };\n    }])\n    .directive('signInBannerScope', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.signInBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('signInBanner', function (event, banner) {\n                    $scope.signInBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.signInBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }])\n    .directive('registrationBannerScope', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.registrationBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('registrationBanner', function (event, banner) {\n                    $scope.registrationBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.registrationBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .directive('universalBannerScope', ['$rootScope', 'globals', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .directive('postTopicScope', ['$rootScope', '$http', function ($rootScope, $http) {\n\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.theModel = JSON.parse($scope.model);\n\n                function getPostTopic(pageNumber) {\n                    $scope.mainTopicModel = {\n                        topic: $scope.theModel.topic,\n                        requestedPage: pageNumber\n                    };\n\n\n                    if ($scope.mainTopicModel.topic && $scope.mainTopicModel.requestedPage) {\n                        $scope.buttonLoading();\n                        topicSearch($scope.mainTopicModel)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.theModel.pageNumber++;\n                                angular.element('#appendNextPosts').replaceWith(resp);\n                                $scope.finishedLoading();\n                            })\n                            .error(function (errResp) {\n                                $rootScope.main.responseStatusHandler(errResp);\n                                $scope.finishedLoading();\n                            });\n                    }\n                }\n\n                function topicSearch(topicObject) {\n                    var topic = topicObject.topic;\n                    var pageNumber = topicObject.requestedPage;\n                    return $http.get('/partial/topic/' + topic + '?page=' + parseInt(pageNumber));\n                }\n\n\n                $scope.showMore = function () {\n                    getPostTopic(parseInt($scope.theModel.pageNumber) + 1);\n                };\n\n                //button loading state\n                $scope.buttonLoading = function () {\n                    $('#showMoreBtn').button('loading');\n                };\n                $scope.finishedLoading = function () {\n                    $('#showMoreBtn').button('reset');\n                };\n            }\n        };\n    }]);","angular.module('app')\n    .controller('UserManagerController', ['$q', '$scope', '$rootScope', 'UserService', 'globals',\n        function ($q, $scope, $rootScope, UserService) {\n\n            $scope.usersCount = UserService.getUsersCount();\n\n            function getUsersCount() {\n                UserService.getUsersCountFromServer()\n                    .success(function (resp) {\n                        $scope.usersCount = UserService.updateUsersCount(resp.usersCount);\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n            }\n\n            getUsersCount();\n        }\n    ]);","angular.module('app')\n    .factory('PostCategoryService', ['$http', '$rootScope',\n        function ($http, $rootScope) {\n\n            var allPostCategories = {};\n\n            return {\n\n                getAllPostCategories: function () {\n                    return allPostCategories;\n                },\n\n                getAllPostCategoriesFromServer: function () {\n                    return $http.post('/api/category/posts/all', {})\n                },\n\n                updateAllPostCategories: function (newPostCategories) {\n                    allPostCategories = newPostCategories;\n                    $rootScope.$broadcast('postCategoryChanges');\n                    return allPostCategories;\n                }\n            };\n        }\n    ]);","angular.module('app')\n    .factory('PostService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            return {\n\n                getCurrentEditPostModelFromServer: function (postIndex) {\n                    return $http.post('/api/getPost', {\n                        postIndex: postIndex\n                    });\n                },\n\n                submitNewPost: function (newPost) {\n                    return $http.post('/api/newPost', {\n                        newPost: newPost\n                    });\n                },\n\n                submitPostUpdate: function (post) {\n                    return $http.post('/api/updatePost', {\n                        postUpdate: post\n                    });\n                },\n\n                trashPost: function (postUniqueCuid) {\n                    return $http.post('/api/trashPost', {\n                        postUniqueCuid: postUniqueCuid\n                    });\n                },\n\n                unTrashPost: function (postUniqueCuid) {\n                    return $http.post('/api/unTrashPost');\n                }\n            };\n        }\n    ]);","angular.module('app')\n    .factory('UserService', ['$filter', '$http',\n        function ($filter, $http) {\n\n            var usersCount = {};\n            var allUsers = [];\n            var adminUsers = [];\n            var usersNotApproved = [];\n            var bannedUsers = [];\n\n            return {\n\n                getUsersCount: function () {\n                    return usersCount;\n                },\n\n                getUsersCountFromServer: function () {\n                    return $http.post('/api/getUsersCount', {})\n                },\n\n                updateUsersCount: function (newUsersCount) {\n                    usersCount = newUsersCount;\n                    return usersCount;\n                },\n\n                getAllUsers: function () {\n                    return allUsers;\n                },\n\n                getAllUsersFromServer: function () {\n                    return $http.post('/api/getAllUsers', {})\n                },\n\n                updateAllUsers: function (usersArray) {\n                    allUsers = usersArray;\n                    return allUsers;\n                },\n\n                getAdminUsers: function () {\n                    return adminUsers;\n                },\n\n                getAdminUsersFromServer: function () {\n                    return $http.post('/api/getAdminUsers', {})\n                },\n\n                updateAdminUsers: function (usersArray) {\n                    adminUsers = usersArray;\n                    return adminUsers;\n                },\n\n                getUsersNotApproved: function () {\n                    return usersNotApproved;\n                },\n\n                getUsersNotApprovedFromServer: function () {\n                    return $http.post('/api/getUsersNotApproved', {})\n                },\n\n                updateUsersNotApproved: function (usersArray) {\n                    usersNotApproved = usersArray;\n                    return usersNotApproved;\n                },\n\n                getBannedUsers: function () {\n                    return bannedUsers;\n                },\n\n                getBannedUsersFromServer: function () {\n                    return $http.post('/api/getBannedUsers', {})\n                },\n\n                updateBannedUsers: function (usersArray) {\n                    bannedUsers = usersArray;\n                    return bannedUsers;\n                },\n\n                addAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/addAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                removeAdminPrivileges: function (userUniqueCuid) {\n                    return $http.post('/api/removeAdminPrivileges', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                approveUser: function (userUniqueCuid) {\n                    return $http.post('/api/approveUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                banUser: function (userUniqueCuid) {\n                    return $http.post('/api/banUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                },\n\n                unBanUser: function (userUniqueCuid) {\n                    return $http.post('/api/unBanUser', {\n                        userUniqueCuid: userUniqueCuid\n                    })\n                }\n            };\n        }\n    ]);","angular.module('app')\n    .filter(\"getSlugUrl\", [function () {\n        return function (post) {\n            function convertToSlug(Text) {\n                return Text\n                    .toLowerCase()\n                    .replace(/[^\\w ]+/g, '')\n                    .replace(/ +/g, '-');\n            }\n\n            var text = convertToSlug(post.postShortHeading);\n            return text + '-' + post.postIndex;\n        };\n    }]);","angular.module('app')\n    .filter(\"validatePostHeading\", ['$rootScope', function ($rootScope) {\n        return function (postHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.main.showToast(type, text);\n                }\n            }\n\n            if (postHeading) {\n                if (postHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The heading is required');\n                }\n                if (errors == 0) {\n                    if (postHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the heading is 10 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postHeadingMessages\", [function () {\n        return function (postHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postHeading) {\n                var postHeadingText = $(\"<div>\" + postHeading + \"</div>\").text();\n\n                if (postHeadingText.length == 0) {\n                    addMessage('This is a required field');\n                }\n                if (postHeadingText.length > 0 && postHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n            } else {\n                addMessage('This is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostShortHeading\", ['$rootScope', function ($rootScope) {\n        return function (postShortHeading, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.main.showToast(type, text);\n                }\n            }\n\n            if (postShortHeading) {\n                if (postShortHeading.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The short heading is required');\n                }\n                if (errors == 0) {\n                    if (postShortHeading.length < 10) {\n                        broadcastShowToast('warning', 'The minimum required length of the short heading is 10 characters');\n                        errors++;\n                    }\n                }\n                if (errors == 0) {\n                    if (postShortHeading.length > 60) {\n                        broadcastShowToast('warning', 'The maximum allowed length of the short heading is 60 characters');\n                        errors++;\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The short heading is required');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postShortHeadingMessages\", [function () {\n        return function (postShortHeading) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postShortHeading) {\n                var postShortHeadingText = $(\"<div>\" + postShortHeading + \"</div>\").text();\n\n                if (postShortHeadingText.length == 0) {\n                    addMessage('The is a required field');\n                }\n                if (postShortHeadingText.length > 0 && postShortHeadingText.length < 10) {\n                    addMessage('Minimum length required is 10 characters');\n                }\n                if (postShortHeadingText.length > 60) {\n                    addMessage('This heading cannot exceed 60 characters');\n                }\n            } else {\n                addMessage('This is a required field');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostContent\", ['$rootScope', function ($rootScope) {\n        return function (postContent, broadcast) {\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.main.showToast(type, text);\n                }\n            }\n\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    broadcastShowToast('warning', 'Please add some text to the post first');\n                }\n                return postContentText.length > 0;\n            } else {\n                broadcastShowToast('warning', 'Please add some text to the post first');\n                return false;\n            }\n        }\n    }])\n    .filter(\"postContentMessages\", [function () {\n        return function (postContent) {\n            if (postContent) {\n                var postContentText = $(\"<div>\" + postContent + \"</div>\").text();\n                if (postContentText.length == 0) {\n                    return \"This is a required field\"\n                } else {\n                    return \"\";\n                }\n            } else {\n                return \"This is a required field\"\n            }\n        }\n    }])\n    .filter(\"validatePostSummary\", ['$rootScope', function ($rootScope) {\n        return function (postSummary, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.main.showToast(type, text);\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    errors++;\n                    broadcastShowToast('warning', 'The post summary cannot be empty');\n                }\n                if (errors == 0) {\n                    if (postSummaryText.length > 250) {\n                        errors++;\n                        broadcastShowToast('warning', 'The post summary cannot exceed 250 characters');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'The post summary cannot be empty');\n            }\n            return errors == 0;\n        }\n    }])\n    .filter(\"postSummaryMessages\", [function () {\n        return function (postSummary) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            if (postSummary) {\n                var postSummaryText = $(\"<div>\" + postSummary + \"</div>\").text();\n\n                if (postSummaryText.length == 0) {\n                    addMessage('The post summary cannot be empty');\n                }\n                if (postSummaryText.length > 250) {\n                    addMessage('The post summary cannot exceed 250 characters');\n                }\n            } else {\n                addMessage('The post summary cannot be empty');\n            }\n            return messages;\n\n        }\n    }])\n    .filter(\"validatePostTags\", ['$rootScope', function ($rootScope) {\n        return function (postTags, broadcast) {\n            var errors = 0;\n\n            function broadcastShowToast(type, text) {\n                if (broadcast) {\n                    $rootScope.main.showToast(type, text);\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (errors == 0) {\n                            if (tag.text.length < 3) {\n                                errors++;\n                                broadcastShowToast('warning', 'Minimum required length for each tag is 3 characters');\n                            }\n                        }\n\n                        if (errors == 0) {\n                            if (tag.text.length > 30) {\n                                errors++;\n                                broadcastShowToast('warning', 'Maximum allowed length for each tag is 30 characters');\n                            }\n                        }\n                    }\n                });\n\n                if (errors == 0) {\n                    if (numberOfTags < 1) {\n                        errors++;\n                        broadcastShowToast('warning', 'Every post should have at least one tag');\n                    }\n                    if (numberOfTags > 5) {\n                        errors++;\n                        broadcastShowToast('warning', 'Only a maximum of 5 tags are allowed per post');\n                    }\n                }\n            } else {\n                errors++;\n                broadcastShowToast('warning', 'Every post should have at least one tag');\n            }\n\n            return errors == 0;\n        }\n    }])\n    .filter(\"postTagsMessages\", [function () {\n        return function (postTags) {\n            var messages = \"\";\n\n            function addMessage(newMessage) {\n                if (messages) {\n                    messages = messages + \": \" + newMessage;\n                } else {\n                    messages = messages + newMessage;\n                }\n            }\n\n            var numberOfTags = 0;\n\n            if (postTags) {\n                postTags.forEach(function (tag) {\n                    numberOfTags++;\n                    if (tag && tag.text) {\n                        if (tag.text.length < 3) {\n                            addMessage('Minimum required length for each tag is 3 characters');\n                        }\n\n                        if (tag.text.length > 30) {\n                            addMessage('Maximum allowed length for each tag is 30 characters');\n                        }\n                    }\n                });\n\n                if (numberOfTags > 5) {\n                    addMessage('Only a maximum of 5 tags are allowed per post');\n                }\n            }\n\n            return messages;\n        }\n    }]);","angular.module('app')\n    .directive('ckEditor', function () {\n        return {\n            require: '?ngModel',\n            link: function (scope, elm, attr, ngModel) {\n                var ck = CKEDITOR.replace(elm[0]);\n\n                if (!ngModel) return;\n\n                ck.on('pasteState', function () {\n                    scope.$apply(function () {\n                        ngModel.$setViewValue(ck.getData());\n                    });\n                });\n\n                ngModel.$render = function (value) {\n                    ck.setData(ngModel.$viewValue);\n                };\n            }\n        };\n    });","angular.module('app')\n    .directive('adminUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'admin_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.adminUsersModel = {\n                    filterString: \"\"\n                };\n                $scope.adminUsers = UserService.getAdminUsers();\n\n                function getAdminUsers() {\n                    UserService.getAdminUsersFromServer()\n                        .success(function (resp) {\n                            $scope.adminUsers = UserService.updateAdminUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n                getAdminUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAdminUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('app')\n    .directive('allUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'all_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.allUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.allUsers = UserService.getAllUsers();\n\n                function getAllUsers() {\n                    UserService.getAllUsersFromServer()\n                        .success(function (resp) {\n                            $scope.allUsers = UserService.updateAllUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n                getAllUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getAllUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('app')\n    .directive('bannedUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'banned_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //the model to be used when searching\n                $scope.bannedUsersModel = {\n                    filterString: \"\"\n                };\n\n                $scope.bannedUsers = UserService.getBannedUsers();\n\n                function getBannedUsers() {\n                    UserService.getBannedUsersFromServer()\n                        .success(function (resp) {\n                            $scope.bannedUsers = UserService.updateBannedUsers(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n                getBannedUsers();\n\n                $rootScope.$on('userChanges', function () {\n                    getBannedUsers();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('app')\n    .directive('unApprovedUsers', ['$q', '$log', '$rootScope', 'UserService', 'globals', function ($q, $log, $rootScope, UserService, globals) {\n        return {\n            templateUrl: 'unApproved_users.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.usersNotApprovedModel = {\n                    filterString: \"\"\n                };\n                $scope.usersNotApproved = UserService.getUsersNotApproved();\n\n                function getUsersNotApproved() {\n                    UserService.getUsersNotApprovedFromServer()\n                        .success(function (resp) {\n                            $scope.usersNotApproved = UserService.updateUsersNotApproved(resp.usersArray);\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                }\n                getUsersNotApproved();\n\n                $rootScope.$on('userChanges', function () {\n                    getUsersNotApproved();\n                });\n\n                $rootScope.$on('reconnect', function () {\n                });\n            }\n        }\n    }]);","angular.module('app')\n    .directive('userDisplay', ['$rootScope', 'UserService', '$http', function ($rootScope, UserService, $http) {\n        return {\n            templateUrl: 'user_display.html',\n            restrict: 'AE',\n            scope: {\n                user: '='\n            },\n            link: function ($scope, $element, $attrs) {\n                //$scope.user included in scope\n\n                $scope.isCollapsed = true;\n\n                $scope.resendConfirmationEmail = function (userUniqueCuid) {\n                    var dialog = $rootScope.main.showExecuting('Sending Email');\n                    resendConfirmationEmail(userUniqueCuid)\n                        .success(function (resp) {\n                            dialog.close();\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (err) {\n                            dialog.close();\n                            $rootScope.main.responseStatusHandler(err);\n                        });\n\n                    function resendConfirmationEmail(userUniqueCuid) {\n                        return $http.post('/resendConfirmationEmail', {\n                            userUniqueCuid: userUniqueCuid\n                        });\n                    }\n                };\n\n                //user manipulation functions\n                $scope.addAdminPrivileges = function (userUniqueCuid) {\n                    UserService.addAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n                $scope.removeAdminPrivileges = function (userUniqueCuid) {\n                    UserService.removeAdminPrivileges(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n                $scope.approveUser = function (userUniqueCuid) {\n                    UserService.approveUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n                $scope.banUser = function (userUniqueCuid) {\n                    UserService.banUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n                $scope.unBanUser = function (userUniqueCuid) {\n                    UserService.unBanUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n            }\n        }\n    }]);","angular.module('app')\n    .controller('userPermissionsController', ['$rootScope', '$scope', 'ngTableParams', '$http', function ($rootScope, $scope, ngTableParams, $http) {\n\n        $scope.main = {\n            users: [],\n            userData: {},\n            loadingUser: false,\n            searchModel: {\n                query: ''\n            },\n\n            getUserData: function () {\n                return Promise.resolve()\n                    .then(function () {\n                        $scope.main.loadingUser = true;\n                        return $http.get('/api/getUserData');\n                    })\n                    .then(function (obj) {\n                        obj = obj.data;\n                        if (!obj.userData) {\n                            $rootScope.main.redirectToLogin();\n                        } else {\n                            $scope.main.userData = obj.userData;\n                        }\n                        $scope.main.loadingUser = false;\n                    })\n            },\n\n            getUserWithUniqueCuid: function (uniqueCuid) {\n                $scope.main.loadingUser = true;\n                return $http.post('/api/getUserWithUniqueCuid', {\n                    uniqueCuid: uniqueCuid\n                })\n                    .then(function (resp) {\n                        resp = resp.data;\n                        $rootScope.main.responseStatusHandler(resp);\n                        $scope.main.loadingUser = false;\n                        if (!resp.userData) {\n                            return {};\n                        } else {\n                            return resp.userData;\n                        }\n                    })\n                    .catch(function (err) {\n                        err = err.data;\n                        $scope.main.loadingUser = false;\n                        throw err;\n                    })\n            },\n\n            permissions: {},\n\n            getAllPermissions: function () {\n                return $http.post('/api/getAllUserPermissions');\n            },\n\n            //this is na object whose keys are permissions id's, and\n            //value as of now are isChecked\n            userPermissionsModel: {},\n\n            prepareUserPermissionsModel: function (user) {\n                var userPermissions = user.adminLevels;\n                return Promise.resolve()\n                    .then(function () {\n                        for (var key in $scope.main.permissions) {\n                            if ($scope.main.permissions.hasOwnProperty(key)) {\n                                if (userPermissions.indexOf(parseInt(key)) > -1) {\n                                    $scope.main.userPermissionsModel[key] = {};\n                                    $scope.main.userPermissionsModel[key].isChecked = true;\n                                } else {\n                                    $scope.main.userPermissionsModel[key] = {};\n                                    $scope.main.userPermissionsModel[key].isChecked = false;\n                                }\n                            }\n                        }\n\n                        return user;\n                    })\n            },\n\n            userToDisplay: {},\n\n            changeUserToDisplay: function (uniqueCuid) {\n                return Promise.resolve()\n                    .then(function () {\n                        return $scope.main.getUserData();\n                    })\n                    .then(function () {\n                        return $scope.main.getUserWithUniqueCuid(uniqueCuid);\n                    })\n                    .then(function (user) {\n                        return $scope.main.prepareUserPermissionsModel(user);\n                    })\n                    .then(function (user) {\n                        $scope.main.userToDisplay = user;\n                    })\n                    .catch(function (err) {\n                        $rootScope.main.responseStatusHandler(err);\n                        console.log(err);\n                    })\n            }\n        };\n\n        $scope.tableParams = new ngTableParams({\n            page: 1,            // show first page\n            count: 10           // count per page\n        }, {\n            total: 0,\n            counts: [10, 20, 40, 80],\n\n            getData: function ($defer, params) {\n\n                getUsers({\n                    query: $scope.main.searchModel.query,\n                    requestedPage: params.page(),\n                    quantity: params.count()\n                })\n                    .then(function (data) {\n                        if (data) {\n                            var resultObj = data.resultObj;\n                            params.total(resultObj.totalResults);\n                            params.page(resultObj.page);\n                            $scope.main.users = resultObj.users;\n                            $defer.resolve($scope.main.users);\n                        } else {\n                            $scope.main.users = [];\n                            params.page(1); //set the page back to one\n                            $defer.resolve($scope.main.users);\n                        }\n                    });\n\n            }\n        });\n\n        function getUsers(options) {\n\n            return Promise.resolve()\n                .then(function () {\n                    return $scope.main.getAllPermissions()\n                        .success(function (data) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.main.permissions = data.permissions;\n                        })\n                        .error(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                            throw {\n                                code: 600\n                            }\n                        });\n                })\n                .then(function () {\n                    if (!options.query) {\n                        options.query = 'all'; //return all users\n                    }\n\n                    if (!options.requestedPage) {\n                        options.requestedPage = 1;\n                    }\n\n                    if (!options.quantity) {\n                        options.quantity = 10\n                    }\n                    return $http.post('/api/searchUsers', {\n                        query: options.query,\n                        requestedPage: options.requestedPage,\n                        quantity: options.quantity\n                    })\n                        .then(function (data) {\n                            data = data.data;\n                            $rootScope.main.responseStatusHandler(data);\n                            return data;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            console.log(err);\n                            $rootScope.main.responseStatusHandler(err);\n                            return null;\n                        })\n\n                })\n                .catch(function (err) {\n                    return null;\n                })\n        }\n\n    }])\n\n    .directive('userDirective', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n\n                $scope.updateUserPermissions = function (userUniqueCuid, userPermissionsModel) {\n                    $scope.main.loadingUser = true; //this will ultimately be changed by changeUserToDisplay -- getUserData\n\n                    return Promise.resolve()\n                        .then(function () {\n                            return new Promise(function (resolve, reject) {\n                                if (userPermissionsModel) {\n                                    var permissionsArray = [];\n\n                                    for (var key in userPermissionsModel) {\n                                        if (userPermissionsModel.hasOwnProperty(key)) {\n                                            if (userPermissionsModel[key].isChecked) {\n                                                permissionsArray.push(parseInt(key));\n                                            }\n                                        }\n                                    }\n\n                                    resolve(permissionsArray);\n\n                                } else {\n                                    reject({\n                                        code: 600,\n                                        err: 'userPermissionsModel = ' + userPermissionsModel\n                                    });\n                                }\n                            })\n                        })\n                        .then(function (newPermissionsArray) {\n                            return $http.post('/api/updateUserPermissions', {\n                                userUniqueCuid: userUniqueCuid,\n                                newPermissionsArray: newPermissionsArray\n                            })\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    return resp;\n                                })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    throw err\n                                })\n                        })\n                        .then(function (resp) {\n                            $rootScope.main.responseStatusHandler(resp);\n                            return $scope.main.changeUserToDisplay(userUniqueCuid);\n                        })\n                        .catch(function (err) {\n                            $rootScope.main.responseStatusHandler(err);\n                            console.log(err);\n                        })\n                };\n\n                $scope.resetPermissionChanges = function (userUniqueCuid) {\n                    //this will do everything from refreshing the user to refreshing their permissions\n                    return $scope.main.changeUserToDisplay(userUniqueCuid);\n                }\n\n            }\n        }\n    }])\n\n    .directive('userActions', ['$rootScope', '$http', 'UserService', 'ngDialog', function ($rootScope, $http, UserService, ngDialog) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n\n                $scope.approveUser = function (userUniqueCuid) {\n                    UserService.approveUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                            $scope.main.changeUserToDisplay(userUniqueCuid)\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.changeUserToDisplay(userUniqueCuid)\n                        })\n                };\n\n\n                $scope.banUser = function (userUniqueCuid) {\n                    UserService.banUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                            $scope.main.changeUserToDisplay(userUniqueCuid)\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.changeUserToDisplay(userUniqueCuid)\n                        })\n                };\n\n\n                $scope.unBanUser = function (userUniqueCuid) {\n                    UserService.unBanUser(userUniqueCuid)\n                        .success(function (resp) {\n                            $rootScope.$broadcast('userChanges');\n                            $rootScope.main.responseStatusHandler(resp);\n                            $scope.main.changeUserToDisplay(userUniqueCuid)\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.main.changeUserToDisplay(userUniqueCuid)\n                        })\n                };\n\n                $scope.deleteUser = function (userUniqueCuid) {\n                    return Promise.resolve()\n                        .then(function () {\n                            return ngDialog.openConfirm({\n                                template: '/views/dialogs/confirm-delete-user.html',\n                                className: 'ngdialog-theme-default',\n                                overlay: true,\n                                showClose: false,\n                                closeByEscape: false,\n                                closeByDocument: false,\n                                cache: true,\n                                trapFocus: true,\n                                preserveFocus: true\n                            })\n                        })\n                        .catch(function () {\n                            $scope.main.showToast('success', 'Deletion cancelled');\n                            throw {\n                                code: 600\n                            }\n                        })\n                        .then(function () {\n                            return $http.post('/api/deleteUser', {\n                                userUniqueCuid: userUniqueCuid\n                            })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    throw err;\n                                })\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp;\n                                })\n                        })\n                        .then(function () {\n                            //reload this page\n                            //sometimes the user may have deleted themselves so you want to counter that\n                            $rootScope.main.reloadPage();\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                        });\n                };\n            }\n        }\n    }]);","angular.module('app')\n    .directive('usersCount', ['$q', '$log', '$rootScope', 'globals', function ($q, $log, $rootScope, globals) {\n        return {\n            templateUrl: 'user_statistics.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $rootScope.$on('userChanges', function () {\n                });\n            }\n        }\n    }]);","angular.module('app')\n    .directive('changePostCategoryScope', ['$rootScope', '$http', 'ngDialog', 'ngTableParams', function ($rootScope, $http, ngDialog, ngTableParams) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                //category details is field by ui select\n                $scope.categoryModel = {\n                    categoryDetails: {},\n                    categoryPosts: [],\n                    postsToChange: []\n                };\n\n                $scope.categoryPostsTableParams = new ngTableParams({\n                    page: 1,            // show first page\n                    count: 10           // count per page\n                }, {\n                    total: 0,\n                    counts: [10, 20, 40, 80],\n\n                    getData: function ($defer, params) {\n\n                        getCategoryPosts({\n                            postCategoryUniqueCuid: $scope.categoryModel.categoryDetails.postCategoryUniqueCuid,\n                            requestedPage: params.page(),\n                            quantity: params.count()\n                        })\n                            .then(function (resp) {\n                                if (resp) {\n                                    var resObj = resp.resObj;\n                                    params.total(resObj.totalResults);\n                                    params.page(resObj.page);\n                                    $scope.categoryModel.categoryPosts = resObj.posts;\n                                    $defer.resolve($scope.categoryModel.categoryPosts);\n                                } else {\n                                    $scope.categoryModel.categoryPosts = [];\n                                    params.page(1); //set the page back to one\n                                    $defer.resolve($scope.categoryModel.categoryPosts);\n                                }\n                            });\n\n                    }\n                });\n\n                function getCategoryPosts(options) {\n\n                    return Promise.resolve()\n                        .then(function () {\n\n                            if (!options.postCategoryUniqueCuid) { //only do this if the postCategoryUniqueCuid is defined\n                                options.postCategoryUniqueCuid = 'abc';\n                            }\n\n                            if (!options.requestedPage) {\n                                options.requestedPage = 1;\n                            }\n\n                            if (!options.quantity) {\n                                options.quantity = 10\n                            }\n\n                            return $http.post('/api/getPostsInCategory', {\n                                postCategoryUniqueCuid: options.postCategoryUniqueCuid,\n                                requestedPage: options.requestedPage,\n                                quantity: options.quantity\n                            })\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp;\n                                })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    console.log(err);\n                                    $rootScope.main.responseStatusHandler(err);\n                                    return null;\n                                })\n\n                        })\n                        .then(function (resp) {\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            $rootScope.showToast('warning', err.msg || 'An error occurred, Please try again');\n                            return null;\n                        })\n                }\n\n                $scope.loadUncategorizedPosts = function () {\n                    var dialog = $scope.main.showExecuting('Loading');\n                    $http.post('/api/getPostsWithNoCategory')\n                        .success(function (resp) {\n                            dialog.close();\n                            $rootScope.main.responseStatusHandler(resp);\n                            $scope.categoryModel.categoryPosts = resp.postsArray;\n                            $scope.categoryModel.categoryDetails = {};\n                        })\n                        .error(function (errResponse) {\n                            dialog.close();\n\n                            $rootScope.main.responseStatusHandler(errResponse);\n                        })\n                };\n\n                $scope.selectAll = function () {\n                    $scope.categoryModel.categoryPosts.forEach(function (post, index) {\n                        post.isChecked = true;\n                    });\n                };\n\n                $scope.unselectAll = function () {\n                    $scope.categoryModel.categoryPosts.forEach(function (post, index) {\n                        post.isChecked = false;\n                    });\n                };\n\n                $scope.moveSelected = function () {\n                    $scope.categoryModel.categoryPosts.forEach(function (post, index) {\n                        if (post.isChecked) {\n                            $scope.categoryModel.postsToChange.push(post.postUniqueCuid);\n                        }\n                    });\n\n                    if ($scope.categoryModel.postsToChange.length > 0) {\n                        ngDialog.openConfirm({\n                            data: {\n                                allCategories: $scope.allPostCategories.allPostCategoriesData\n                            },\n                            template: 'move_category_select_destination',\n                            className: 'ngdialog-theme-default',\n                            overlay: true,\n                            showClose: true,\n                            closeByEscape: true,\n                            closeByDocument: true,\n                            cache: true,\n                            trapFocus: true,\n                            preserveFocus: true\n                        }).then(function (postCategoryUniqueCuid) {\n                            continueMoving(postCategoryUniqueCuid);\n                        }, function () {\n                            $scope.main.showToast('success', 'Move cancelled');\n                        });\n\n                        function continueMoving(postCategoryUniqueCuid) {\n                            var dialog = $scope.main.showExecuting('Saving');\n                            return $http.post('/api/multiChangePostCategory', {\n                                postUniqueCuidArray: $scope.categoryModel.postsToChange,\n                                postCategoryUniqueCuid: postCategoryUniqueCuid\n                            })\n                                .success(function (resp) {\n                                    dialog.close();\n                                    $rootScope.main.responseStatusHandler(resp);\n\n                                    //empty the posts to change!\n                                    $scope.categoryModel.postsToChange = [];\n\n                                    //function from post category controller, it will update and broadcast an event on success\n                                    $scope.getAllPostCategories();\n                                })\n                                .error(function (errResponse) {\n                                    dialog.close();\n                                    $rootScope.main.responseStatusHandler(errResponse);\n                                });\n                        }\n                    } else {\n                        $scope.main.showToast('warning', 'Please select posts to move')\n                    }\n                }\n            }\n        }\n    }]);","angular.module('app')\n    .directive('postCategoryActionsScope', ['$q', '$log', '$rootScope', '$http', 'globals', 'ngDialog', function ($q, $log, $rootScope, $http, globals, ngDialog) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                $scope.categoryNameModel = {\n                    name: \"\"\n                };\n\n                $scope.addPostCategory = function () {\n                    if ($scope.categoryNameModel.name.length > 0) {\n                        var dialog = $scope.main.showExecuting('Adding');\n                        $http.post('/api/newPostCategory', $scope.categoryNameModel)\n                            .success(function (resp) {\n                                dialog.close();\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.categoryNameModel.name = \"\";\n                                //function from post category controller, it will update and broadcast an event on success\n                                $scope.getAllPostCategories();\n                            })\n                            .error(function (errResponse) {\n                                dialog.close();\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    } else {\n                        $rootScope.main.showToast('warning', 'Please enter the category name');\n                    }\n                };\n\n                $scope.editPostCategoryName = function (postCategoryUniqueCuid, postCategoryName) {\n                    ngDialog.openConfirm({\n                        data: {\n                            postCategoryName: postCategoryName\n                        },\n                        template: 'edit_post_category_name',\n                        className: 'ngdialog-theme-default',\n                        overlay: true,\n                        showClose: true,\n                        closeByEscape: true,\n                        closeByDocument: true,\n                        cache: true,\n                        trapFocus: true,\n                        preserveFocus: true\n                    }).then(function (name) {\n                        if (name && name.length > 0) {\n                            continueEditing(name);\n                        } else {\n                            $scope.main.showToast('warning', 'Please enter a name');\n                        }\n                    }, function () {\n                        $scope.main.showToast('success', 'Edit cancelled');\n                    });\n                    function continueEditing(name) {\n                        var dialog = $scope.main.showExecuting('Saving');\n                        $http.post('/api/editPostCategoryName', {\n                            updatedPostCategoryName: name,\n                            postCategoryUniqueCuid: postCategoryUniqueCuid\n                        })\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                dialog.close();\n                                //function from post category controller, it will update and broadcast an event on success\n                                $scope.getAllPostCategories();\n                            })\n                            .error(function (errResponse) {\n                                dialog.close();\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            });\n                    }\n                };\n                $scope.deletePostCategory = function (postCategoryUniqueCuid, postCategoryName) {\n                    ngDialog.openConfirm({\n                        data: {\n                            postCategoryName: postCategoryName\n                        },\n                        template: 'confirm_delete_post_category',\n                        className: 'ngdialog-theme-default',\n                        overlay: true,\n                        showClose: true,\n                        closeByEscape: true,\n                        closeByDocument: true,\n                        cache: true,\n                        trapFocus: true,\n                        preserveFocus: true\n                    }).then(function () {\n                        continueDeleting();\n                    }, function () {\n                        $scope.main.showToast('success', 'Deletion cancelled')\n                    });\n                    function continueDeleting() {\n                        var dialog = $scope.main.showExecuting('Deleting');\n                        $http.post('/api/deletePostCategory', {\n                            postCategoryUniqueCuid: postCategoryUniqueCuid\n                        })\n                            .success(function (resp) {\n                                dialog.close();\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.categoryNameModel.name = \"\";\n                                //function from post category controller, it will update and broadcast an event on success\n                                $scope.getAllPostCategories();\n                            })\n                            .error(function (errResponse) {\n                                dialog.close();\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    }\n                };\n            }\n        }\n    }]);","angular.module('app')\n    .controller('PostCategoryController', ['$q', '$scope', '$rootScope', 'PostCategoryService', 'globals',\n        function ($q, $scope, $rootScope, PostCategoryService, globals) {\n\n            $scope.allPostCategories = PostCategoryService.getAllPostCategories();\n\n            $scope.getAllPostCategories = function () {\n                PostCategoryService.getAllPostCategoriesFromServer()\n                    .success(function (resp) {\n                        $scope.allPostCategories = PostCategoryService.updateAllPostCategories(resp.allPostCategories);\n                        $rootScope.main.responseStatusHandler(resp);\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    })\n            };\n\n            $scope.getAllPostCategories();\n\n            $rootScope.$on('postCategoryChanges', function () {\n                $scope.allPostCategories = PostCategoryService.getAllPostCategories();\n            })\n        }\n    ]);","angular.module('app')\n    .directive('editPostDirectiveScope', ['$filter', '$rootScope', 'PostService', 'globals', '$http', '$interval', 'ngDialog', function ($filter, $rootScope, PostService, globals, $http, $interval, ngDialog) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                var thisUser = {};\n\n                /*get userData from the server again. This makes sure that the userData is available\n                 * why? sometimes the controller loads faster than the initial requests*/\n                globals.userDataFromServer()\n                    .success(function (resp) {\n                        $rootScope.main.responseStatusHandler(resp);\n                        if (!resp.userData) {\n                            $rootScope.main.redirectToLogin();\n                        } else {\n                            thisUser = resp.userData;\n                            continueRendering();\n                        }\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n\n                function continueRendering() {\n\n                    //postType cannot be changed here\n\n                    /*NOTE: this postModel is overridden by the data from the server so the extra info must\n                     * be added back again. This is done by the addExtraInfoToModel function below*/\n                    $scope.postModel = {\n                        allPostCategories: [],\n                        postUniqueCuid: '',\n                        postCategoryUniqueCuid: \"\",\n                        postHeading: \"\",\n                        postContent: \"\",\n                        postSummary: \"\",\n                        postTags: [],\n                        postUploads: [],\n                        postShortHeading: '',\n                        postHeaderImageKey: '',\n                        postType: 'normal',\n                        authorUniqueCuid: thisUser.uniqueCuid,\n                        writers: [],\n                        step: 1\n\n                    };\n                    \n\n                    function addExtraInfoToModel() {\n                        $scope.postModel.allPostCategories = [];\n                        $scope.postModel.writers = [];\n                        //$scope.postModel.authorName = \"\"; -- is available in the post\n                        //$scope.postModel.authorUniqueCuid = thisUser.uniqueCuid; --is available on post\n                    }\n\n                    function getFullEditPostModel() {\n                        PostService.getCurrentEditPostModelFromServer($scope.postIndex)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                if (Object.keys(resp.thePost).length > 0) {\n                                    $scope.postModel = resp.thePost;\n                                    $scope.postModel.step = 1;\n                                    /*add back the extra info*/\n                                    /*before every other update call*/\n                                    addExtraInfoToModel();\n                                    $scope.postModel.authorName = resp.thePost.authorName;\n                                    $scope.getAllPostCategories();\n                                    $scope.getAllWriters();\n                                } else {\n                                    //empty the post\n                                    $scope.postModel.step = 1;\n                                    /*add back the extra info*/\n                                    addExtraInfoToModel();\n                                    $scope.getAllPostCategories();\n                                    $scope.getAllWriters();\n                                }\n                            })\n                            .error(function (errResponse) {\n                                /*add back the extra info*/\n                                addExtraInfoToModel();\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            });\n                    }\n\n                    getFullEditPostModel();\n\n                    $scope.getAllPostCategories = function () {\n                        $http.post('/api/getPostCategories')\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.postModel.allPostCategories = resp.postCategoriesArray;\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    };\n                    $scope.getAllWriters = function () {\n                        $http.post('/api/getWriters')\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.postModel.writers = resp.usersArray;\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    };\n                    $scope.previousStep = function () {\n                        $scope.postModel.step--;\n                        $rootScope.main.goToTop();\n                    };\n\n                    $scope.incrementStep = function () {\n                        $scope.postModel.step++;\n                        $rootScope.main.goToTop();\n                    };\n\n\n                    $scope.nextStep = function (currentStep) {\n                        //step 1 involves choosing the post category\n                        if (parseInt(currentStep) == 1) {\n                            if ($scope.postModel.postCategoryUniqueCuid.length == 0) {\n                                $rootScope.main.showToast('warning', 'Please select a category');\n                            } else if ($scope.postModel.postType.length == 0) {\n                                $rootScope.main.showToast('warning', 'Please select the post type');\n                            } else {\n                                $scope.incrementStep();\n                            }\n                        }\n\n                        //step 2 involves writing the post itself\n                        if (parseInt(currentStep) == 2) {\n                            if ($scope.validateMainPostForm(true)) {\n                                $scope.incrementStep();\n                            }\n                        }\n\n                        //step 2 involves finalizing the post\n                        if (parseInt(currentStep) == 3) {\n                            if ($scope.validateFinalizePostForm(true)) {\n                                $scope.incrementStep();\n                            }\n                        }\n                    };\n\n\n                    //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                    //broadcast takes a boolean value\n                    $scope.validateMainPostForm = function (notify) {\n                        var errors = 0;\n                        if (!$filter(\"validatePostHeading\")($scope.postModel.postHeading, notify)) {\n                            errors++;\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostContent\")($scope.postModel.postContent, notify)) {\n                                errors++;\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostTags\")($scope.postModel.postTags, notify)) {\n                                errors++;\n                            }\n                        }\n                        return errors == 0;\n                    };\n\n                    $scope.validateFinalizePostForm = function (notify) {\n                        var errors = 0;\n                        if (errors == 0) {\n                            if (!$scope.postModel.postHeaderImageKey || $scope.postModel.postHeaderImageKey.length == 0) {\n                                errors++;\n                                $rootScope.main.showToast('warning', 'Please select the header image');\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostShortHeading\")($scope.postModel.postShortHeading, notify)) {\n                                errors++;\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostSummary\")($scope.postModel.postSummary, notify)) {\n                                errors++;\n                            }\n                        }\n                        return errors == 0;\n                    };\n\n\n                    $scope.submitFinal = function () {\n                        if ($scope.validateMainPostForm(true)) {\n\n                            $scope.incrementStep();\n\n                            PostService.submitPostUpdate($scope.postModel)\n                                .success(function (resp) {\n                                    var thePost = resp.thePost;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    //redirect to the post\n                                    $rootScope.main.redirectToPage('/post/' + $filter('getSlugUrl')(thePost));\n                                })\n                                .error(function (errResponse) {\n                                    $scope.previousStep();\n                                    $rootScope.main.responseStatusHandler(errResponse);\n                                    $rootScope.main.goToTop();\n                                })\n                        } else {\n                            $rootScope.main.goToTop();\n                        }\n                    };\n\n                    $scope.cancel = function () {\n                        ngDialog.openConfirm({\n                            template: 'confirm_cancel_post_update',\n                            className: 'ngdialog-theme-default',\n                            overlay: true,\n                            showClose: true,\n                            closeByEscape: true,\n                            closeByDocument: true,\n                            cache: true,\n                            trapFocus: true,\n                            preserveFocus: true\n                        }).then(function () {\n                            $rootScope.main.redirectToPage('/post/' + $filter('getSlugUrl')($scope.postModel));\n                        }, function () {\n                            //do nothing\n                        });\n                    };\n\n                }\n\n                /*end of continue rendering*/\n\n                $scope.trashPost = function () {\n                    if ($scope.postModel.postUniqueCuid) {\n                        ngDialog.openConfirm({\n                            template: '/views/dialogs/confirm-trash-post.html',\n                            className: 'ngdialog-theme-default',\n                            overlay: true,\n                            showClose: false,\n                            closeByEscape: false,\n                            closeByDocument: false,\n                            cache: true,\n                            trapFocus: true,\n                            preserveFocus: true\n                        }).then(function () {\n                            continueTrashing($scope.postModel.postUniqueCuid);\n                        }, function () {\n                            $scope.main.showToast('success', 'Deletion cancelled');\n                        });\n                    }\n\n                    function continueTrashing(postUniqueCuid) {\n                        trashPost(postUniqueCuid)\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $rootScope.main.redirectToHome();\n                            })\n                            .error(function (err) {\n                                $rootScope.main.responseStatusHandler(err);\n                            });\n                    }\n                };\n\n                function trashPost(postUniqueCuid) {\n                    return $http.post('/api/trashPost', {\n                        postUniqueCuid: postUniqueCuid\n                    });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('newPostDirectiveScope', ['$filter', '$rootScope', 'PostService', 'globals', '$http', '$interval', 'ngDialog', function ($filter, $rootScope, PostService, globals, $http, $interval, ngDialog) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n\n                var thisUser = {};\n\n                /*get userData from the server again. This makes sure that the userData is available\n                 * why? sometimes the controller loads faster than the initial requests*/\n                globals.userDataFromServer()\n                    .success(function (resp) {\n                        $rootScope.main.responseStatusHandler(resp);\n                        if (!resp.userData) {\n                            $rootScope.main.redirectToLogin();\n                        } else {\n                            thisUser = resp.userData;\n                            continueRendering();\n                        }\n                    })\n                    .error(function (errResponse) {\n                        $rootScope.main.responseStatusHandler(errResponse);\n                    });\n\n                function continueRendering() {\n\n                    //postType can either be normal, video or art\n\n                    $scope.postModel = {\n                        allPostCategories: [],\n                        postCategoryUniqueCuid: \"\",\n                        postHeading: \"\",\n                        postContent: \"\",\n                        postSummary: \"\",\n                        postTags: [],\n                        postUploads: [],\n                        postShortHeading: '',\n                        postHeaderImageKey: '',\n                        postType: 'normal',\n                        authorUniqueCuid: thisUser.uniqueCuid,\n                        writers: [],\n                        step: 1\n\n                    };\n\n                    $scope.previousStep = function () {\n                        $scope.postModel.step--;\n                        $rootScope.main.goToTop();\n                    };\n\n                    $scope.incrementStep = function () {\n                        $scope.postModel.step++;\n                        $rootScope.main.goToTop();\n                    };\n\n\n                    $scope.nextStep = function (currentStep) {\n                        //step 1 involves choosing the post category\n                        if (parseInt(currentStep) == 1) {\n                            if ($scope.postModel.postCategoryUniqueCuid.length == 0) {\n                                $rootScope.main.showToast('warning', 'Please select a category');\n                            } else if ($scope.postModel.postType.length == 0) {\n                                $rootScope.main.showToast('warning', 'Please select the post type');\n                            } else {\n                                $scope.incrementStep();\n                            }\n                        }\n\n                        //step 2 involves writing the post itself\n                        if (parseInt(currentStep) == 2) {\n                            if ($scope.validateMainPostForm(true)) {\n                                $scope.incrementStep();\n                            }\n                        }\n\n                        //step 2 involves finalizing the post\n                        if (parseInt(currentStep) == 3) {\n                            if ($scope.validateFinalizePostForm(true)) {\n                                $scope.incrementStep();\n                            }\n                        }\n                    };\n\n\n                    $scope.getAllPostCategories = function () {\n                        $http.post('/api/getPostCategories')\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.postModel.allPostCategories = resp.postCategoriesArray;\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    };\n                    $scope.getAllWriters = function () {\n                        $http.post('/api/getWriters')\n                            .success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                $scope.postModel.writers = resp.usersArray;\n                            })\n                            .error(function (errResponse) {\n                                $rootScope.main.responseStatusHandler(errResponse);\n                            })\n                    };\n                    $scope.getAllPostCategories();\n                    $scope.getAllWriters();\n\n                    //broadcast here helps distinguish from the inform checking and the checking on submit, which requires notifications\n                    //broadcast takes a boolean value\n                    $scope.validateMainPostForm = function (notify) {\n                        var errors = 0;\n                        if (!$filter(\"validatePostHeading\")($scope.postModel.postHeading, notify)) {\n                            errors++;\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostContent\")($scope.postModel.postContent, notify)) {\n                                errors++;\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostTags\")($scope.postModel.postTags, notify)) {\n                                errors++;\n                            }\n                        }\n                        return errors == 0;\n                    };\n\n                    $scope.validateFinalizePostForm = function (notify) {\n                        var errors = 0;\n                        if (errors == 0) {\n                            if (!$scope.postModel.postHeaderImageKey || $scope.postModel.postHeaderImageKey.length == 0) {\n                                errors++;\n                                $rootScope.main.showToast('warning', 'Please select the header image');\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostShortHeading\")($scope.postModel.postShortHeading, notify)) {\n                                errors++;\n                            }\n                        }\n                        if (errors == 0) {\n                            if (!$filter(\"validatePostSummary\")($scope.postModel.postSummary, notify)) {\n                                errors++;\n                            }\n                        }\n                        return errors == 0;\n                    };\n\n\n                    $scope.submitFinal = function () {\n                        if ($scope.validateMainPostForm(true)) {\n\n                            //$scope.incrementStep();\n\n                            PostService.submitNewPost($scope.postModel).\n                                success(function (resp) {\n                                    var thePost = resp.thePost;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    $rootScope.main.redirectToPage('/post/' + $filter('getSlugUrl')(thePost));\n                                })\n                                .error(function (errResponse) {\n                                    $scope.previousStep();\n                                    $rootScope.main.responseStatusHandler(errResponse);\n                                    $rootScope.main.goToTop();\n                                })\n                        } else {\n                            $rootScope.main.goToTop();\n                        }\n                    };\n\n                    $scope.cancel = function () {\n                        ngDialog.openConfirm({\n                            template: 'confirm_cancel_new_post',\n                            className: 'ngdialog-theme-default',\n                            overlay: true,\n                            showClose: true,\n                            closeByEscape: true,\n                            closeByDocument: true,\n                            cache: true,\n                            trapFocus: true,\n                            preserveFocus: true\n                        }).then(function () {\n                            $rootScope.main.redirectToHome();\n                        }, function () {\n                            //do nothing\n                        });\n                    };\n                }\n\n                /*end of continue rendering*/\n            }\n        }\n    }]);","angular.module('app')\n    .directive('postContent', [function () {\n        return {\n            templateUrl: 'post_content.html',\n            scope: {\n                postContent: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.preparedPostContent = $scope.postContent;\n                $scope.$watch('postContent', function () {\n                    $scope.preparedPostContent = $scope.postContent;\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .directive('postTags', ['$filter', function ($filter) {\n        return {\n            templateUrl: 'post_tags.html',\n            scope: {\n                postTags: '=model'\n            },\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                //post Tags is already in scope\n            }\n        }\n    }]);\n","angular.module('app')\n    .directive('headingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postHeading | postHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostHeading\")($scope.postHeading);\n                };\n            }\n        }\n    }])\n    .directive('shortHeadingMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postShortHeading | postShortHeadingMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postShortHeading: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostShortHeading\")($scope.postShortHeading);\n                };\n            }\n        }\n    }])\n    .directive('contentMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postContent | postContentMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postContent: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostContent\")($scope.postContent);\n                }\n            }\n        }\n    }])\n    .directive('summaryMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postSummary | postSummaryMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postSummary: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostSummary\")($scope.postSummary);\n                }\n            }\n        }\n    }])\n    .directive('tagMessages', ['$filter', function ($filter) {\n        return {\n            template: '<span class=\"form-error-notice\" ng-show=\"showSpan()\">' +\n            '<small ng-bind=\"postTags | postTagsMessages\"></small>' +\n            '</span>',\n            restrict: 'AE',\n            scope: {\n                postTags: '=model'\n            },\n            link: function ($scope, $element, $attrs) {\n                $scope.showSpan = function () {\n                    return !$filter(\"validatePostTags\")($scope.postTags);\n                }\n            }\n        }\n    }]);","angular.module('app')\n    .directive('postUploader', ['$rootScope', 'globals', '$http', 'Upload', '$interval', function ($rootScope, globals, $http, Upload, $interval) {\n        return {\n\n            templateUrl: 'post_uploader.html',\n            restrict: 'AE',\n            link: function ($scope, $element, $attrs) {\n                $scope.selectedFileType = {\n                    type: 'image'\n                };\n\n                $scope.isUploading = false;\n                $scope.uploading = {\n                    show: false,\n                    percent: 0,\n                    status: 'Uploading...'\n                };\n\n\n                function incrementUploadingPercent() {\n                    if ($scope.uploading.percent < 100) {\n                        $scope.uploading.percent++;\n                    }\n                }\n\n                var progressIntervalPromise;\n\n                $scope.$watch(function () {\n                    return $scope.uploading.percent;\n                }, function (newVal, oldVal) {\n                    /*user upload progress goes until 80%*/\n                    if (newVal == 80) {\n                        $scope.uploading.status = 'Processing...';\n                        progressIntervalPromise = $interval(incrementUploadingPercent, 1000);\n                    }\n                });\n\n                $scope.showUploading = function () {\n                    $scope.isUploading = true;\n                    $scope.uploading.percent = 0;\n                    $scope.uploading.status = 'Uploading';\n                    $scope.uploading.show = true;\n                };\n\n                $scope.hideProgressBars = function () {\n                    $scope.isUploading = false;\n                    $scope.uploading.show = false;\n                    $scope.uploading.status = 'Uploading';\n\n                    /*stop the timeout*/\n                    if (progressIntervalPromise) {\n                        $interval.cancel(progressIntervalPromise)\n                    }\n                };\n\n                $scope.uploadDirect = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        if ($scope.selectedFileType.type === 'image') {\n                            $scope.showUploading();\n                            $http.post('/api/getImagePolicy', {\n                                fileNameWithExtension: file.name\n                            }).success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                uploadPostImageDirect(fields, file, resp);\n                            })\n                                .error(function (errResponse) {\n                                    $rootScope.main.responseStatusHandler(errResponse);\n                                    $scope.hideProgressBars();\n                                });\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            $scope.showUploading();\n                            $http.post('/api/getPdfPolicy', {\n                                fileNameWithExtension: file.name\n                            }).success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                uploadPdfDirect(fields, file, resp);\n                            })\n                                .error(function (errResponse) {\n                                    $rootScope.main.responseStatusHandler(errResponse);\n                                    $scope.hideProgressBars();\n                                });\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            $scope.showUploading();\n                            $http.post('/api/getZipPolicy', {\n                                fileNameWithExtension: file.name\n                            }).success(function (resp) {\n                                $rootScope.main.responseStatusHandler(resp);\n                                uploadZipDirect(fields, file, resp);\n                            })\n                                .error(function (errResponse) {\n                                    $rootScope.main.responseStatusHandler(errResponse);\n                                    $scope.hideProgressBars();\n                                });\n                        }\n                    }\n                };\n\n                function uploadPostImageDirect(fields, file, details) {\n                    Upload.upload({\n                        url: details.s3BucketUrl,\n                        method: 'POST',\n                        fields: {\n                            key: details.key,\n                            AWSAccessKeyId: 'AKIAJ3ODSBXFCLG7A6UA',\n                            acl: 'public-read',\n                            policy: details.policy,\n                            signature: details.signature,\n                            \"Content-Type\": file.type != '' ? file.type : 'application/octet-stream',\n                            filename: file.name\n                        },\n                        file: file\n                    }).progress(function (evt) {\n                        $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                    })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $rootScope.main.showToast('success', 'File successfully uploaded');\n                            $scope.postModel.postUploads.push({\n                                type: 'image',\n                                data: {\n                                    originalname: file.name,\n                                    amazonS3Url: details.completePath\n                                }\n                            });\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.showToast('warning', 'There was a problem uploading file. Please ensure that the file format is valid, and the file does not exceed the maximum allowed size');\n                            console.log(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n                function uploadPdfDirect(fields, file, details) {\n                    Upload.upload({\n                        url: details.s3BucketUrl,\n                        method: 'POST',\n                        fields: {\n                            key: details.key,\n                            AWSAccessKeyId: 'AKIAJ3ODSBXFCLG7A6UA',\n                            acl: 'public-read',\n                            policy: details.policy,\n                            signature: details.signature,\n                            \"Content-Type\": file.type != '' ? file.type : 'application/octet-stream',\n                            filename: file.name\n                        },\n                        file: file\n                    }).progress(function (evt) {\n                        $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                    })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $rootScope.main.showToast('success', 'File successfully uploaded');\n                            $scope.postModel.postUploads.push({\n                                type: 'pdf',\n                                data: {\n                                    originalname: file.name,\n                                    amazonS3Url: details.completePath\n                                }\n                            });\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.showToast('warning', 'There was a problem uploading file. Please ensure that the file format is valid, and the file does not exceed the maximum allowed size');\n                            console.log(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n                function uploadZipDirect(fields, file, details) {\n                    Upload.upload({\n                        url: details.s3BucketUrl,\n                        method: 'POST',\n                        fields: {\n                            key: details.key,\n                            AWSAccessKeyId: 'AKIAJ3ODSBXFCLG7A6UA',\n                            acl: 'public-read',\n                            policy: details.policy,\n                            signature: details.signature,\n                            \"Content-Type\": file.type != '' ? file.type : 'application/octet-stream',\n                            filename: file.name\n                        },\n                        file: file\n                    }).progress(function (evt) {\n                        $scope.uploading.percent = parseInt(100.0 * evt.loaded / evt.total);\n                    })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $rootScope.main.showToast('success', 'File successfully uploaded');\n                            $scope.postModel.postUploads.push({\n                                type: 'zip',\n                                data: {\n                                    originalname: file.name,\n                                    amazonS3Url: details.completePath\n                                }\n                            });\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.showToast('warning', 'There was a problem uploading file. Please ensure that the file format is valid, and the file does not exceed the maximum allowed size');\n                            console.log(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n                $scope.upload = function (files) {\n                    if (files && files.length) {\n                        var file = files[0];\n                        var fields = {};\n                        $scope.showUploading();\n                        if ($scope.selectedFileType.type === 'image') {\n                            uploadPostImage(fields, file);\n                        } else if ($scope.selectedFileType.type === 'pdf') {\n                            uploadPdf(fields, file);\n                        } else if ($scope.selectedFileType.type === 'zip') {\n                            uploadZip(fields, file);\n                        }\n                    }\n                };\n\n                function uploadPostImage(fields, file) {\n                    uploadPostImageToServer(fields, file)\n                        .progress(function (evt) {\n                            $scope.uploading.percent = parseInt(80.0 * evt.loaded / evt.total);\n                        })\n                        .success(function (data, status, headers, config) {\n                            $rootScope.main.responseStatusHandler(data);\n                            $scope.postModel.postUploads.push({\n                                type: 'image',\n                                data: data.fileData\n                            });\n                            $scope.hideProgressBars();\n                        })\n                        .error(function (errResponse) {\n                            $rootScope.main.responseStatusHandler(errResponse);\n                            $scope.hideProgressBars();\n                        });\n                }\n                function uploadPostImageToServer(fields, file) {\n                    return Upload.upload({\n                        url: globals.getLocationHost() + '/api/uploadPostImage',\n                        fields: fields,\n                        file: file\n                    });\n                }\n            }\n        }\n    }]);"],"sourceRoot":"/source/"}