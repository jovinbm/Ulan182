{"version":3,"sources":["app.js","ionicConfig.js","account/connectToUber.js","account/createAccount.js","account/logout.js","account/signIn.js","home_core/home_core.js","home_core/location_search_box.js","home_core/map.js","home_core/price_estimate.js","home_core/request_uber.js","home_core/ride_status.js","index/index.js","req/response_filter.js","universalCtrl.js"],"names":["trackDigests","app","run","$rootScope","Promise","setScheduler","cb","$evalAsync","angular","module","config","$stateProvider","$urlRouterProvider","$interpolateProvider","startSymbol","endSymbol","otherwise","state","url","views","main","templateUrl","controller","$state","$stateParams","$httpProvider","interceptors","push","$q","request","when","directive","$http","restrict","link","$scope","uberConnect","isBusy","status","getUberAuthorizationUrl","resolve","then","post","resp","data","responseStatusHandler","err","redirectToPage","console","log","classes","body","createAccount","details","registrationDetails","password1","password2","createMain","email","firstName","lastName","username","redirect","logout","userData","localUserLogin","loginData","loginFormModel","password","signInMain","submitLocalLoginForm","factory","$interval","$timeout","getProducts","lat","lng","code","timeout","latitude","longitude","products","obj","e","showToast","TimeoutError","getPriceEstimates","start_lat","start_lng","end_lat","end_lng","start_latitude","start_longitude","end_latitude","end_longitude","priceEstimateArray","prices","getTimeEstimates","timeEstimateArray","times","getUberRideStatus","rStatus","driver","ratingArray","Array","Math","ceil","rating","rideStatus","checkUberRide","changeState","uberRideRequestStatuses","processing","no_drivers_available","accepted","arriving","in_progress","driver_canceled","rider_canceled","completed","$on","getRideStatus","$element","$attr","element","find","val","formatted_address","geocomplete","bind","$apply","resizeMap","css","height","window","margin","padding-left","resize","GMaps","prototype","_getMyPosition","map","_myLocation","reject","geolocate","success","position","coords","error","not_supported","_updateMyPosition","_addMarker","title","this","addMarker","_addInfoWindowMarker","infoWindow","content","_userMarker","_userInfoWindowMarker","_addUserMarker","_addUserInfoWindowMarker","_moveMarker","marker","setPosition","google","maps","LatLng","_updateUserMarker","_updateUserInfoWindowMarker","_removeMarker","setMap","_removeAllPresentMarkers","removeMarkers","_setCenter","setCenter","_setCenterToMe","_drawRoute","originArr","destArr","length","cleanRoute","drawRoute","origin","destination","travelMode","strokeColor","strokeOpacity","strokeWeight","div","$watch","$","refresh","$ionicPopover","$ionicSlideBoxDelegate","priceEstimatorCtrlMain","showEstimates","goToSlide","index","slide","parseInt","nextSlide","next","previousSlide","previous","service_uberPrices","priceEstimator","start_formatted_address","end_formatted_address","arr","updateStartLocation","parseFloat","toFixed","toString","updateEndLocation","startAtMyLocation","userLocation","array","endAtMyLocation","requestUberControllerMain","showStatus","service_uberProducts","service_uberTimeEstimates","service_rideStatus","requestUberMain","product_id","selectedProductPriceEstimate","selectedProduct","changeProductId","newId","product_display_name","forEach","product","localized_display_name","toLowerCase","display_name","estimate","requestUber","updateTimeEstimates","uberRideStatusControllerMain","checkStatus","uberRideStatusMain","lastRide","startLatitude","startLongitude","endLatitude","endLongitude","driver_latitude","driver_longitude","location","driver_info_window_marker","updateUberRequestSandbox","delay","filter","$log","$window","redirectPage","href","redirectState","reload","reloadPage","notify","type","msg","showIonicAlert","dialog","id","banner","bannerClass","signInBanner","registrationBanner","reason","warn","localStorageServiceProvider","setPrefix","setStorageCookieDomain","document","hostname","search","setStorageType","$filter","$location","ngDialog","$anchorScroll","localStorageService","toastr","$ionicPopup","getUserData","user","getCurrentState","current","name","toState","ifInArray","ifNotInArray","currentState","indexOf","go","toastType","text","heading","alert","template","event","toParams","fromState","fromParams","oldVal","uber","access_token"],"mappings":"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","file":"ion.min.js","sourcesContent":["function trackDigests(app) {\n    app.run([\"$rootScope\", function ($rootScope) {\n        Promise.setScheduler(function (cb) {\n            $rootScope.$evalAsync(cb);\n        });\n    }]);\n}\n\n//angular sanitize included in textAngular\nvar app = angular.module('app', [\n    'ngSanitize',\n    'ui.bootstrap',\n    'toastr',\n    'ui.router',\n    'ngDialog',\n    'LocalStorageModule',\n    'angular-loading-bar',\n    'ionic'\n]);\n\napp.config(function ($stateProvider, $urlRouterProvider, $interpolateProvider) {\n    //\n\n    /*symbol to work with express handlebars\n     * */\n    $interpolateProvider.startSymbol('{[{');\n    $interpolateProvider.endSymbol('}]}');\n\n    // For any unmatched url, redirect to /index\n    $urlRouterProvider.otherwise(\"/index\");\n\n    $stateProvider\n        .state('index', {\n            url: \"/index\",\n            views: {\n                'main': {\n                    templateUrl: \"_index.html\"\n                }\n            }\n        })\n        .state('register', {\n            url: \"/register\",\n            views: {\n                'main': {\n                    templateUrl: \"_create_account.html\"\n                }\n            }\n        })\n        .state('login', {\n            url: \"/login\",\n            views: {\n                'main': {\n                    templateUrl: \"_sign_in.html\"\n                }\n            }\n        })\n        .state('home', {\n            url: \"/home\",\n            views: {\n                'main': {\n                    templateUrl: \"_welcome.html\"\n                }\n            }\n        })\n        .state('priceEstimator', {\n            url: \"/estimator\",\n            views: {\n                'main': {\n                    controller: 'priceEstimateController',\n                    templateUrl: \"_price_estimates.html\"\n                }\n            }\n        })\n        .state('requestUber', {\n            url: \"/requestUber\",\n            views: {\n                'main': {\n                    controller: \"requestUberController\",\n                    templateUrl: \"_request_uber.html\"\n                }\n            }\n        })\n        .state('rideStatus', {\n            url: \"/rideStatus\",\n            views: {\n                'main': {\n                    controller: 'uberRideStatusController',\n                    templateUrl: \"_ride_status.html\"\n                }\n            }\n        })\n        .state('connectToUber', {\n            url: \"/connect\",\n            views: {\n                'main': {\n                    templateUrl: \"_connect_to_uber.html\"\n                }\n            }\n        });\n});\n\napp.run(function ($rootScope, $state, $stateParams) {\n    $rootScope.$state = $state;\n    $rootScope.$stateParams = $stateParams;\n});\n\ntrackDigests(app);\n\n/*\n * jquery functions\n * */","app.config(function ($httpProvider) {\n    $httpProvider.interceptors.push(function ($q) {\n        return {\n            'request': function (config) {\n                config.url = 'http://pluschat.net' + config.url;\n                return config || $q.when(config);\n\n            }\n\n        }\n    });\n});","angular.module('app')\n    .directive('uberConnect', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.uberConnect = {\n                    isBusy: false,\n                    status: '',\n\n                    getUberAuthorizationUrl: function () {\n\n                        $scope.uberConnect.isBusy = true;\n                        $scope.uberConnect.status = 'Connecting...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                return $http.post('/api/getUberAuthorizationUrl', {})\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.uberConnect.isBusy = false;\n                                $rootScope.main.redirectToPage(resp.url);\n                                return true;\n                            })\n                            .catch(function (err) {\n                                $scope.uberConnect.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    }\n                }\n            }\n        };\n    }])","angular.module('app')\n    .controller('createAccountController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('createAccountScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.createMain = {\n                    isBusy: false\n                };\n\n                $scope.registrationDetails = {\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    username: \"\",\n                    password1: \"\",\n                    password2: \"\"\n                };\n\n                $scope.createAccount = function (redirect) {\n                    $scope.createMain.isBusy = true;\n                    return createAccount($scope.registrationDetails, redirect)\n                        .then(function () {\n                            $scope.createMain.isBusy = false;\n                        });\n                };\n\n                function createAccount(details) {\n                    return $http.post('/api/createAccount', details)\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            $scope.registrationDetails.password1 = \"\";\n                            $scope.registrationDetails.password2 = \"\";\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('logoutScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.logout = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('api/logoutClient', {}).then(function (resp) {\n                                console.log(resp);\n                                resp = resp.data;\n                                $rootScope.main.responseStatusHandler(resp);\n                                $rootScope.main.userData = null;\n                                return true;\n                            })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    return true;\n                                })\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .controller('signInController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('signInScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.signInMain = {\n                    isBusy: false\n                };\n\n                $scope.loginFormModel = {\n                    username: \"\",\n                    password: \"\"\n                };\n\n                $scope.submitLocalLoginForm = function () {\n                    $scope.signInMain.isBusy = true;\n                    return localUserLogin($scope.loginFormModel)\n                        .then(function () {\n                            $scope.signInMain.isBusy = false;\n                        });\n                };\n\n                function localUserLogin(loginData) {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('/api/localUserLogin', loginData);\n                        })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $scope.loginFormModel.password = \"\";\n                            $rootScope.main.responseStatusHandler(err);\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .controller('homeCoreController', ['$rootScope', '$scope', '$http', function ($rootScope, $scope, $http) {\n        $rootScope.main.classes.body = 'homepage';\n\n    }])\n    .factory(\"service_uberProducts\", ['$interval', '$rootScope', '$http', '$timeout', function ($interval, $rootScope, $http, $timeout) {\n        /*\n         * polls the available products etc\n         * */\n\n        var format = {\n            \"products\": [\n                {\n                    \"capacity\": 4,\n                    \"description\": \"The low-cost Uber\",\n                    \"price_details\": {\n                        \"distance_unit\": \"mile\",\n                        \"cost_per_minute\": 0.26,\n                        \"service_fees\": [\n                            {\n                                \"fee\": 1.0,\n                                \"name\": \"Safe Rides Fee\"\n                            }\n                        ],\n                        \"minimum\": 5.0,\n                        \"cost_per_distance\": 1.3,\n                        \"base\": 2.2,\n                        \"cancellation_fee\": 5.0,\n                        \"currency_code\": \"USD\"\n                    },\n                    \"image\": \"http://d1a3f4spazzrp4.cloudfront.net/car.jpg\",\n                    \"display_name\": \"uberX\",\n                    \"product_id\": \"a1111c8c-c720-46c3-8534-2fcdd730040d\"\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var products = null;\n\n        function getProducts(lat, lng) {\n\n            /*\n             * either returns products or []\n             * */\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (lat && lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getProducts', {\n                        latitude: lat,\n                        longitude: lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    products = resp.obj.products;\n                    return resp.obj.products;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'We could not determine your precise location to list the available products in your area');\n                        products = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    products = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    products = [];\n                    return [];\n                })\n        }\n\n        return {\n            getProducts: getProducts, //isFunction\n            products: function () {\n                return products;\n            }\n        };\n    }])\n    .factory(\"service_uberPrices\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * polls the available products, estimates etc\n         * */\n\n        var format = {\n            \"prices\": [\n                {\n                    \"product_id\": \"08f17084-23fd-4103-aa3e-9b660223934b\",\n                    \"currency_code\": \"USD\",\n                    \"display_name\": \"UberBLACK\",\n                    \"estimate\": \"$23-29\",\n                    \"low_estimate\": 23,\n                    \"high_estimate\": 29,\n                    \"surge_multiplier\": 1,\n                    \"duration\": 640,\n                    \"distance\": 5.34\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var priceEstimateArray = null;\n\n        function getPriceEstimates(start_lat, start_lng, end_lat, end_lng) {\n\n            /*\n             * either returns array or []\n             * */\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (start_lat && start_lng && end_lat && end_lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getPriceEstimate', {\n                        start_latitude: start_lat,\n                        start_longitude: start_lng,\n                        end_latitude: end_lat,\n                        end_longitude: end_lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    priceEstimateArray = resp.obj.prices;\n                    return resp.obj.prices;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        priceEstimateArray = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    priceEstimateArray = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    priceEstimateArray = [];\n                    return [];\n                });\n        }\n\n        return {\n            getPriceEstimates: getPriceEstimates, //isFunction\n            priceEstimateArray: function () {\n                return priceEstimateArray;\n            }\n        };\n    }])\n    .factory(\"service_uberTimeEstimates\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * pickup time estimates for various products etc\n         * */\n\n        var format = {\n            \"times\": [\n                {\n                    \"product_id\": \"5f41547d-805d-4207-a297-51c571cf2a8c\",\n                    \"display_name\": \"UberBLACK\",\n                    \"estimate\": 410\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var timeEstimateArray = null;\n\n        function getTimeEstimates(start_lat, start_lng) {\n\n            /*\n             * either returns array or []\n             * */\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (start_lat && start_lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getTimeEstimate', {\n                        start_latitude: start_lat,\n                        start_longitude: start_lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    timeEstimateArray = resp.obj.times;\n                    return resp.obj.times;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        timeEstimateArray = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    timeEstimateArray = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    timeEstimateArray = [];\n                    return [];\n                });\n        }\n\n        return {\n            getTimeEstimates: getTimeEstimates, //isFunction\n            timeEstimateArray: function () {\n                return timeEstimateArray;\n            }\n        };\n    }])\n    .factory(\"service_rideStatus\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * polls the ride status\n         * */\n\n        var format = {\n            \"status\": \"accepted\",\n            \"driver\": {\n                \"phone_number\": \"(555)555-5555\",\n                \"rating\": 5,\n                \"picture_url\": \"https:\\/\\/d1w2poirtb3as9.cloudfront.net\\/img.jpeg\",\n                \"name\": \"Bob\"\n            },\n            \"eta\": 4,\n            \"location\": {\n                \"latitude\": 37.776033,\n                \"longitude\": -122.418143,\n                \"bearing\": 33\n            },\n            \"vehicle\": {\n                \"make\": \"Bugatti\",\n                \"model\": \"Veyron\",\n                \"license_plate\": \"I<3Uber\",\n                \"picture_url\": \"https:\\/\\/d1w2poirtb3as9.cloudfront.net\\/car.jpeg\"\n            },\n            \"surge_multiplier\": 1.0,\n            \"request_id\": \"b2205127-a334-4df4-b1ba-fc9f28f56c96\",\n            //cojoined details in server\n            \"mapDetails\": {\n                \"request_id\": \"b5512127-a134-4bf4-b1ba-fe9f48f56d9d\",\n                \"href\": \"https://trip.uber.com/abc123\"\n            },\n            \"lastRide\": \"**last ride details from database\"\n        };\n\n        var TimeoutError = Promise.TimeoutError;\n\n        var rideStatus = null;\n\n        var uberRideRequestStatuses = {\n            processing: \"Processing\",\n            no_drivers_available: 'No drivers available',\n            accepted: 'Accepted',\n            arriving: 'Arriving',\n            in_progress: 'In progress',\n            driver_canceled: 'Driver canceled',\n            rider_canceled: 'Rider canceled',\n            completed: 'Completed'\n        };\n\n\n        function getUberRideStatus() {\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            /*\n             * either returns array or null**\n             * */\n\n            return Promise.resolve()\n                .timeout(8000) // timeout in 13 secs\n                .then(function () {\n                    return $http.post('/api/getRideStatus', {})\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    var rStatus = resp.obj;\n                    /*\n                     * put a rating array for the ng-repeat stars\n                     * */\n                    if (!rStatus) {\n                        rideStatus = null;\n                        return true;\n                    }\n\n                    if (rStatus.driver) {\n                        rStatus.driver.ratingArray = new Array(Math.ceil(rStatus.driver.rating));\n                    }\n                    rideStatus = rStatus;\n                    return rideStatus;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        //don't change the ride status\n                        return rideStatus;\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    //don't change the ride status\n                    return rideStatus;\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    return rideStatus;\n                })\n                .then(function () {\n                    checkUberRide();\n                });\n        }\n\n        $interval(function () {\n            getUberRideStatus();\n        }, 10000); //update every 15 secs\n        getUberRideStatus();\n\n        /*\n         * function checks if the user has requested an uber, if so, it forces the user to remain in the requestUber state\n         * */\n        function checkUberRide() {\n            if (rideStatus) {\n                $rootScope.main.changeState('rideStatus', null, ['rideStatus']);\n            }\n        }\n\n        $rootScope.$on('$stateChangeSuccess', function () {\n            if (rideStatus) {\n                $rootScope.main.changeState('rideStatus', null, ['rideStatus']);\n            }\n        });\n\n        return {\n            rideStatus: function () {\n                return rideStatus\n            },\n            getRideStatus: function () {\n                return getUberRideStatus();\n            },\n            uberRideRequestStatuses: uberRideRequestStatuses\n        };\n    }]);","angular.module('app')\n    .directive('locationSearchBox', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.lat = angular.element($element.find('.details input.lat')).val();\n                $scope.lng = angular.element($element.find('.details input.lng')).val();\n                $scope.formatted_address = angular.element($element.find('.details input.formatted_address')).val();\n                /*\n                 * auto complete for the input.geoFields\n                 * */\n                angular.element($element.find('input.geoField')).geocomplete({\n                    details: angular.element($element.find('.details'))\n                })\n                    .bind(\"geocode:result\", function () {\n                        $scope.lat = angular.element($element.find('.details input.lat')).val();\n                        $scope.lng = angular.element($element.find('.details input.lng')).val();\n                        $scope.formatted_address = angular.element($element.find('.details input.formatted_address')).val();\n\n                        $scope.$apply($attr['locationUpdate']);\n                    });\n            }\n        };\n    }]);","angular.module('app')\n    .controller('mapController', ['$rootScope', '$scope', '$http', '$interval', '$timeout',\n        function ($rootScope, $scope, $http, $interval, $timeout) {\n\n            function resizeMap() {\n                angular.element(\"#map\").css({\n                    \"height\": angular.element(window).height(),\n                    \"margin\": 0,\n                    \"padding-left\": 0\n                });\n            }\n\n            angular.element(window).resize(function () {\n                resizeMap();\n            });\n\n            resizeMap();\n\n\n            GMaps.prototype._getMyPosition = function (map) {\n                if (map._myLocation.lat && map._myLocation.lng) {\n                    return {\n                        lat: map._myLocation.lat,\n                        lng: map._myLocation.lng\n                    }\n                } else {\n                    return Promise.resolve()\n                        .then(function () {\n                            return new Promise(function (resolve, reject) {\n                                GMaps.geolocate({\n                                    success: function (position) {\n                                        map._myLocation.lat = position.coords.latitude;\n                                        map._myLocation.lng = position.coords.longitude;\n                                        resolve({\n                                            lat: map._myLocation.lat,\n                                            lng: map._myLocation.lng\n                                        });\n                                    },\n                                    error: function (error) {\n                                        $rootScope.main.showToast('warning', 'Geolocation failed');\n                                        console.log(error);\n                                        resolve(null)\n                                    },\n                                    not_supported: function () {\n                                        $rootScope.main.showToast('warning', 'Your browser does not support geolocation');\n                                        resolve(null)\n                                    }\n                                });\n                            })\n                        })\n                }\n            };\n\n\n            GMaps.prototype._updateMyPosition = function (map) {\n                /*\n                 * if userLocation is found, the universalController object is updated with the user location\n                 * */\n                return new Promise(function (resolve, reject) {\n                    GMaps.geolocate({\n                        success: function (position) {\n                            map._myLocation.lat = position.coords.latitude;\n                            map._myLocation.lng = position.coords.longitude;\n                            resolve(true);\n                        },\n                        error: function (error) {\n                            console.log(error);\n                            $rootScope.main.showToast('warning', 'We could not update your location...');\n                            resolve(true);\n                        }\n                    });\n                })\n            };\n\n            GMaps.prototype._myLocation = {\n                lat: null,\n                lng: null\n            };\n\n            GMaps.prototype._addMarker = function (lat, lng, title) {\n                return this.addMarker({\n                    lat: lat,\n                    lng: lng,\n                    title: title || ''\n                });\n            };\n\n            GMaps.prototype._addInfoWindowMarker = function (lat, lng, title) {\n                return this.addMarker({\n                    lat: lat,\n                    lng: lng,\n                    infoWindow: {\n                        content: '<p>' + title + '</p>'\n                    }\n                });\n            };\n\n            GMaps.prototype._userMarker = null;\n            GMaps.prototype._userInfoWindowMarker = null;\n\n            GMaps.prototype._addUserMarker = function () {\n                this._userMarker = this.addMarker({\n                    lat: $rootScope.map._myLocation.lat,\n                    lng: $rootScope.map._myLocation.lat,\n                    title: ''\n                });\n\n                return this._userMarker\n            };\n\n            GMaps.prototype._addUserInfoWindowMarker = function (title) {\n                this._userInfoWindowMarker = this.addMarker({\n                    lat: $rootScope.map._myLocation.lat,\n                    lng: $rootScope.map._myLocation.lat,\n                    infoWindow: {\n                        content: '<p>' + title + '</p>'\n                    }\n                });\n\n                return this._userInfoWindowMarker\n            };\n\n            GMaps.prototype._moveMarker = function (marker, lat, lng) {\n                marker.setPosition(new google.maps.LatLng(lat, lng));\n            };\n\n            GMaps.prototype._updateUserMarker = function () {\n                if (!this._userMarker) {\n                    this._addUserMarker()\n                } else {\n                    this._moveMarker(this._userMarker, this._myLocation.lat, this._myLocation.lng);\n                }\n            };\n\n            GMaps.prototype._updateUserInfoWindowMarker = function (title) {\n                if (!this._userInfoWindowMarker) {\n                    this._addUserInfoWindowMarker(title)\n                } else {\n                    this._moveMarker(this._userInfoWindowMarker, this._myLocation.lat, this._myLocation.lng);\n                }\n            };\n\n            GMaps.prototype._removeMarker = function (marker) {\n                marker.setMap(null);\n            };\n\n            GMaps.prototype._removeAllPresentMarkers = function () {\n                this.removeMarkers();\n            };\n\n            GMaps.prototype._setCenter = function (lat, lng) {\n                this.setCenter(lat, lng);\n            };\n\n            GMaps.prototype._setCenterToMe = function () {\n                if (this._myLocation.lat && this._myLocation.lng) {\n                    this.setCenter(this._myLocation.lat, this._myLocation.lng);\n                }\n            };\n\n            GMaps.prototype._drawRoute = function (originArr, destArr) {\n                if (!originArr || !destArr) return;\n                if (originArr.length < 2 || destArr.length < 2) return;\n                this.cleanRoute();\n                this.removeMarkers();\n\n                this.addMarker({lat: originArr[0], lng: originArr[1]});\n                this.addMarker({lat: destArr[0], lng: destArr[1]});\n\n                this.drawRoute({\n                    origin: originArr,\n                    destination: destArr,\n                    travelMode: 'driving',\n                    strokeColor: '#09091A',\n                    strokeOpacity: 0.6,\n                    strokeWeight: 6\n                });\n            };\n\n            $rootScope.map = new GMaps({\n                div: '#map',\n                lat: -12.043333,\n                lng: -77.028333\n            });\n\n            /*\n             * prepare functions that will update stuff, wait for 3 secs\n             * */\n            $timeout(function () {\n\n                resizeMap();\n\n                $rootScope.map._updateMyPosition($rootScope.map)\n                    .then(function () {\n                        $rootScope.map._setCenter($rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n                        $rootScope.map._addUserMarker($rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n                    });\n\n                $scope.$watch(function () {\n                    return $rootScope.map._myLocation.lat;\n                }, function () {\n                    if ($rootScope.map._userMarker) {\n                        $rootScope.map._moveMarker($rootScope.map._userMarker, $rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n                    }\n                });\n\n                $interval(function () {\n                    if ($rootScope.map._updateMyPosition) {\n                        $rootScope.map._updateMyPosition($rootScope.map);\n                    }\n                }, 10000); //update every 10 secs\n\n\n                /*\n                 * refresh on resize and state change\n                 * */\n                //resize event\n                $(window).resize(function () {\n                    $rootScope.map.refresh();\n                });\n\n            }, 3000);\n\n        }]);","angular.module('app')\n    .controller('priceEstimateController', ['$rootScope', '$scope', '$http', '$ionicPopover', '$ionicSlideBoxDelegate', function ($rootScope, $scope, $http, $ionicPopover, $ionicSlideBoxDelegate) {\n\n        $rootScope.main.classes.body = 'priceEstimate';\n\n        /*\n         * prepare the results popover\n         * */\n        $scope.priceEstimatorCtrlMain = {\n            /*\n             * priceEstimateArray contains the data obtained from price estimates\n             * including the types of cars available\n             * distance etc,\n             *\n             * updated when start/end location is chosen\n             * */\n            priceEstimateArray: [],\n            showEstimates: false\n        };\n\n        /*\n         * managing the slides\n         * */\n\n        $scope.goToSlide = function (index) {\n            $ionicSlideBoxDelegate.slide(parseInt(index));\n        };\n        $scope.nextSlide = function (index) {\n            $ionicSlideBoxDelegate.next();\n        };\n        $scope.previousSlide = function (index) {\n            $ionicSlideBoxDelegate.previous();\n        };\n    }])\n    .directive('priceEstimator', ['$rootScope', '$http', 'service_uberPrices', function ($rootScope, $http, service_uberPrices) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.priceEstimator = {\n                    isBusy: false,\n                    status: '',\n\n                    start_latitude: '',\n                    start_longitude: '',\n                    start_formatted_address: '',\n                    end_latitude: '',\n                    end_longitude: '',\n                    end_formatted_address: '',\n\n                    getPriceEstimates: function () {\n\n                        /*\n                         * these estimates should be for the whole journey\n                         * */\n                        if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.start_longitude && $scope.priceEstimator.end_latitude && $scope.priceEstimator.end_longitude) {\n\n                            $scope.priceEstimator.isBusy = true;\n                            $scope.priceEstimator.status = 'Calculating...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    return service_uberPrices.getPriceEstimates($scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude, $scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude)\n                                })\n                                .then(function (arr) {\n                                    $scope.priceEstimatorCtrlMain.priceEstimateArray = arr;\n                                    $scope.priceEstimator.isBusy = false;\n                                    /*\n                                     * show the estimates\n                                     * */\n                                    $scope.priceEstimatorCtrlMain.showEstimates = true;\n                                    $scope.goToSlide(0);\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.priceEstimator.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                });\n\n                        }\n                    }\n                };\n\n                $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.start_latitude = lat;\n                        $scope.priceEstimator.start_longitude = lng;\n                        $scope.priceEstimator.start_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $rootScope.map._setCenter(lat, lng);\n                        $scope.drawRoute();\n                    }\n                };\n\n                $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.end_latitude = lat;\n                        $scope.priceEstimator.end_longitude = lng;\n                        $scope.priceEstimator.end_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $scope.drawRoute();\n                    }\n                };\n\n                $scope.drawRoute = function () {\n                    if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.end_latitude) {\n                        $rootScope.map._setCenter($scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude);\n                        $rootScope.map._drawRoute([$scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude], [$scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude])\n                    }\n                };\n\n                $scope.startAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.start_latitude = array[0];\n                                $scope.priceEstimator.start_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n\n                $scope.endAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.end_latitude = array[0];\n                                $scope.priceEstimator.end_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n            }\n        };\n    }]);","angular.module('app')\n    .controller('requestUberController', ['$rootScope', '$scope', '$http','$ionicSlideBoxDelegate', function ($rootScope, $scope, $http, $ionicSlideBoxDelegate) {\n\n        $rootScope.main.classes.body = 'requestUber';\n\n        $scope.requestUberControllerMain = {\n\n            /*\n             * priceEstimateArray contains the data obtained from price estimates\n             * including the types of cars available\n             * distance etc\n             * */\n            priceEstimateArray: [],\n\n            /*\n             * timeEstimateArray contains the data obtained from time estimates\n             * */\n            timeEstimateArray: [],\n\n            /*\n             * all uber products available in area, update when start location is selected\n             * */\n            products: [],\n\n            showStatus: false\n        };\n\n        /*\n         * managing the slides\n         * */\n\n        $scope.goToSlide = function (index) {\n            $ionicSlideBoxDelegate.slide(parseInt(index));\n        };\n        $scope.nextSlide = function (index) {\n            $ionicSlideBoxDelegate.next();\n        };\n        $scope.previousSlide = function (index) {\n            $ionicSlideBoxDelegate.previous();\n        };\n\n    }])\n    .directive('requestUberDirective',\n    ['$rootScope', '$http', '$interval', 'service_uberProducts', 'service_uberPrices', 'service_uberTimeEstimates', 'service_rideStatus',\n        function ($rootScope, $http, $interval, service_uberProducts, service_uberPrices, service_uberTimeEstimates, service_rideStatus) {\n            return {\n                restrict: 'AE',\n                link: function ($scope, $element, $attr) {\n\n                    $scope.requestUberMain = {\n                        isBusy: false,\n                        status: '',\n\n                        start_latitude: '',\n                        start_longitude: '',\n                        start_formatted_address: '',\n                        end_latitude: '',\n                        end_longitude: '',\n                        end_formatted_address: '',\n                        products: [],\n\n                        product_id: '',\n                        selectedProductPriceEstimate: {}, //holds the selected products price estimates and so forth\n                        selectedProduct: {}, // holds the selected product\n\n                        changeProductId: function (newId, product_display_name) {\n                            if (newId) {\n\n                                $scope.requestUberMain.product_id = newId;\n\n                                //get the selected product\n                                $scope.requestUberControllerMain.products.forEach(function (product) {\n                                    if (product.product_id == newId) {\n                                        $scope.requestUberMain.selectedProduct = product;\n                                    }\n                                });\n\n\n                                $scope.requestUberControllerMain.priceEstimateArray.forEach(function (product) {\n                                    /*\n                                     * since product_ids are most of the times different, here we are\n                                     * using their names to lower case\n                                     * */\n                                    if (product.localized_display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                        $scope.requestUberMain.selectedProductPriceEstimate = product;\n                                    }\n                                });\n\n                                /*\n                                 * put in the estimates from the timeEstimateArray\n                                 * */\n                                $scope.requestUberControllerMain.timeEstimateArray.forEach(function (product) {\n                                    /*\n                                     * since product_ids are most of the times different, here we are\n                                     * using their names to lower case\n                                     * */\n                                    if (product.display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                        $scope.requestUberMain.selectedProduct.estimate = Math.ceil(product.estimate / 60);\n                                    }\n                                });\n                            }\n                        },\n\n                        requestUber: function () {\n\n                            $scope.requestUberMain.isBusy = true;\n                            $scope.requestUberMain.status = 'Requesting...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude && $scope.requestUberMain.product_id) {\n                                        return true;\n                                    } else {\n                                        throw {\n                                            code: 600\n                                        };\n                                    }\n                                })\n                                .then(function () {\n                                    return $http.post('/api/requestUber', {\n                                        start_latitude: $scope.requestUberMain.start_latitude,\n                                        start_longitude: $scope.requestUberMain.start_longitude,\n                                        end_latitude: $scope.requestUberMain.end_latitude,\n                                        end_longitude: $scope.requestUberMain.end_longitude,\n                                        product_id: $scope.requestUberMain.product_id\n                                    })\n                                        .then(function (resp) {\n                                            resp = resp.data;\n                                            $rootScope.main.responseStatusHandler(resp);\n                                            return resp;\n                                        })\n                                        .catch(function (err) {\n                                            err = err.data;\n                                            $rootScope.main.responseStatusHandler(err);\n                                            throw err;\n                                        })\n                                })\n                                .then(function (resp) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    /*\n                                     * check the ride status\n                                     * */\n                                    service_rideStatus.getRideStatus();\n                                    return true;\n                                })\n                                .catch(function (e) {\n                                    if (e.code === 600) {\n                                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                                    } else {\n                                        throw e\n                                    }\n                                    $scope.requestUberMain.isBusy = false;\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                })\n                        },\n\n                        getPriceEstimates: function () {\n\n                            /*\n                             * these estimates should be for the whole journey\n                             * */\n                            if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude) {\n\n                                $scope.requestUberMain.isBusy = true;\n                                $scope.requestUberMain.status = 'Getting cost estimates...';\n\n                                return Promise.resolve()\n                                    .then(function () {\n                                        return service_uberPrices.getPriceEstimates($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude, $scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude)\n                                    })\n                                    .then(function (arr) {\n                                        $scope.requestUberControllerMain.priceEstimateArray = arr;\n                                        $scope.requestUberMain.isBusy = false;\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        $scope.requestUberMain.isBusy = false;\n                                        console.log(err);\n                                        return true;\n                                    });\n\n                            }\n                        },\n\n                        updateTimeEstimates: function () {\n                            if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude) {\n                                console.log('Updating all eta');\n                                Promise.resolve()\n                                    .then(function () {\n                                        return service_uberTimeEstimates.getTimeEstimates($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude)\n                                            .then(function (arr) {\n                                                $scope.requestUberControllerMain.timeEstimateArray = arr;\n                                                return true;\n                                            })\n                                    })\n                            }\n                        }\n                    };\n\n                    /*\n                     * update the pickup times every 60 mins - uber api\n                     * */\n                    $interval(function () {\n                        $scope.requestUberMain.updateTimeEstimates();\n                    }, 60000);\n                    $scope.requestUberMain.updateTimeEstimates();\n\n                    $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                        lat = parseFloat(lat).toFixed(10);\n                        lng = parseFloat(lng).toFixed(10);\n\n                        if (formatted_address) {\n                            formatted_address = formatted_address.toString();\n                        }\n\n                        if (lat && lng) {\n                            $scope.requestUberMain.start_latitude = lat;\n                            $scope.requestUberMain.start_longitude = lng;\n                            $scope.requestUberMain.start_formatted_address = formatted_address;\n\n                            $rootScope.map._addMarker(lat, lng, formatted_address);\n                            $rootScope.map._setCenter(lat, lng);\n                            $scope.drawRoute();\n\n                            /*\n                             * update the products to the new location\n                             * PRODUCTS ARE ONLY UPDATED FOR THE PICKUP LOCATION\n                             * */\n                            Promise.resolve()\n                                .then(function () {\n                                    return service_uberProducts.getProducts(lat, lng)\n                                        .then(function (products) {\n                                            $scope.requestUberControllerMain.products = products;\n                                            return true;\n                                        })\n                                });\n\n                            /*\n                             * update the prices\n                             * */\n                            $scope.requestUberMain.getPriceEstimates();\n\n                            /*\n                             * update the etas for the start location only\n                             * */\n                            $scope.requestUberMain.updateTimeEstimates();\n                        }\n                    };\n\n                    $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                        lat = parseFloat(lat).toFixed(10);\n                        lng = parseFloat(lng).toFixed(10);\n\n                        if (formatted_address) {\n                            formatted_address = formatted_address.toString();\n                        }\n\n                        if (lat && lng) {\n                            $scope.requestUberMain.end_latitude = lat;\n                            $scope.requestUberMain.end_longitude = lng;\n                            $scope.requestUberMain.end_formatted_address = formatted_address;\n\n                            $rootScope.map._addMarker(lat, lng, formatted_address);\n                            $scope.drawRoute();\n\n                            /*\n                             * update the prices\n                             * */\n                            $scope.requestUberMain.getPriceEstimates();\n                        }\n                    };\n\n                    $scope.drawRoute = function () {\n                        if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.end_latitude) {\n                            $rootScope.map._setCenter($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude);\n                            $rootScope.map._drawRoute([$scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude], [$scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude])\n                        }\n                    };\n\n                    $scope.startAtMyLocation = function () {\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                    return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                } else {\n                                    return $rootScope.map._getMyPosition($rootScope.map)\n                                        .then(function () {\n                                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                            } else {\n                                                $rootScope.main.showToast('warning', 'Could not find your position');\n                                                return null;\n                                            }\n                                        })\n                                }\n                            })\n                            .then(function (array) {\n                                if (array) {\n                                    $scope.requestUberMain.start_latitude = array[0];\n                                    $scope.requestUberMain.start_longitude = array[1]\n                                } else {\n                                    //do nothing\n                                }\n                                return true;\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                            });\n                    };\n\n                    $scope.endAtMyLocation = function () {\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                    return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                } else {\n                                    return $rootScope.map._getMyPosition($rootScope.map)\n                                        .then(function () {\n                                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                            } else {\n                                                $rootScope.main.showToast('warning', 'Could not find your position');\n                                                return null;\n                                            }\n                                        })\n                                }\n                            })\n                            .then(function (array) {\n                                if (array) {\n                                    $scope.requestUberMain.end_latitude = array[0];\n                                    $scope.requestUberMain.end_longitude = array[1]\n                                } else {\n                                    //do nothing\n                                }\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                            });\n                    };\n                }\n            };\n        }]);","angular.module('app')\n    .controller('uberRideStatusController', ['$rootScope', '$scope', '$http', '$ionicSlideBoxDelegate', function ($rootScope, $scope, $http, $ionicSlideBoxDelegate) {\n\n        $rootScope.main.classes.body = 'rideStatus';\n\n        $scope.uberRideStatusControllerMain = {\n\n            /*\n             * show status by default\n             * */\n            showStatus: true\n        };\n\n        /*\n         * managing the slides\n         * */\n\n        $scope.goToSlide = function (index) {\n            $ionicSlideBoxDelegate.slide(parseInt(index));\n        };\n        $scope.nextSlide = function (index) {\n            $ionicSlideBoxDelegate.next();\n        };\n        $scope.previousSlide = function (index) {\n            $ionicSlideBoxDelegate.previous();\n        };\n\n    }])\n    .directive('uberRideStatusDirective', ['$rootScope', '$http', 'service_rideStatus', '$interval', '$timeout', function ($rootScope, $http, service_rideStatus, $interval, $timeout) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                /*\n                 * clear all markers, then start updating map with new info\n                 * */\n                $rootScope.map._removeAllPresentMarkers();\n\n                /*\n                 * check the uberStatus and keep updating the map with the driver position\n                 * */\n                $scope.uberRideStatusMain = {\n                    rideStatus: null,\n                    driver_latitude: null,\n                    driver_longitude: null,\n                    driver_info_window_marker: null,\n                    start_lat: null,\n                    start_lng: null,\n                    end_lat: null,\n                    end_lng: null,\n\n                    updateUberRequestSandbox: function () {\n                        Promise.resolve()\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'accepted'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(30000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'arriving'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'in_progress'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(45000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'completed'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                return true;\n                            })\n                    }\n                };\n\n                $scope.uberRideStatusMain.updateUberRequestSandbox();\n\n                /*\n                 * watch for the start and end, update on map\n                 * */\n                $timeout(function () {\n                    $scope.$watch(function () {\n                        return $scope.uberRideStatusMain.start_lat;\n                    }, function (val) {\n                        if (val) {\n                            $rootScope.map._addMarker(parseFloat($scope.uberRideStatusMain.start_lat).toFixed(10), parseFloat($scope.uberRideStatusMain.start_lng).toFixed(10));\n                            $rootScope.map._addMarker(parseFloat($scope.uberRideStatusMain.end_lat).toFixed(10), parseFloat($scope.uberRideStatusMain.end_lng).toFixed(10));\n                            /*\n                             * set center to me\n                             * */\n                            $rootScope.map._setCenterToMe();\n                        }\n                    });\n                }, 3000);\n\n                function checkStatus() {\n                    /*\n                     * poll from service\n                     * */\n                    var val = service_rideStatus.rideStatus();\n\n                    if (val) {\n\n                        $scope.uberRideStatusMain.rideStatus = val;\n                        $scope.uberRideStatusMain.start_lat = val.lastRide.startLatitude;\n                        $scope.uberRideStatusMain.start_lng = val.lastRide.startLongitude;\n                        $scope.uberRideStatusMain.end_lat = val.lastRide.endLatitude;\n                        $scope.uberRideStatusMain.end_lng = val.lastRide.endLongitude;\n\n                        /*\n                         * put user's position on map\n                         * */\n                        $rootScope.map._updateUserInfoWindowMarker($rootScope.main.userData.firstName);\n\n                        /*\n                         * set center to driver\n                         * */\n                        if (val.status == 'in_progress') {\n                            $rootScope.map._setCenter($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude);\n                        } else {\n                            $rootScope.map._setCenterToMe();\n                        }\n\n\n                        /*\n                         * start updating the ride status\n                         * */\n\n                        if (val.location) {\n                            $scope.uberRideStatusMain.driver_latitude = parseFloat(val.location.latitude).toFixed(10);\n                            $scope.uberRideStatusMain.driver_longitude = parseFloat(val.location.longitude).toFixed(10);\n\n\n                            /*\n                             * update the cars location\n                             * */\n                            if (!$scope.uberRideStatusMain.driver_info_window_marker) {\n                                $scope.uberRideStatusMain.driver_info_window_marker = $rootScope.map._addInfoWindowMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude, 'Driver');\n                            } else {\n                                $rootScope.map._removeMarker($scope.uberRideStatusMain.driver_info_window_marker);\n                                $scope.uberRideStatusMain.driver_info_window_marker = $rootScope.map._addInfoWindowMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude, 'Driver');\n                            }\n                        }\n                    } else {\n                        /*\n                         * if there is nothing after, then trip is finished\n                         * */\n                        $scope.uberRideStatusMain.rideStatus = null;\n                        if ($rootScope.main && $rootScope.main.userData) {\n                            $rootScope.map._updateUserInfoWindowMarker($rootScope.main.userData.firstName);\n                        }\n                        $rootScope.map._setCenterToMe();\n                    }\n                }\n\n                $timeout(function () {\n                    $interval(function () {\n                        checkStatus();\n                    }, 5000); //update every 5 secs\n                    checkStatus();\n                }, 3000);\n\n            }\n        };\n    }]);","angular.module('app')\n    .controller('indexController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'index';\n    }])\n    .directive('indexnScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n            }\n        };\n    }]);","angular.module('app')\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        return function (resp) {\n\n            if (resp !== null && typeof resp === 'object') {\n                if (resp.redirect) {\n                    if (resp.redirectPage) {\n                        $window.location.href = resp.redirectPage;\n                    }\n\n                    if (resp.redirectState) {\n                        $rootScope.main.changeState(resp.redirectState)\n                    }\n\n                    return;\n                }\n                if (resp.reload) {\n                    $rootScope.main.reloadPage();\n                    return;\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.dialog) {\n                    if (resp.id) {\n                        switch (resp.id) {\n                            case \"not-authorized\":\n                                $rootScope.main.showIonicAlert('Info', 'You are not authorized to be/access this page or resource.');\n                                break;\n                            case \"sign-in\":\n                                $rootScope.main.showIonicAlert('Info', 'Please sign in to continue.')\n                                    .then(function () {\n                                        $rootScope.main.changeState('login')\n                                    });\n                                break;\n                            default:\n                            //do nothing\n                        }\n                        return;\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.signInBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n        };\n    }]);","angular.module('app')\n    .config(function (localStorageServiceProvider) {\n        localStorageServiceProvider\n            .setPrefix('app')\n            .setStorageCookieDomain(document.location.hostname.search(\"uber\") !== -1 ? 'uber.org' : '')\n            .setStorageType('localStorage');\n    });\n\nangular.module('app')\n    .controller('UniversalController',\n    ['$filter', '$window', '$location', '$scope', '$rootScope', 'ngDialog', '$anchorScroll', 'localStorageService', '$http', '$state', 'toastr', '$interval', 'service_rideStatus', '$ionicPopup', '$ionicPopover', '$timeout',\n        function ($filter, $window, $location, $scope, $rootScope, ngDialog, $anchorScroll, localStorageService, $http, $state, toastr, $interval, service_rideStatus, $ionicPopup, $ionicPopover, $timeout) {\n\n            $rootScope.main = {\n\n                uberRideRequestStatuses: service_rideStatus.uberRideRequestStatuses,\n\n                classes: {\n                    body: 'index'\n                },\n\n                userData: null,\n\n                getUserData: function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post(\"/api/getUserData\", {})\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp.userData;\n                                })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    throw err;\n                                })\n                        })\n                        .then(function (user) {\n                            if (user) {\n                                $rootScope.main.userData = user;\n                            } else {\n                                $rootScope.main.userData = null;\n                            }\n                            return true;\n                        })\n                        .then(function () {\n                            if (!$rootScope.main.userData) {\n                                $rootScope.main.changeState('index', null, ['index', 'register', 'login']);\n                            } else {\n                                $rootScope.main.changeState('home', ['index', 'register', 'login'], null);\n                            }\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                },\n\n                getCurrentState: function () {\n                    return $state.current.name;\n                },\n\n                changeState: function (toState, ifInArray, ifNotInArray) {\n                    var currentState = $rootScope.main.getCurrentState();\n                    if (ifInArray) {\n                        if (ifInArray.indexOf(currentState) > -1) {\n                            $state.go(toState);\n                        }\n                    } else if (ifNotInArray) {\n                        if (ifNotInArray.indexOf(currentState) == -1) {\n                            $state.go(toState);\n                        }\n                    } else if (toState) {\n                        $state.go(toState);\n                    } else {\n                        //do nothing\n                        return true;\n                    }\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                showToast: function (toastType, text) {\n                    return $rootScope.main.showIonicAlert('Info', text);\n                },\n\n                showIonicAlert: function (heading, content) {\n                    return $ionicPopup.alert({\n                        title: heading,\n                        template: content\n                    });\n                }\n\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.getUserData();\n            });\n\n            /*\n             * important, check if user is not connected to uber\n             * */\n            $scope.$watch(function () {\n                return $rootScope.main.userData\n            }, function (userData, oldVal) {\n                if (userData) {\n                    if (userData.uber.access_token == '') {\n                        $rootScope.main.changeState('connectToUber');\n                    }\n                }\n            });\n        }\n    ]);"],"sourceRoot":"/source/"}