{"version":3,"sources":["app.js","universalCtrl.js","account/connectToUber.js","account/createAccount.js","account/logout.js","account/signIn.js","banners/bannerDir.js","banners/universalBanner.js","home_core/home_core.js","home_core/location_search_box.js","home_core/map.js","home_core/price_estimate.js","home_core/request_uber.js","home_core/ride_status.js","index/index.js","req/response_filter.js"],"names":["trackDigests","app","run","$rootScope","Promise","setScheduler","cb","$evalAsync","angular","module","config","$stateProvider","$urlRouterProvider","$interpolateProvider","startSymbol","endSymbol","when","otherwise","state","url","templateUrl","views","controllerCol","map","$state","$stateParams","localStorageServiceProvider","setPrefix","setStorageCookieDomain","document","location","hostname","search","setStorageType","controller","$filter","$window","$location","$scope","ngDialog","$anchorScroll","localStorageService","$http","toastr","$interval","service_rideStatus","main","uberRideRequestStatuses","classes","body","userData","getUserData","resolve","then","post","resp","data","responseStatusHandler","err","user","changeState","console","log","getCurrentState","current","name","toState","ifInArray","ifNotInArray","currentState","indexOf","go","startIntervalTimer","intervalInMilliseconds","fn","blood_1","blood_2","stopFight","checkLocalStorageSupport","isSupported","checkCookieIsEnabled","cookie","saveToLocalStorage","key","val","object","value","timestamp","Date","getTime","set","getFromLocalStorage","maxAgeSeconds","checkIfExistsOnLocalStorage","get","dateString","now","toString","removeFromLocalStorage","saveKeyToCookie","maxAgeInDays","JSON","stringify","getKeyFromCookie","removeKeyFromCookie","keys","len","length","exists","i","keyArray","all","clearAll","forEach","remove","goToTop","hash","back","showToast","toastType","text","clear","success","warning","closeButton","tapToDismiss","error","timeOut","clearToasts","redirectToIndex","href","redirectToLogin","reloadPage","reload","redirectToHome","redirectToPage","pathWithFirstSlash","redirectToPreviousPage","window","referrer","showExecuting","message","msg","open","className","overlay","showClose","closeByEscape","closeByDocument","cache","trapFocus","preserveFocus","$on","event","toParams","fromState","fromParams","directive","restrict","link","uberConnect","isBusy","status","getUberAuthorizationUrl","createAccount","details","registrationDetails","password1","password2","createMain","email","firstName","lastName","username","redirect","logout","localUserLogin","loginData","loginFormModel","password","signInMain","submitLocalLoginForm","signInBanner","show","bannerClass","banner","registrationBanner","universalBanner","$","matchHeight","byRow","property","target","$watch","oldVal","uber","access_token","factory","getProducts","lat","lng","code","timeout","latitude","longitude","products","obj","e","TimeoutError","getPriceEstimates","start_lat","start_lng","end_lat","end_lng","start_latitude","start_longitude","end_latitude","end_longitude","priceEstimateArray","prices","getTimeEstimates","timeEstimateArray","times","getUberRideStatus","rStatus","driver","ratingArray","Array","Math","ceil","rating","rideStatus","checkUberRide","processing","no_drivers_available","accepted","arriving","in_progress","driver_canceled","rider_canceled","completed","getRideStatus","$element","$attr","element","find","formatted_address","geocomplete","bind","$apply","resizeMap","css","height","margin","padding-left","resize","GMaps","prototype","_getMyPosition","_myLocation","reject","geolocate","position","coords","not_supported","_updateMyPosition","_addMarker","title","this","addMarker","_addInfoWindowMarker","infoWindow","content","_userMarker","_userInfoWindowMarker","_addUserMarker","_addUserInfoWindowMarker","_moveMarker","marker","setPosition","google","maps","LatLng","_updateUserMarker","_updateUserInfoWindowMarker","_removeMarker","setMap","_removeAllPresentMarkers","removeMarkers","_setCenter","setCenter","_setCenterToMe","_drawRoute","originArr","destArr","cleanRoute","drawRoute","origin","destination","travelMode","strokeColor","strokeOpacity","strokeWeight","div","service_uberPrices","priceEstimator","start_formatted_address","end_formatted_address","arr","updateStartLocation","parseFloat","toFixed","updateEndLocation","startAtMyLocation","userLocation","array","endAtMyLocation","requestUberControllerMain","service_uberProducts","service_uberTimeEstimates","requestUberMain","product_id","selectedProductPriceEstimate","selectedProduct","changeProductId","newId","product_display_name","product","localized_display_name","toLowerCase","display_name","estimate","requestUber","updateTimeEstimates","checkStatus","uberRideStatusMain","lastRide","startLatitude","startLongitude","endLatitude","endLongitude","driver_latitude","driver_longitude","driver_info_window_marker","updateUberRequestSandbox","delay","filter","$q","$log","makeBanner","not_authorized_dialog","template","sign_in_dialog","openConfirm","redirectPage","redirectState","notify","type","dialog","id","$broadcast","reason","warn"],"mappings":"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","file":"app.min.js","sourcesContent":["function trackDigests(app) {\n    app.run([\"$rootScope\", function ($rootScope) {\n        Promise.setScheduler(function (cb) {\n            $rootScope.$evalAsync(cb);\n        });\n    }]);\n}\n\n//angular sanitize included in textAngular\nvar app = angular.module('app', [\n    'ngSanitize',\n    'ui.bootstrap',\n    'toastr',\n    'ui.router',\n    'ngDialog',\n    'LocalStorageModule',\n    'angular-loading-bar',\n    'ngAnimate'\n]);\n\napp.config(function ($stateProvider, $urlRouterProvider, $interpolateProvider) {\n    //\n\n    /*symbol to work with express handlebars\n     * */\n    $interpolateProvider.startSymbol('{[{');\n    $interpolateProvider.endSymbol('}]}');\n\n    // For any unmatched url, redirect to /index\n    $urlRouterProvider.when('/home', '/home/welcome');\n    $urlRouterProvider.otherwise(\"/index\");\n\n    $stateProvider\n        .state('index', {\n            url: \"/index\",\n            templateUrl: \"_index.html\"\n        })\n        .state('register', {\n            url: \"/register\",\n            templateUrl: \"_create_account.html\"\n        })\n        .state('login', {\n            url: \"/login\",\n            templateUrl: \"_sign_in.html\"\n        })\n        .state('home', {\n            url: \"/home\",\n            templateUrl: \"_homepage.html\"\n        })\n        .state('home.welcome', {\n            url: \"/welcome\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_welcome.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        })\n        .state('home.requestUber', {\n            url: \"/requestUber\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_request_uber.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        })\n        .state('home.rideStatus', {\n            url: \"/rideStatus\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_ride_status.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        })\n        .state('home.priceEstimator', {\n            url: \"/estimator\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_price_estimates.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        })\n        .state('home.connectToUber', {\n            url: \"/connect\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_connect_to_uber.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        });\n});\n\napp.run(function ($rootScope, $state, $stateParams) {\n    $rootScope.$state = $state;\n    $rootScope.$stateParams = $stateParams;\n});\n\ntrackDigests(app);\n\n/*\n * jquery functions\n * */","angular.module('app')\n    .config(function (localStorageServiceProvider) {\n        localStorageServiceProvider\n            .setPrefix('app')\n            .setStorageCookieDomain(document.location.hostname.search(\"uber\") !== -1 ? 'uber.org' : '')\n            .setStorageType('localStorage');\n    });\n\nangular.module('app')\n    .controller('UniversalController',\n    ['$filter', '$window', '$location', '$scope', '$rootScope', 'ngDialog', '$anchorScroll', 'localStorageService', '$http', '$state', 'toastr', '$interval', 'service_rideStatus',\n        function ($filter, $window, $location, $scope, $rootScope, ngDialog, $anchorScroll, localStorageService, $http, $state, toastr, $interval, service_rideStatus) {\n\n            $rootScope.main = {\n\n                uberRideRequestStatuses: service_rideStatus.uberRideRequestStatuses,\n\n                classes: {\n                    body: 'index'\n                },\n\n                userData: null,\n\n                getUserData: function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post(\"/api/getUserData\", {})\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp.userData;\n                                })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    throw err;\n                                })\n                        })\n                        .then(function (user) {\n                            if (user) {\n                                $rootScope.main.userData = user;\n                            } else {\n                                $rootScope.main.userData = null;\n                            }\n                            return true;\n                        })\n                        .then(function () {\n                            if (!$rootScope.main.userData) {\n                                $rootScope.main.changeState('index', null, ['index', 'register', 'login']);\n                            } else {\n                                $rootScope.main.changeState('home', ['index', 'register', 'login'], null);\n                            }\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                },\n\n                getCurrentState: function () {\n                    return $state.current.name;\n                },\n\n                changeState: function (toState, ifInArray, ifNotInArray) {\n                    var currentState = $rootScope.main.getCurrentState();\n                    if (ifInArray) {\n                        if (ifInArray.indexOf(currentState) > -1) {\n                            $state.go(toState);\n                        }\n                    } else if (ifNotInArray) {\n                        if (ifNotInArray.indexOf(currentState) == -1) {\n                            $state.go(toState);\n                        }\n                    } else if (toState) {\n                        $state.go(toState);\n                    } else {\n                        //do nothing\n                        return true;\n                    }\n                },\n\n                startIntervalTimer: function (intervalInMilliseconds, fn) {\n                    return $interval(function () {\n                        if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {\n                            $scope.blood_1 = $scope.blood_1 - 3;\n                            $scope.blood_2 = $scope.blood_2 - 4;\n                        } else {\n                            $scope.stopFight();\n                        }\n                    }, 100);\n                },\n\n                checkLocalStorageSupport: function () {\n                    if (localStorageService.isSupported) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n\n                checkCookieIsEnabled: function () {\n                    if (localStorageService.cookie.isSupported) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n\n                saveToLocalStorage: function (key, val) {\n                    var object = {\n                        value: val,\n                        timestamp: new Date().getTime()\n                    };\n                    return localStorageService.set(key, object); //returns a boolean\n                },\n\n                getFromLocalStorage: function (key, maxAgeSeconds) {\n                    if (!maxAgeSeconds) {\n                        maxAgeSeconds = 86400; //default to one day\n                    }\n                    if ($rootScope.main.checkIfExistsOnLocalStorage(key)) {\n                        var object = localStorageService.get(key);\n                        var dateString = object.timestamp;\n                        var now = new Date().getTime().toString();\n                        if (now - dateString > (maxAgeSeconds * 1000)) {\n                            $rootScope.main.removeFromLocalStorage([key]); //remove expired item from local storage\n                            return false;\n                        } else {\n                            return object.value;\n                        }\n                    } else {\n                        return false;\n                    }\n                },\n\n                saveKeyToCookie: function (key, val, maxAgeInDays) {\n                    if (!maxAgeInDays) {\n                        maxAgeInDays = 2; //defaults to 2 day(s)\n                    }\n                    var object = {\n                        value: val,\n                        timestamp: new Date().getTime()\n                    };\n                    object = JSON.stringify(object);\n                    return localStorageService.cookie.set(key, object, maxAgeInDays); //returns a boolean\n                },\n\n                getKeyFromCookie: function (key, maxAgeSeconds) {\n                    if (!maxAgeSeconds) {\n                        maxAgeSeconds = 86400; //default to one day\n                    }\n                    var object = localStorageService.cookie.get(key);\n                    if (object) {\n                        var dateString = object.timestamp;\n                        var now = new Date().getTime().toString();\n                        if ((now - dateString) > (maxAgeSeconds * 1000)) {\n                            $rootScope.main.removeKeyFromCookie(key); //remove expired item from local storage\n                            return false;\n                        } else {\n                            return object.value;\n                        }\n                    } else {\n                        return false;\n                    }\n                },\n\n                checkIfExistsOnLocalStorage: function (key) {\n                    var keys = localStorageService.keys();\n                    var len = keys.length;\n                    var exists = false;\n                    for (var i = 0; i < len; i++) {\n                        if (keys[i] == key) {\n                            exists = true;\n                            break;\n                        }\n                    }\n                    return exists;\n                },\n\n                removeFromLocalStorage: function (keyArray, all) {  //if all is true, it clears all keys\n                    if (all) {\n                        return localStorageService.clearAll();\n                    } else {\n                        keyArray.forEach(function (key) {\n                            localStorageService.remove(key);\n                        });\n                    }\n\n                    return true;\n                },\n\n                removeKeyFromCookie: function (key) {  //if all is true, it clears all keys\n                    return localStorageService.cookie.remove(key);\n                },\n\n                goToTop: function () {\n                    $location.hash('navigation');\n                    $anchorScroll();\n                },\n\n                back: function () {\n                    $rootScope.back();\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                showToast: function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                },\n\n                clearToasts: function () {\n                    toastr.clear();\n                },\n\n                redirectToIndex: function () {\n                    $window.location.href = '/index.app';\n                },\n\n                redirectToLogin: function () {\n                    $window.location.href = '/notLoggedIn';\n                },\n\n                reloadPage: function () {\n                    $window.location.reload();\n                },\n\n                redirectToHome: function () {\n                    $window.location.href = '/';\n                },\n\n                redirectToPage: function (pathWithFirstSlash) {\n                    $window.location.href = pathWithFirstSlash;\n                },\n\n                redirectToPreviousPage: function () {\n                    window.location.href = document.referrer;\n                },\n\n                showExecuting: function (message) {\n                    var msg;\n                    if (!message || typeof message !== 'string' || message.length === 0) {\n                        msg = 'Performing action...';\n                    } else {\n                        msg = message + '...';\n                    }\n\n                    return ngDialog.open({\n                        data: {\n                            message: msg\n                        },\n                        templateUrl: '_executing_dialog',\n                        className: 'ngdialog-theme-default',\n                        overlay: true,\n                        showClose: false,\n                        closeByEscape: false,\n                        closeByDocument: false,\n                        cache: true,\n                        trapFocus: false,\n                        preserveFocus: true\n                    });\n                }\n\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.getUserData();\n            });\n        }\n    ]);","angular.module('app')\n    .directive('uberConnect', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.uberConnect = {\n                    isBusy: false,\n                    status: '',\n\n                    getUberAuthorizationUrl: function () {\n\n                        $scope.uberConnect.isBusy = true;\n                        $scope.uberConnect.status = 'Connecting...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                return $http.post('/api/getUberAuthorizationUrl', {})\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.uberConnect.isBusy = false;\n                                $rootScope.main.redirectToPage(resp.url);\n                                return true;\n                            })\n                            .catch(function (err) {\n                                $scope.uberConnect.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    }\n                }\n            }\n        };\n    }])","angular.module('app')\n    .controller('createAccountController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('createAccountScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.createMain = {\n                    isBusy: false\n                };\n\n                $scope.registrationDetails = {\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    username: \"\",\n                    password1: \"\",\n                    password2: \"\"\n                };\n\n                $scope.createAccount = function (redirect) {\n                    $scope.createMain.isBusy = true;\n                    return createAccount($scope.registrationDetails, redirect)\n                        .then(function () {\n                            $scope.createMain.isBusy = false;\n                        });\n                };\n\n                function createAccount(details) {\n                    return $http.post('/api/createAccount', details)\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            $scope.registrationDetails.password1 = \"\";\n                            $scope.registrationDetails.password2 = \"\";\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('logoutScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.logout = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('api/logoutClient', {}).then(function (resp) {\n                                console.log(resp);\n                                resp = resp.data;\n                                $rootScope.main.responseStatusHandler(resp);\n                                $rootScope.main.userData = null;\n                                return true;\n                            })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    return true;\n                                })\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .controller('signInController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('signInScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.signInMain = {\n                    isBusy: false\n                };\n\n                $scope.loginFormModel = {\n                    username: \"\",\n                    password: \"\"\n                };\n\n                $scope.submitLocalLoginForm = function () {\n                    $scope.signInMain.isBusy = true;\n                    return localUserLogin($scope.loginFormModel)\n                        .then(function () {\n                            $scope.signInMain.isBusy = false;\n                        });\n                };\n\n                function localUserLogin(loginData) {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('/api/localUserLogin', loginData);\n                        })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $scope.loginFormModel.password = \"\";\n                            $rootScope.main.responseStatusHandler(err);\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('signInBannerScope', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.signInBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('signInBanner', function (event, banner) {\n                    $scope.signInBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.signInBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }])\n    .directive('registrationBannerScope', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.registrationBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('registrationBanner', function (event, banner) {\n                    $scope.registrationBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.registrationBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .directive('universalBannerScope', ['$rootScope', 'globals', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .controller('homeCoreController', ['$rootScope', '$scope', '$http', function ($rootScope, $scope, $http) {\n        $rootScope.main.classes.body = 'homepage';\n\n        /*\n         * match the colum heights\n         * */\n\n        $(\"body .leftCol\").matchHeight({\n            byRow: true,\n            property: 'height',\n            target: $(\"body .mapCol\")\n        });\n\n        $scope.$watch(function () {\n            return $rootScope.main.userData\n        }, function (userData, oldVal) {\n            if (userData) {\n                if (userData.uber.access_token == '') {\n                    $rootScope.main.changeState('home.connectToUber');\n                }\n            }\n        });\n\n        /*\n         * update my position\n         * */\n\n        //$rootScope.map._updateMyPosition($rootScope.map)\n        //    .then(function () {\n        //        $rootScope.map._setCenter($rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n        //        $rootScope.map._addUserMarker($rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n        //    });\n\n    }])\n    .factory(\"service_uberProducts\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * polls the available products etc\n         * */\n\n        var format = {\n            \"products\": [\n                {\n                    \"capacity\": 4,\n                    \"description\": \"The low-cost Uber\",\n                    \"price_details\": {\n                        \"distance_unit\": \"mile\",\n                        \"cost_per_minute\": 0.26,\n                        \"service_fees\": [\n                            {\n                                \"fee\": 1.0,\n                                \"name\": \"Safe Rides Fee\"\n                            }\n                        ],\n                        \"minimum\": 5.0,\n                        \"cost_per_distance\": 1.3,\n                        \"base\": 2.2,\n                        \"cancellation_fee\": 5.0,\n                        \"currency_code\": \"USD\"\n                    },\n                    \"image\": \"http://d1a3f4spazzrp4.cloudfront.net/car.jpg\",\n                    \"display_name\": \"uberX\",\n                    \"product_id\": \"a1111c8c-c720-46c3-8534-2fcdd730040d\"\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var products = null;\n\n        function getProducts(lat, lng) {\n\n            /*\n             * either returns products or []\n             * */\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (lat && lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getProducts', {\n                        latitude: lat,\n                        longitude: lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    products = resp.obj.products;\n                    return resp.obj.products;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'We could not determine your precise location to list the available products in your area');\n                        products = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    products = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    products = [];\n                    return [];\n                })\n        }\n\n        return {\n            getProducts: getProducts, //isFunction\n            products: function () {\n                return products;\n            }\n        };\n    }])\n    .factory(\"service_uberPrices\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * polls the available products, estimates etc\n         * */\n\n        var format = {\n            \"prices\": [\n                {\n                    \"product_id\": \"08f17084-23fd-4103-aa3e-9b660223934b\",\n                    \"currency_code\": \"USD\",\n                    \"display_name\": \"UberBLACK\",\n                    \"estimate\": \"$23-29\",\n                    \"low_estimate\": 23,\n                    \"high_estimate\": 29,\n                    \"surge_multiplier\": 1,\n                    \"duration\": 640,\n                    \"distance\": 5.34\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var priceEstimateArray = null;\n\n        function getPriceEstimates(start_lat, start_lng, end_lat, end_lng) {\n\n            /*\n             * either returns array or []\n             * */\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (start_lat && start_lng && end_lat && end_lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getPriceEstimate', {\n                        start_latitude: start_lat,\n                        start_longitude: start_lng,\n                        end_latitude: end_lat,\n                        end_longitude: end_lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    priceEstimateArray = resp.obj.prices;\n                    return resp.obj.prices;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        priceEstimateArray = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    priceEstimateArray = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    priceEstimateArray = [];\n                    return [];\n                });\n        }\n\n        return {\n            getPriceEstimates: getPriceEstimates, //isFunction\n            priceEstimateArray: function () {\n                return priceEstimateArray;\n            }\n        };\n    }])\n    .factory(\"service_uberTimeEstimates\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * pickup time estimates for various products etc\n         * */\n\n        var format = {\n            \"times\": [\n                {\n                    \"product_id\": \"5f41547d-805d-4207-a297-51c571cf2a8c\",\n                    \"display_name\": \"UberBLACK\",\n                    \"estimate\": 410\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var timeEstimateArray = null;\n\n        function getTimeEstimates(start_lat, start_lng) {\n\n            /*\n             * either returns array or []\n             * */\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (start_lat && start_lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getTimeEstimate', {\n                        start_latitude: start_lat,\n                        start_longitude: start_lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    timeEstimateArray = resp.obj.times;\n                    return resp.obj.times;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        timeEstimateArray = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    timeEstimateArray = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    timeEstimateArray = [];\n                    return [];\n                });\n        }\n\n        return {\n            getTimeEstimates: getTimeEstimates, //isFunction\n            timeEstimateArray: function () {\n                return timeEstimateArray;\n            }\n        };\n    }])\n    .factory(\"service_rideStatus\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * polls the ride status\n         * */\n\n        var format = {\n            \"status\": \"accepted\",\n            \"driver\": {\n                \"phone_number\": \"(555)555-5555\",\n                \"rating\": 5,\n                \"picture_url\": \"https:\\/\\/d1w2poirtb3as9.cloudfront.net\\/img.jpeg\",\n                \"name\": \"Bob\"\n            },\n            \"eta\": 4,\n            \"location\": {\n                \"latitude\": 37.776033,\n                \"longitude\": -122.418143,\n                \"bearing\": 33\n            },\n            \"vehicle\": {\n                \"make\": \"Bugatti\",\n                \"model\": \"Veyron\",\n                \"license_plate\": \"I<3Uber\",\n                \"picture_url\": \"https:\\/\\/d1w2poirtb3as9.cloudfront.net\\/car.jpeg\"\n            },\n            \"surge_multiplier\": 1.0,\n            \"request_id\": \"b2205127-a334-4df4-b1ba-fc9f28f56c96\",\n            //cojoined details in server\n            \"mapDetails\": {\n                \"request_id\": \"b5512127-a134-4bf4-b1ba-fe9f48f56d9d\",\n                \"href\": \"https://trip.uber.com/abc123\"\n            },\n            \"lastRide\": \"**last ride details from database\"\n        };\n\n        var TimeoutError = Promise.TimeoutError;\n\n        var rideStatus = null;\n\n        var uberRideRequestStatuses = {\n            processing: \"Processing\",\n            no_drivers_available: 'No drivers available',\n            accepted: 'Accepted',\n            arriving: 'Arriving',\n            in_progress: 'In progress',\n            driver_canceled: 'Driver canceled',\n            rider_canceled: 'Rider canceled',\n            completed: 'Completed'\n        };\n\n\n        function getUberRideStatus() {\n\n            console.log('getting the ride status');\n\n            /*\n             * either returns array or null**\n             * */\n\n            return Promise.resolve()\n                .timeout(8000) // timeout in 13 secs\n                .then(function () {\n                    return $http.post('/api/getRideStatus', {})\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    var rStatus = resp.obj;\n                    /*\n                     * put a rating array for the ng-repeat stars\n                     * */\n                    if (!rStatus) {\n                        rideStatus = null;\n                        return true;\n                    }\n\n                    if (rStatus.driver) {\n                        rStatus.driver.ratingArray = new Array(Math.ceil(rStatus.driver.rating));\n                    }\n                    rideStatus = rStatus;\n                    return rideStatus;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        //don't change the ride status\n                        return rideStatus;\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    //don't change the ride status\n                    return rideStatus;\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    return rideStatus;\n                })\n                .then(function () {\n                    checkUberRide();\n                });\n        }\n\n        $interval(function () {\n            getUberRideStatus();\n        }, 10000); //update every 15 secs\n        getUberRideStatus();\n\n        /*\n         * function checks if the user has requested an uber, if so, it forces the user to remain in the requestUber state\n         * */\n        function checkUberRide() {\n            if (rideStatus) {\n                $rootScope.main.changeState('home.rideStatus', null, ['home.rideStatus']);\n            }\n        }\n\n        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n            if (rideStatus) {\n                $rootScope.main.changeState('home.rideStatus', null, ['home.rideStatus']);\n            }\n        });\n\n        return {\n            rideStatus: function () {\n                return rideStatus\n            },\n            getRideStatus: function () {\n                return getUberRideStatus();\n            },\n            uberRideRequestStatuses: uberRideRequestStatuses\n        };\n    }]);","angular.module('app')\n    .directive('locationSearchBox', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            //scope: {\n            //    update: '&locationUpdate' //location-update in html\n            //},\n            templateUrl: '_location_search_box.html',\n            link: function ($scope, $element, $attr) {\n\n                $scope.lat = angular.element($element.find('.details input.lat')).val();\n                $scope.lng = angular.element($element.find('.details input.lng')).val();\n                $scope.formatted_address = angular.element($element.find('.details input.formatted_address')).val();\n                /*\n                 * auto complete for the input.geoFields\n                 * */\n                angular.element($element.find('input.geoField')).geocomplete({\n                    details: angular.element($element.find('.details'))\n                })\n                    .bind(\"geocode:result\", function () {\n                        $scope.lat = angular.element($element.find('.details input.lat')).val();\n                        $scope.lng = angular.element($element.find('.details input.lng')).val();\n                        $scope.formatted_address = angular.element($element.find('.details input.formatted_address')).val();\n\n                        $scope.$apply($attr['locationUpdate']);\n                    });\n            }\n        };\n    }])","angular.module('app')\n    .controller('mainMapController', ['$rootScope', '$http', '$scope', '$interval', function ($rootScope, $http, $scope, $interval) {\n\n        function resizeMap() {\n            angular.element(\"body.homepage #map\").css({\n                \"height\": angular.element(window).height() - angular.element(\"homepage main-navigation\").height(),\n                \"margin\": 0,\n                \"padding-left\": 0\n            });\n        }\n\n        resizeMap();\n\n        angular.element(window).resize(function () {\n            resizeMap();\n        });\n\n        GMaps.prototype._getMyPosition = function (map) {\n            if (map._myLocation.lat && map._myLocation.lng) {\n                return {\n                    lat: map._myLocation.lat,\n                    lng: map._myLocation.lng\n                }\n            } else {\n                return Promise.resolve()\n                    .then(function () {\n                        return new Promise(function (resolve, reject) {\n                            GMaps.geolocate({\n                                success: function (position) {\n                                    map._myLocation.lat = position.coords.latitude;\n                                    map._myLocation.lng = position.coords.longitude;\n                                    resolve({\n                                        lat: map._myLocation.lat,\n                                        lng: map._myLocation.lng\n                                    });\n                                },\n                                error: function (error) {\n                                    $rootScope.main.showToast('warning', 'Geolocation failed');\n                                    console.log(error);\n                                    resolve(null)\n                                },\n                                not_supported: function () {\n                                    $rootScope.main.showToast('warning', 'Your browser does not support geolocation');\n                                    resolve(null)\n                                }\n                            });\n                        })\n                    })\n            }\n        };\n\n\n        GMaps.prototype._updateMyPosition = function (map) {\n            /*\n             * if userLocation is found, the universalController object is updated with the user location\n             * */\n            return new Promise(function (resolve, reject) {\n                GMaps.geolocate({\n                    success: function (position) {\n                        map._myLocation.lat = position.coords.latitude;\n                        map._myLocation.lng = position.coords.longitude;\n                        resolve(true);\n                    },\n                    error: function (error) {\n                        console.log(error);\n                        $rootScope.main.showToast('warning', 'We could not update your location...');\n                        reject(error);\n                    }\n                });\n            })\n        };\n\n        GMaps.prototype._addMarker = function (lat, lng, title) {\n            return this.addMarker({\n                lat: lat,\n                lng: lng,\n                title: title || ''\n            });\n        };\n\n        GMaps.prototype._addInfoWindowMarker = function (lat, lng, title) {\n            return this.addMarker({\n                lat: lat,\n                lng: lng,\n                infoWindow: {\n                    content: '<p>' + title + '</p>'\n                }\n            });\n        };\n\n        GMaps.prototype._userMarker = null;\n        GMaps.prototype._userInfoWindowMarker = null;\n\n        GMaps.prototype._addUserMarker = function () {\n            this._userMarker = this.addMarker({\n                lat: $rootScope.map._myLocation.lat,\n                lng: $rootScope.map._myLocation.lat,\n                title: ''\n            });\n\n            return this._userMarker\n        };\n\n        GMaps.prototype._addUserInfoWindowMarker = function (title) {\n            this._userInfoWindowMarker = this.addMarker({\n                lat: $rootScope.map._myLocation.lat,\n                lng: $rootScope.map._myLocation.lat,\n                infoWindow: {\n                    content: '<p>' + title + '</p>'\n                }\n            });\n\n            return this._userInfoWindowMarker\n        };\n\n        GMaps.prototype._moveMarker = function (marker, lat, lng) {\n            marker.setPosition(new google.maps.LatLng(lat, lng));\n        };\n\n        GMaps.prototype._updateUserMarker = function () {\n            if (!this._userMarker) {\n                this._addUserMarker()\n            } else {\n                this._moveMarker(this._userMarker, this._myLocation.lat, this._myLocation.lng);\n            }\n        };\n\n        GMaps.prototype._updateUserInfoWindowMarker = function (title) {\n            if (!this._userInfoWindowMarker) {\n                this._addUserInfoWindowMarker(title)\n            } else {\n                this._moveMarker(this._userInfoWindowMarker, this._myLocation.lat, this._myLocation.lng);\n            }\n        };\n\n        GMaps.prototype._removeMarker = function (marker) {\n            marker.setMap(null);\n        };\n\n        GMaps.prototype._removeAllPresentMarkers = function () {\n            this.removeMarkers();\n        };\n\n        GMaps.prototype._setCenter = function (lat, lng) {\n            this.setCenter(lat, lng);\n        };\n\n        GMaps.prototype._setCenterToMe = function () {\n            if (this._myLocation.lat && this._myLocation.lng) {\n                this.setCenter(this._myLocation.lat, this._myLocation.lng);\n            }\n        };\n\n        GMaps.prototype._drawRoute = function (originArr, destArr) {\n            if (!originArr || !destArr) return;\n            if (originArr.length < 2 || destArr.length < 2) return;\n            this.cleanRoute();\n            this.removeMarkers();\n\n            this.addMarker({lat: originArr[0], lng: originArr[1]});\n            this.addMarker({lat: destArr[0], lng: destArr[1]});\n\n            this.drawRoute({\n                origin: originArr,\n                destination: destArr,\n                travelMode: 'driving',\n                strokeColor: '#09091A',\n                strokeOpacity: 0.6,\n                strokeWeight: 6\n            });\n        };\n\n        $rootScope.map = new GMaps({\n            div: '#map',\n            lat: -12.043333,\n            lng: -77.028333\n        });\n\n        $scope.$watch(function () {\n            return $rootScope.map._myLocation.lat;\n        }, function () {\n            if ($rootScope.map._userMarker) {\n                console.log('updating user marker');\n                $rootScope.map._moveMarker($rootScope.map._userMarker, $rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n            }\n        });\n\n        $rootScope.map._myLocation = {\n            lat: null,\n            lng: null\n        };\n        $rootScope.map._updateMyPosition($rootScope.map);\n\n        $interval(function () {\n            if ($rootScope.map._updateMyPosition) {\n                console.log('updating my location');\n                $rootScope.map._updateMyPosition($rootScope.map)\n            }\n        }, 10000); //update every 10 secs\n    }]);","angular.module('app')\n    .controller('priceEstimatorController', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                /*\n                 * priceEstimateArray contains the data obtained from price estimates\n                 * including the types of cars available\n                 * distance etc,\n                 *\n                 * updated when start/end location is chosen\n                 * */\n                $scope.priceEstimateArray = [];\n            }\n        };\n    }])\n    .directive('priceEstimator', ['$rootScope', '$http', 'service_uberPrices', function ($rootScope, $http, service_uberPrices) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.priceEstimator = {\n                    isBusy: false,\n                    status: '',\n\n                    start_latitude: '',\n                    start_longitude: '',\n                    start_formatted_address: '',\n                    end_latitude: '',\n                    end_longitude: '',\n                    end_formatted_address: '',\n\n                    getPriceEstimates: function () {\n\n                        /*\n                         * these estimates should be for the whole journey\n                         * */\n                        if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.start_longitude && $scope.priceEstimator.end_latitude && $scope.priceEstimator.end_longitude) {\n\n                            $scope.priceEstimator.isBusy = true;\n                            $scope.priceEstimator.status = 'Calculating...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    return service_uberPrices.getPriceEstimates($scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude, $scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude)\n                                })\n                                .then(function (arr) {\n                                    $scope.priceEstimateArray = arr;\n                                    $scope.priceEstimator.isBusy = false;\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.priceEstimator.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                });\n\n                        }\n                    }\n                };\n\n                $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.start_latitude = lat;\n                        $scope.priceEstimator.start_longitude = lng;\n                        $scope.priceEstimator.start_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $rootScope.map._setCenter(lat, lng);\n                        $scope.drawRoute();\n\n                        /*\n                         * get the new price estimates\n                         * */\n                        $scope.priceEstimator.getPriceEstimates();\n                    }\n                };\n\n                $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.end_latitude = lat;\n                        $scope.priceEstimator.end_longitude = lng;\n                        $scope.priceEstimator.end_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $scope.drawRoute();\n\n                        /*\n                         * get the new price estimates\n                         * */\n                        $scope.priceEstimator.getPriceEstimates();\n                    }\n                };\n\n                $scope.drawRoute = function () {\n                    if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.end_latitude) {\n                        $rootScope.map._setCenter($scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude);\n                        $rootScope.map._drawRoute([$scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude], [$scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude])\n                    }\n                };\n\n                $scope.startAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.start_latitude = array[0];\n                                $scope.priceEstimator.start_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n\n                $scope.endAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.end_latitude = array[0];\n                                $scope.priceEstimator.end_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n            }\n        };\n    }]);","angular.module('app')\n    .controller('requestUberController', ['$rootScope', '$scope', '$http', function ($rootScope, $scope, $http) {\n\n        $scope.requestUberControllerMain = {\n\n            /*\n             * priceEstimateArray contains the data obtained from price estimates\n             * including the types of cars available\n             * distance etc\n             * */\n            priceEstimateArray: [],\n\n            /*\n             * timeEstimateArray contains the data obtained from time estimates\n             * */\n            timeEstimateArray: [],\n\n            /*\n             * all uber products available in area, update when start location is selected\n             * */\n            products: []\n        };\n\n    }])\n    .directive('requestUberDirective',\n    ['$rootScope', '$http', '$interval', 'service_uberProducts', 'service_uberPrices', 'service_uberTimeEstimates', 'service_rideStatus',\n        function ($rootScope, $http, $interval, service_uberProducts, service_uberPrices, service_uberTimeEstimates, service_rideStatus) {\n            return {\n                restrict: 'AE',\n                link: function ($scope, $element, $attr) {\n\n                    $scope.requestUberMain = {\n                        isBusy: false,\n                        status: '',\n\n                        start_latitude: '',\n                        start_longitude: '',\n                        start_formatted_address: '',\n                        end_latitude: '',\n                        end_longitude: '',\n                        end_formatted_address: '',\n                        products: [],\n\n                        product_id: '',\n                        selectedProductPriceEstimate: {}, //holds the selected products price estimates and so forth\n                        selectedProduct: {}, // holds the selected product\n\n                        changeProductId: function (newId, product_display_name) {\n                            if (newId) {\n\n                                $scope.requestUberMain.product_id = newId;\n\n                                //get the selected product\n                                $scope.requestUberControllerMain.products.forEach(function (product) {\n                                    if (product.product_id == newId) {\n                                        $scope.requestUberMain.selectedProduct = product;\n                                    }\n                                });\n\n\n                                $scope.requestUberControllerMain.priceEstimateArray.forEach(function (product) {\n                                    /*\n                                     * since product_ids are most of the times different, here we are\n                                     * using their names to lower case\n                                     * */\n                                    if (product.localized_display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                        $scope.requestUberMain.selectedProductPriceEstimate = product;\n                                    }\n                                });\n\n                                /*\n                                 * put in the estimates from the timeEstimateArray\n                                 * */\n                                $scope.requestUberControllerMain.timeEstimateArray.forEach(function (product) {\n                                    /*\n                                     * since product_ids are most of the times different, here we are\n                                     * using their names to lower case\n                                     * */\n                                    if (product.display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                        $scope.requestUberMain.selectedProduct.estimate = Math.ceil(product.estimate / 60);\n                                    }\n                                });\n                            }\n                        },\n\n                        requestUber: function () {\n\n                            $scope.requestUberMain.isBusy = true;\n                            $scope.requestUberMain.status = 'Requesting...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude && $scope.requestUberMain.product_id) {\n                                        return true;\n                                    } else {\n                                        throw {\n                                            code: 600\n                                        };\n                                    }\n                                })\n                                .then(function () {\n                                    return $http.post('/api/requestUber', {\n                                        start_latitude: $scope.requestUberMain.start_latitude,\n                                        start_longitude: $scope.requestUberMain.start_longitude,\n                                        end_latitude: $scope.requestUberMain.end_latitude,\n                                        end_longitude: $scope.requestUberMain.end_longitude,\n                                        product_id: $scope.requestUberMain.product_id\n                                    })\n                                        .then(function (resp) {\n                                            resp = resp.data;\n                                            $rootScope.main.responseStatusHandler(resp);\n                                            return resp;\n                                        })\n                                        .catch(function (err) {\n                                            err = err.data;\n                                            $rootScope.main.responseStatusHandler(err);\n                                            throw err;\n                                        })\n                                })\n                                .then(function (resp) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    /*\n                                     * check the ride status\n                                     * */\n                                    service_rideStatus.getRideStatus();\n                                    return true;\n                                })\n                                .catch(function (e) {\n                                    if (e.code === 600) {\n                                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                                    } else {\n                                        throw e\n                                    }\n                                    $scope.requestUberMain.isBusy = false;\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                })\n                        },\n\n                        getPriceEstimates: function () {\n\n                            /*\n                             * these estimates should be for the whole journey\n                             * */\n                            if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude) {\n\n                                $scope.requestUberMain.isBusy = true;\n                                $scope.requestUberMain.status = 'Getting cost estimates...';\n\n                                return Promise.resolve()\n                                    .then(function () {\n                                        return service_uberPrices.getPriceEstimates($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude, $scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude)\n                                    })\n                                    .then(function (arr) {\n                                        $scope.requestUberControllerMain.priceEstimateArray = arr;\n                                        $scope.requestUberMain.isBusy = false;\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        $scope.requestUberMain.isBusy = false;\n                                        console.log(err);\n                                        return true;\n                                    });\n\n                            }\n                        },\n\n                        updateTimeEstimates: function () {\n                            if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude) {\n                                console.log('Updating all eta');\n                                Promise.resolve()\n                                    .then(function () {\n                                        return service_uberTimeEstimates.getTimeEstimates($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude)\n                                            .then(function (arr) {\n                                                $scope.requestUberControllerMain.timeEstimateArray = arr;\n                                                return true;\n                                            })\n                                    })\n                            }\n                        }\n                    };\n\n                    /*\n                     * update the pickup times every 60 mins - uber api\n                     * */\n                    $interval(function () {\n                        $scope.requestUberMain.updateTimeEstimates();\n                    }, 60000);\n                    $scope.requestUberMain.updateTimeEstimates();\n\n                    $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                        lat = parseFloat(lat).toFixed(10);\n                        lng = parseFloat(lng).toFixed(10);\n\n                        if (formatted_address) {\n                            formatted_address = formatted_address.toString();\n                        }\n\n                        if (lat && lng) {\n                            $scope.requestUberMain.start_latitude = lat;\n                            $scope.requestUberMain.start_longitude = lng;\n                            $scope.requestUberMain.start_formatted_address = formatted_address;\n\n                            $rootScope.map._addMarker(lat, lng, formatted_address);\n                            $rootScope.map._setCenter(lat, lng);\n                            $scope.drawRoute();\n\n                            /*\n                             * update the products to the new location\n                             * PRODUCTS ARE ONLY UPDATED FOR THE PICKUP LOCATION\n                             * */\n                            Promise.resolve()\n                                .then(function () {\n                                    return service_uberProducts.getProducts(lat, lng)\n                                        .then(function (products) {\n                                            $scope.requestUberControllerMain.products = products;\n                                            return true;\n                                        })\n                                });\n\n                            /*\n                             * update the prices\n                             * */\n                            $scope.requestUberMain.getPriceEstimates();\n\n                            /*\n                             * update the etas for the start location only\n                             * */\n                            $scope.requestUberMain.updateTimeEstimates();\n                        }\n                    };\n\n                    $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                        lat = parseFloat(lat).toFixed(10);\n                        lng = parseFloat(lng).toFixed(10);\n\n                        if (formatted_address) {\n                            formatted_address = formatted_address.toString();\n                        }\n\n                        if (lat && lng) {\n                            $scope.requestUberMain.end_latitude = lat;\n                            $scope.requestUberMain.end_longitude = lng;\n                            $scope.requestUberMain.end_formatted_address = formatted_address;\n\n                            $rootScope.map._addMarker(lat, lng, formatted_address);\n                            $scope.drawRoute();\n\n                            /*\n                             * update the prices\n                             * */\n                            $scope.requestUberMain.getPriceEstimates();\n                        }\n                    };\n\n                    $scope.drawRoute = function () {\n                        if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.end_latitude) {\n                            $rootScope.map._setCenter($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude);\n                            $rootScope.map._drawRoute([$scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude], [$scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude])\n                        }\n                    };\n\n                    $scope.startAtMyLocation = function () {\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                    return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                } else {\n                                    return $rootScope.map._getMyPosition($rootScope.map)\n                                        .then(function () {\n                                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                            } else {\n                                                $rootScope.main.showToast('warning', 'Could not find your position');\n                                                return null;\n                                            }\n                                        })\n                                }\n                            })\n                            .then(function (array) {\n                                if (array) {\n                                    $scope.requestUberMain.start_latitude = array[0];\n                                    $scope.requestUberMain.start_longitude = array[1]\n                                } else {\n                                    //do nothing\n                                }\n                                return true;\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                            });\n                    };\n\n                    $scope.endAtMyLocation = function () {\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                    return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                } else {\n                                    return $rootScope.map._getMyPosition($rootScope.map)\n                                        .then(function () {\n                                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                            } else {\n                                                $rootScope.main.showToast('warning', 'Could not find your position');\n                                                return null;\n                                            }\n                                        })\n                                }\n                            })\n                            .then(function (array) {\n                                if (array) {\n                                    $scope.requestUberMain.end_latitude = array[0];\n                                    $scope.requestUberMain.end_longitude = array[1]\n                                } else {\n                                    //do nothing\n                                }\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                            });\n                    };\n                }\n            };\n        }]);","angular.module('app')\n    .directive('uberRideStatusDirective', ['$rootScope', '$http', 'service_rideStatus', '$interval', function ($rootScope, $http, service_rideStatus, $interval) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                /*\n                 * clear all markers, then start updating map with new info\n                 * */\n                $rootScope.map._removeAllPresentMarkers();\n\n                /*\n                 * check the uberStatus and keep updating the map with the driver position\n                 * */\n                $scope.uberRideStatusMain = {\n                    rideStatus: null,\n                    driver_latitude: null,\n                    driver_longitude: null,\n                    driver_info_window_marker: null,\n                    start_lat: null,\n                    start_lng: null,\n                    end_lat: null,\n                    end_lng: null,\n\n                    updateUberRequestSandbox: function () {\n                        Promise.resolve()\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'accepted'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(30000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'arriving'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'in_progress'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(45000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'completed'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                return true;\n                            })\n                    }\n                };\n\n                $scope.uberRideStatusMain.updateUberRequestSandbox();\n\n                /*\n                 * watch for the start and end, update on map\n                 * */\n                $scope.$watch(function () {\n                    return $scope.uberRideStatusMain.start_lat;\n                }, function (val) {\n                    if (val) {\n                        $rootScope.map._addMarker(parseFloat($scope.uberRideStatusMain.start_lat).toFixed(10), parseFloat($scope.uberRideStatusMain.start_lng).toFixed(10));\n                        $rootScope.map._addMarker(parseFloat($scope.uberRideStatusMain.end_lat).toFixed(10), parseFloat($scope.uberRideStatusMain.end_lng).toFixed(10));\n                        /*\n                         * set center to me\n                         * */\n                        $rootScope.map._setCenterToMe();\n                    }\n                });\n\n                function checkStatus() {\n                    /*\n                     * poll from service\n                     * */\n                    var val = service_rideStatus.rideStatus();\n\n                    if (val) {\n\n                        $scope.uberRideStatusMain.rideStatus = val;\n                        $scope.uberRideStatusMain.start_lat = val.lastRide.startLatitude;\n                        $scope.uberRideStatusMain.start_lng = val.lastRide.startLongitude;\n                        $scope.uberRideStatusMain.end_lat = val.lastRide.endLatitude;\n                        $scope.uberRideStatusMain.end_lng = val.lastRide.endLongitude;\n\n                        /*\n                         * put user's position on map\n                         * */\n                        $rootScope.map._updateUserInfoWindowMarker($rootScope.main.userData.firstName);\n\n                        /*\n                         * set center to driver\n                         * */\n                        if (val.status == 'in_progress') {\n                            $rootScope.map._setCenter($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude);\n                        } else {\n                            $rootScope.map._setCenterToMe();\n                        }\n\n\n                        /*\n                         * start updating the ride status\n                         * */\n\n                        if (val.location) {\n                            $scope.uberRideStatusMain.driver_latitude = parseFloat(val.location.latitude).toFixed(10);\n                            $scope.uberRideStatusMain.driver_longitude = parseFloat(val.location.longitude).toFixed(10);\n\n\n                            /*\n                             * update the cars location\n                             * */\n                            if (!$scope.uberRideStatusMain.driver_info_window_marker) {\n                                $scope.uberRideStatusMain.driver_info_window_marker = $rootScope.map._addInfoWindowMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude, 'Driver');\n                            } else {\n                                $rootScope.map._removeMarker($scope.uberRideStatusMain.driver_info_window_marker);\n                                $scope.uberRideStatusMain.driver_info_window_marker = $rootScope.map._addInfoWindowMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude, 'Driver');\n                            }\n                        }\n                    } else {\n                        /*\n                         * if there is nothing after, then trip is finished\n                         * */\n                        $scope.uberRideStatusMain.rideStatus = null;\n                        $rootScope.map._updateUserInfoWindowMarker($rootScope.main.userData.firstName);\n                        $rootScope.map._setCenterToMe();\n                    }\n                }\n\n                $interval(function () {\n                    checkStatus();\n                }, 5000); //update every 5 secs\n                checkStatus();\n\n            }\n        };\n    }]);","angular.module('app')\n    .controller('indexController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'index';\n    }])\n    .directive('indexnScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n            }\n        };\n    }]);","angular.module('app')\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', 'ngDialog', function ($q, $log, $window, $rootScope, ngDialog) {\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                };\n            }\n\n            if (resp !== null && typeof resp === 'object') {\n                if (resp.redirect) {\n                    if (resp.redirectPage) {\n                        $window.location.href = resp.redirectPage;\n                    }\n\n                    if (resp.redirectState) {\n                        $rootScope.main.changeState(resp.redirectState)\n                    }\n                }\n                if (resp.reload) {\n                    $rootScope.main.reloadPage();\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.main.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.dialog) {\n                    if (resp.id) {\n                        switch (resp.id) {\n                            case \"not-authorized\":\n                                not_authorized_dialog();\n                                break;\n                            case \"sign-in\":\n                                sign_in_dialog(resp.msg);\n                                break;\n                            default:\n                            //do nothing\n                        }\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.signInBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('signInBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n\n            function not_authorized_dialog() {\n                ngDialog.open({\n                    template: '/dialog/not-authorized.html',\n                    className: 'ngdialog-theme-default',\n                    overlay: true,\n                    showClose: false,\n                    closeByEscape: true,\n                    closeByDocument: true,\n                    cache: false,\n                    trapFocus: true,\n                    preserveFocus: true\n                });\n            }\n\n            function sign_in_dialog(message) {\n                ngDialog.openConfirm({\n                    data: {\n                        message: message\n                    },\n                    template: '/dialog/sign-in.html',\n                    className: 'ngdialog-theme-default',\n                    overlay: true,\n                    showClose: false,\n                    closeByEscape: false,\n                    closeByDocument: false,\n                    cache: true,\n                    trapFocus: true,\n                    preserveFocus: true\n                }).then(function () {\n                    $rootScope.main.redirectToPage('/notLoggedIn');\n                }, function () {\n                    $rootScope.main.redirectToPage('/about');\n                });\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}