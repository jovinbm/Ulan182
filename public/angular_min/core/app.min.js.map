{"version":3,"sources":["app.js","universalCtrl.js","account/connectToUber.js","account/createAccount.js","account/logout.js","account/signIn.js","home_core/home_core.js","home_core/location_search_box.js","home_core/map.js","home_core/price_estimate.js","home_core/request_uber.js","home_core/ride_status.js","index/index.js","req/response_filter.js"],"names":["trackDigests","app","run","$rootScope","Promise","setScheduler","cb","$evalAsync","angular","module","config","$stateProvider","$urlRouterProvider","$interpolateProvider","startSymbol","endSymbol","otherwise","state","url","views","main","templateUrl","controller","$state","$stateParams","localStorageServiceProvider","setPrefix","setStorageCookieDomain","document","location","hostname","search","setStorageType","$filter","$window","$location","$scope","ngDialog","$anchorScroll","localStorageService","$http","toastr","$interval","service_rideStatus","$ionicPopup","$ionicPopover","$timeout","uberRideRequestStatuses","classes","body","userData","getUserData","resolve","then","post","resp","data","responseStatusHandler","err","user","changeState","console","log","getCurrentState","current","name","toState","ifInArray","ifNotInArray","currentState","indexOf","go","showToast","toastType","text","showIonicAlert","heading","content","alert","title","template","$on","event","toParams","fromState","fromParams","$watch","oldVal","uber","access_token","directive","restrict","link","uberConnect","isBusy","status","getUberAuthorizationUrl","redirectToPage","createAccount","details","registrationDetails","password1","password2","createMain","email","firstName","lastName","username","redirect","logout","localUserLogin","loginData","loginFormModel","password","signInMain","submitLocalLoginForm","factory","getProducts","lat","lng","code","timeout","latitude","longitude","products","obj","e","TimeoutError","getPriceEstimates","start_lat","start_lng","end_lat","end_lng","start_latitude","start_longitude","end_latitude","end_longitude","priceEstimateArray","prices","getTimeEstimates","timeEstimateArray","times","getUberRideStatus","rStatus","driver","ratingArray","Array","Math","ceil","rating","rideStatus","checkUberRide","processing","no_drivers_available","accepted","arriving","in_progress","driver_canceled","rider_canceled","completed","getRideStatus","$element","$attr","element","find","val","formatted_address","geocomplete","bind","$apply","resizeMap","css","height","window","margin","padding-left","resize","GMaps","prototype","_getMyPosition","map","_myLocation","reject","geolocate","success","position","coords","error","not_supported","_updateMyPosition","_addMarker","this","addMarker","_addInfoWindowMarker","infoWindow","_userMarker","_userInfoWindowMarker","_addUserMarker","_addUserInfoWindowMarker","_moveMarker","marker","setPosition","google","maps","LatLng","_updateUserMarker","_updateUserInfoWindowMarker","_removeMarker","setMap","_removeAllPresentMarkers","removeMarkers","_setCenter","setCenter","_setCenterToMe","_drawRoute","originArr","destArr","length","cleanRoute","drawRoute","origin","destination","travelMode","strokeColor","strokeOpacity","strokeWeight","div","$","refresh","$ionicSlideBoxDelegate","priceEstimatorCtrlMain","showEstimates","goToSlide","index","slide","parseInt","nextSlide","next","previousSlide","previous","service_uberPrices","priceEstimator","start_formatted_address","end_formatted_address","arr","updateStartLocation","parseFloat","toFixed","toString","updateEndLocation","startAtMyLocation","userLocation","array","endAtMyLocation","requestUberControllerMain","showStatus","service_uberProducts","service_uberTimeEstimates","requestUberMain","product_id","selectedProductPriceEstimate","selectedProduct","changeProductId","newId","product_display_name","forEach","product","localized_display_name","toLowerCase","display_name","estimate","requestUber","updateTimeEstimates","uberRideStatusControllerMain","checkStatus","uberRideStatusMain","lastRide","startLatitude","startLongitude","endLatitude","endLongitude","driver_latitude","driver_longitude","driver_info_window_marker","updateUberRequestSandbox","delay","filter","$q","$log","redirectPage","href","redirectState","reload","reloadPage","notify","type","msg","dialog","id","banner","bannerClass","signInBanner","registrationBanner","reason","warn"],"mappings":"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","file":"app.min.js","sourcesContent":["function trackDigests(app) {\n    app.run([\"$rootScope\", function ($rootScope) {\n        Promise.setScheduler(function (cb) {\n            $rootScope.$evalAsync(cb);\n        });\n    }]);\n}\n\n//angular sanitize included in textAngular\nvar app = angular.module('app', [\n    'ngSanitize',\n    'ui.bootstrap',\n    'toastr',\n    'ui.router',\n    'ngDialog',\n    'LocalStorageModule',\n    'angular-loading-bar',\n    'ionic'\n]);\n\n//app.config(function ($httpProvider) {\n//    $httpProvider.interceptors.push(function ($q) {\n//        return {\n//            'request': function (config) {\n//                config.url = config.url + '?id=123';\n//                return config || $q.when(config);\n//\n//            }\n//\n//        }\n//    });\n//});\n\napp.config(function ($stateProvider, $urlRouterProvider, $interpolateProvider) {\n    //\n\n    /*symbol to work with express handlebars\n     * */\n    $interpolateProvider.startSymbol('{[{');\n    $interpolateProvider.endSymbol('}]}');\n\n    // For any unmatched url, redirect to /index\n    $urlRouterProvider.otherwise(\"/index\");\n\n    $stateProvider\n        .state('index', {\n            url: \"/index\",\n            views: {\n                'main': {\n                    templateUrl: \"_index.html\"\n                }\n            }\n        })\n        .state('register', {\n            url: \"/register\",\n            views: {\n                'main': {\n                    templateUrl: \"_create_account.html\"\n                }\n            }\n        })\n        .state('login', {\n            url: \"/login\",\n            views: {\n                'main': {\n                    templateUrl: \"_sign_in.html\"\n                }\n            }\n        })\n        .state('home', {\n            url: \"/home\",\n            views: {\n                'main': {\n                    templateUrl: \"_welcome.html\"\n                }\n            }\n        })\n        .state('priceEstimator', {\n            url: \"/estimator\",\n            views: {\n                'main': {\n                    controller: 'priceEstimateController',\n                    templateUrl: \"_price_estimates.html\"\n                }\n            }\n        })\n        .state('requestUber', {\n            url: \"/requestUber\",\n            views: {\n                'main': {\n                    controller: \"requestUberController\",\n                    templateUrl: \"_request_uber.html\"\n                }\n            }\n        })\n        .state('rideStatus', {\n            url: \"/rideStatus\",\n            views: {\n                'main': {\n                    controller: 'uberRideStatusController',\n                    templateUrl: \"_ride_status.html\"\n                }\n            }\n        })\n        .state('connectToUber', {\n            url: \"/connect\",\n            views: {\n                'main': {\n                    templateUrl: \"_connect_to_uber.html\"\n                }\n            }\n        });\n});\n\napp.run(function ($rootScope, $state, $stateParams) {\n    $rootScope.$state = $state;\n    $rootScope.$stateParams = $stateParams;\n});\n\ntrackDigests(app);\n\n/*\n * jquery functions\n * */","angular.module('app')\n    .config(function (localStorageServiceProvider) {\n        localStorageServiceProvider\n            .setPrefix('app')\n            .setStorageCookieDomain(document.location.hostname.search(\"uber\") !== -1 ? 'uber.org' : '')\n            .setStorageType('localStorage');\n    });\n\nangular.module('app')\n    .controller('UniversalController',\n    ['$filter', '$window', '$location', '$scope', '$rootScope', 'ngDialog', '$anchorScroll', 'localStorageService', '$http', '$state', 'toastr', '$interval', 'service_rideStatus', '$ionicPopup', '$ionicPopover', '$timeout',\n        function ($filter, $window, $location, $scope, $rootScope, ngDialog, $anchorScroll, localStorageService, $http, $state, toastr, $interval, service_rideStatus, $ionicPopup, $ionicPopover, $timeout) {\n\n            $rootScope.main = {\n\n                uberRideRequestStatuses: service_rideStatus.uberRideRequestStatuses,\n\n                classes: {\n                    body: 'index'\n                },\n\n                userData: null,\n\n                getUserData: function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post(\"/api/getUserData\", {})\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp.userData;\n                                })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    throw err;\n                                })\n                        })\n                        .then(function (user) {\n                            if (user) {\n                                $rootScope.main.userData = user;\n                            } else {\n                                $rootScope.main.userData = null;\n                            }\n                            return true;\n                        })\n                        .then(function () {\n                            if (!$rootScope.main.userData) {\n                                $rootScope.main.changeState('index', null, ['index', 'register', 'login']);\n                            } else {\n                                $rootScope.main.changeState('home', ['index', 'register', 'login'], null);\n                            }\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                },\n\n                getCurrentState: function () {\n                    return $state.current.name;\n                },\n\n                changeState: function (toState, ifInArray, ifNotInArray) {\n                    var currentState = $rootScope.main.getCurrentState();\n                    if (ifInArray) {\n                        if (ifInArray.indexOf(currentState) > -1) {\n                            $state.go(toState);\n                        }\n                    } else if (ifNotInArray) {\n                        if (ifNotInArray.indexOf(currentState) == -1) {\n                            $state.go(toState);\n                        }\n                    } else if (toState) {\n                        $state.go(toState);\n                    } else {\n                        //do nothing\n                        return true;\n                    }\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                showToast: function (toastType, text) {\n                    return $rootScope.main.showIonicAlert('Info', text);\n                },\n\n                showIonicAlert: function (heading, content) {\n                    return $ionicPopup.alert({\n                        title: heading,\n                        template: content\n                    });\n                }\n\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.getUserData();\n            });\n\n            /*\n             * important, check if user is not connected to uber\n             * */\n            $scope.$watch(function () {\n                return $rootScope.main.userData\n            }, function (userData, oldVal) {\n                if (userData) {\n                    if (userData.uber.access_token == '') {\n                        $rootScope.main.changeState('connectToUber');\n                    }\n                }\n            });\n        }\n    ]);","angular.module('app')\n    .directive('uberConnect', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.uberConnect = {\n                    isBusy: false,\n                    status: '',\n\n                    getUberAuthorizationUrl: function () {\n\n                        $scope.uberConnect.isBusy = true;\n                        $scope.uberConnect.status = 'Connecting...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                return $http.post('/api/getUberAuthorizationUrl', {})\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.uberConnect.isBusy = false;\n                                $rootScope.main.redirectToPage(resp.url);\n                                return true;\n                            })\n                            .catch(function (err) {\n                                $scope.uberConnect.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    }\n                }\n            }\n        };\n    }])","angular.module('app')\n    .controller('createAccountController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('createAccountScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.createMain = {\n                    isBusy: false\n                };\n\n                $scope.registrationDetails = {\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    username: \"\",\n                    password1: \"\",\n                    password2: \"\"\n                };\n\n                $scope.createAccount = function (redirect) {\n                    $scope.createMain.isBusy = true;\n                    return createAccount($scope.registrationDetails, redirect)\n                        .then(function () {\n                            $scope.createMain.isBusy = false;\n                        });\n                };\n\n                function createAccount(details) {\n                    return $http.post('/api/createAccount', details)\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            $scope.registrationDetails.password1 = \"\";\n                            $scope.registrationDetails.password2 = \"\";\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('logoutScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.logout = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('api/logoutClient', {}).then(function (resp) {\n                                console.log(resp);\n                                resp = resp.data;\n                                $rootScope.main.responseStatusHandler(resp);\n                                $rootScope.main.userData = null;\n                                return true;\n                            })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    return true;\n                                })\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .controller('signInController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('signInScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.signInMain = {\n                    isBusy: false\n                };\n\n                $scope.loginFormModel = {\n                    username: \"\",\n                    password: \"\"\n                };\n\n                $scope.submitLocalLoginForm = function () {\n                    $scope.signInMain.isBusy = true;\n                    return localUserLogin($scope.loginFormModel)\n                        .then(function () {\n                            $scope.signInMain.isBusy = false;\n                        });\n                };\n\n                function localUserLogin(loginData) {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('/api/localUserLogin', loginData);\n                        })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $scope.loginFormModel.password = \"\";\n                            $rootScope.main.responseStatusHandler(err);\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .controller('homeCoreController', ['$rootScope', '$scope', '$http', function ($rootScope, $scope, $http) {\n        $rootScope.main.classes.body = 'homepage';\n\n    }])\n    .factory(\"service_uberProducts\", ['$interval', '$rootScope', '$http', '$timeout', function ($interval, $rootScope, $http, $timeout) {\n        /*\n         * polls the available products etc\n         * */\n\n        var format = {\n            \"products\": [\n                {\n                    \"capacity\": 4,\n                    \"description\": \"The low-cost Uber\",\n                    \"price_details\": {\n                        \"distance_unit\": \"mile\",\n                        \"cost_per_minute\": 0.26,\n                        \"service_fees\": [\n                            {\n                                \"fee\": 1.0,\n                                \"name\": \"Safe Rides Fee\"\n                            }\n                        ],\n                        \"minimum\": 5.0,\n                        \"cost_per_distance\": 1.3,\n                        \"base\": 2.2,\n                        \"cancellation_fee\": 5.0,\n                        \"currency_code\": \"USD\"\n                    },\n                    \"image\": \"http://d1a3f4spazzrp4.cloudfront.net/car.jpg\",\n                    \"display_name\": \"uberX\",\n                    \"product_id\": \"a1111c8c-c720-46c3-8534-2fcdd730040d\"\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var products = null;\n\n        function getProducts(lat, lng) {\n\n            /*\n             * either returns products or []\n             * */\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (lat && lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getProducts', {\n                        latitude: lat,\n                        longitude: lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    products = resp.obj.products;\n                    return resp.obj.products;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'We could not determine your precise location to list the available products in your area');\n                        products = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    products = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    products = [];\n                    return [];\n                })\n        }\n\n        return {\n            getProducts: getProducts, //isFunction\n            products: function () {\n                return products;\n            }\n        };\n    }])\n    .factory(\"service_uberPrices\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * polls the available products, estimates etc\n         * */\n\n        var format = {\n            \"prices\": [\n                {\n                    \"product_id\": \"08f17084-23fd-4103-aa3e-9b660223934b\",\n                    \"currency_code\": \"USD\",\n                    \"display_name\": \"UberBLACK\",\n                    \"estimate\": \"$23-29\",\n                    \"low_estimate\": 23,\n                    \"high_estimate\": 29,\n                    \"surge_multiplier\": 1,\n                    \"duration\": 640,\n                    \"distance\": 5.34\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var priceEstimateArray = null;\n\n        function getPriceEstimates(start_lat, start_lng, end_lat, end_lng) {\n\n            /*\n             * either returns array or []\n             * */\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (start_lat && start_lng && end_lat && end_lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getPriceEstimate', {\n                        start_latitude: start_lat,\n                        start_longitude: start_lng,\n                        end_latitude: end_lat,\n                        end_longitude: end_lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    priceEstimateArray = resp.obj.prices;\n                    return resp.obj.prices;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        priceEstimateArray = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    priceEstimateArray = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    priceEstimateArray = [];\n                    return [];\n                });\n        }\n\n        return {\n            getPriceEstimates: getPriceEstimates, //isFunction\n            priceEstimateArray: function () {\n                return priceEstimateArray;\n            }\n        };\n    }])\n    .factory(\"service_uberTimeEstimates\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * pickup time estimates for various products etc\n         * */\n\n        var format = {\n            \"times\": [\n                {\n                    \"product_id\": \"5f41547d-805d-4207-a297-51c571cf2a8c\",\n                    \"display_name\": \"UberBLACK\",\n                    \"estimate\": 410\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var timeEstimateArray = null;\n\n        function getTimeEstimates(start_lat, start_lng) {\n\n            /*\n             * either returns array or []\n             * */\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (start_lat && start_lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getTimeEstimate', {\n                        start_latitude: start_lat,\n                        start_longitude: start_lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    timeEstimateArray = resp.obj.times;\n                    return resp.obj.times;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        timeEstimateArray = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    timeEstimateArray = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    timeEstimateArray = [];\n                    return [];\n                });\n        }\n\n        return {\n            getTimeEstimates: getTimeEstimates, //isFunction\n            timeEstimateArray: function () {\n                return timeEstimateArray;\n            }\n        };\n    }])\n    .factory(\"service_rideStatus\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * polls the ride status\n         * */\n\n        var format = {\n            \"status\": \"accepted\",\n            \"driver\": {\n                \"phone_number\": \"(555)555-5555\",\n                \"rating\": 5,\n                \"picture_url\": \"https:\\/\\/d1w2poirtb3as9.cloudfront.net\\/img.jpeg\",\n                \"name\": \"Bob\"\n            },\n            \"eta\": 4,\n            \"location\": {\n                \"latitude\": 37.776033,\n                \"longitude\": -122.418143,\n                \"bearing\": 33\n            },\n            \"vehicle\": {\n                \"make\": \"Bugatti\",\n                \"model\": \"Veyron\",\n                \"license_plate\": \"I<3Uber\",\n                \"picture_url\": \"https:\\/\\/d1w2poirtb3as9.cloudfront.net\\/car.jpeg\"\n            },\n            \"surge_multiplier\": 1.0,\n            \"request_id\": \"b2205127-a334-4df4-b1ba-fc9f28f56c96\",\n            //cojoined details in server\n            \"mapDetails\": {\n                \"request_id\": \"b5512127-a134-4bf4-b1ba-fe9f48f56d9d\",\n                \"href\": \"https://trip.uber.com/abc123\"\n            },\n            \"lastRide\": \"**last ride details from database\"\n        };\n\n        var TimeoutError = Promise.TimeoutError;\n\n        var rideStatus = null;\n\n        var uberRideRequestStatuses = {\n            processing: \"Processing\",\n            no_drivers_available: 'No drivers available',\n            accepted: 'Accepted',\n            arriving: 'Arriving',\n            in_progress: 'In progress',\n            driver_canceled: 'Driver canceled',\n            rider_canceled: 'Rider canceled',\n            completed: 'Completed'\n        };\n\n\n        function getUberRideStatus() {\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            /*\n             * either returns array or null**\n             * */\n\n            return Promise.resolve()\n                .timeout(8000) // timeout in 13 secs\n                .then(function () {\n                    return $http.post('/api/getRideStatus', {})\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    var rStatus = resp.obj;\n                    /*\n                     * put a rating array for the ng-repeat stars\n                     * */\n                    if (!rStatus) {\n                        rideStatus = null;\n                        return true;\n                    }\n\n                    if (rStatus.driver) {\n                        rStatus.driver.ratingArray = new Array(Math.ceil(rStatus.driver.rating));\n                    }\n                    rideStatus = rStatus;\n                    return rideStatus;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        //don't change the ride status\n                        return rideStatus;\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    //don't change the ride status\n                    return rideStatus;\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    return rideStatus;\n                })\n                .then(function () {\n                    checkUberRide();\n                });\n        }\n\n        $interval(function () {\n            getUberRideStatus();\n        }, 10000); //update every 15 secs\n        getUberRideStatus();\n\n        /*\n         * function checks if the user has requested an uber, if so, it forces the user to remain in the requestUber state\n         * */\n        function checkUberRide() {\n            if (rideStatus) {\n                $rootScope.main.changeState('rideStatus', null, ['rideStatus']);\n            }\n        }\n\n        $rootScope.$on('$stateChangeSuccess', function () {\n            if (rideStatus) {\n                $rootScope.main.changeState('rideStatus', null, ['rideStatus']);\n            }\n        });\n\n        return {\n            rideStatus: function () {\n                return rideStatus\n            },\n            getRideStatus: function () {\n                return getUberRideStatus();\n            },\n            uberRideRequestStatuses: uberRideRequestStatuses\n        };\n    }]);","angular.module('app')\n    .directive('locationSearchBox', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.lat = angular.element($element.find('.details input.lat')).val();\n                $scope.lng = angular.element($element.find('.details input.lng')).val();\n                $scope.formatted_address = angular.element($element.find('.details input.formatted_address')).val();\n                /*\n                 * auto complete for the input.geoFields\n                 * */\n                angular.element($element.find('input.geoField')).geocomplete({\n                    details: angular.element($element.find('.details'))\n                })\n                    .bind(\"geocode:result\", function () {\n                        $scope.lat = angular.element($element.find('.details input.lat')).val();\n                        $scope.lng = angular.element($element.find('.details input.lng')).val();\n                        $scope.formatted_address = angular.element($element.find('.details input.formatted_address')).val();\n\n                        $scope.$apply($attr['locationUpdate']);\n                    });\n            }\n        };\n    }]);","angular.module('app')\n    .controller('mapController', ['$rootScope', '$scope', '$http', '$interval', '$timeout',\n        function ($rootScope, $scope, $http, $interval, $timeout) {\n\n            function resizeMap() {\n                angular.element(\"#map\").css({\n                    \"height\": angular.element(window).height(),\n                    \"margin\": 0,\n                    \"padding-left\": 0\n                });\n            }\n\n            angular.element(window).resize(function () {\n                resizeMap();\n            });\n\n            resizeMap();\n\n\n            GMaps.prototype._getMyPosition = function (map) {\n                if (map._myLocation.lat && map._myLocation.lng) {\n                    return {\n                        lat: map._myLocation.lat,\n                        lng: map._myLocation.lng\n                    }\n                } else {\n                    return Promise.resolve()\n                        .then(function () {\n                            return new Promise(function (resolve, reject) {\n                                GMaps.geolocate({\n                                    success: function (position) {\n                                        map._myLocation.lat = position.coords.latitude;\n                                        map._myLocation.lng = position.coords.longitude;\n                                        resolve({\n                                            lat: map._myLocation.lat,\n                                            lng: map._myLocation.lng\n                                        });\n                                    },\n                                    error: function (error) {\n                                        $rootScope.main.showToast('warning', 'Geolocation failed');\n                                        console.log(error);\n                                        resolve(null)\n                                    },\n                                    not_supported: function () {\n                                        $rootScope.main.showToast('warning', 'Your browser does not support geolocation');\n                                        resolve(null)\n                                    }\n                                });\n                            })\n                        })\n                }\n            };\n\n\n            GMaps.prototype._updateMyPosition = function (map) {\n                /*\n                 * if userLocation is found, the universalController object is updated with the user location\n                 * */\n                return new Promise(function (resolve, reject) {\n                    GMaps.geolocate({\n                        success: function (position) {\n                            map._myLocation.lat = position.coords.latitude;\n                            map._myLocation.lng = position.coords.longitude;\n                            resolve(true);\n                        },\n                        error: function (error) {\n                            console.log(error);\n                            $rootScope.main.showToast('warning', 'We could not update your location...');\n                            resolve(true);\n                        }\n                    });\n                })\n            };\n\n            GMaps.prototype._myLocation = {\n                lat: null,\n                lng: null\n            };\n\n            GMaps.prototype._addMarker = function (lat, lng, title) {\n                return this.addMarker({\n                    lat: lat,\n                    lng: lng,\n                    title: title || ''\n                });\n            };\n\n            GMaps.prototype._addInfoWindowMarker = function (lat, lng, title) {\n                return this.addMarker({\n                    lat: lat,\n                    lng: lng,\n                    infoWindow: {\n                        content: '<p>' + title + '</p>'\n                    }\n                });\n            };\n\n            GMaps.prototype._userMarker = null;\n            GMaps.prototype._userInfoWindowMarker = null;\n\n            GMaps.prototype._addUserMarker = function () {\n                this._userMarker = this.addMarker({\n                    lat: $rootScope.map._myLocation.lat,\n                    lng: $rootScope.map._myLocation.lat,\n                    title: ''\n                });\n\n                return this._userMarker\n            };\n\n            GMaps.prototype._addUserInfoWindowMarker = function (title) {\n                this._userInfoWindowMarker = this.addMarker({\n                    lat: $rootScope.map._myLocation.lat,\n                    lng: $rootScope.map._myLocation.lat,\n                    infoWindow: {\n                        content: '<p>' + title + '</p>'\n                    }\n                });\n\n                return this._userInfoWindowMarker\n            };\n\n            GMaps.prototype._moveMarker = function (marker, lat, lng) {\n                marker.setPosition(new google.maps.LatLng(lat, lng));\n            };\n\n            GMaps.prototype._updateUserMarker = function () {\n                if (!this._userMarker) {\n                    this._addUserMarker()\n                } else {\n                    this._moveMarker(this._userMarker, this._myLocation.lat, this._myLocation.lng);\n                }\n            };\n\n            GMaps.prototype._updateUserInfoWindowMarker = function (title) {\n                if (!this._userInfoWindowMarker) {\n                    this._addUserInfoWindowMarker(title)\n                } else {\n                    this._moveMarker(this._userInfoWindowMarker, this._myLocation.lat, this._myLocation.lng);\n                }\n            };\n\n            GMaps.prototype._removeMarker = function (marker) {\n                marker.setMap(null);\n            };\n\n            GMaps.prototype._removeAllPresentMarkers = function () {\n                this.removeMarkers();\n            };\n\n            GMaps.prototype._setCenter = function (lat, lng) {\n                this.setCenter(lat, lng);\n            };\n\n            GMaps.prototype._setCenterToMe = function () {\n                if (this._myLocation.lat && this._myLocation.lng) {\n                    this.setCenter(this._myLocation.lat, this._myLocation.lng);\n                }\n            };\n\n            GMaps.prototype._drawRoute = function (originArr, destArr) {\n                if (!originArr || !destArr) return;\n                if (originArr.length < 2 || destArr.length < 2) return;\n                this.cleanRoute();\n                this.removeMarkers();\n\n                this.addMarker({lat: originArr[0], lng: originArr[1]});\n                this.addMarker({lat: destArr[0], lng: destArr[1]});\n\n                this.drawRoute({\n                    origin: originArr,\n                    destination: destArr,\n                    travelMode: 'driving',\n                    strokeColor: '#09091A',\n                    strokeOpacity: 0.6,\n                    strokeWeight: 6\n                });\n            };\n\n            $rootScope.map = new GMaps({\n                div: '#map',\n                lat: -12.043333,\n                lng: -77.028333\n            });\n\n            /*\n             * prepare functions that will update stuff, wait for 3 secs\n             * */\n            $timeout(function () {\n\n                resizeMap();\n\n                $rootScope.map._updateMyPosition($rootScope.map)\n                    .then(function () {\n                        $rootScope.map._setCenter($rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n                        $rootScope.map._addUserMarker($rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n                    });\n\n                $scope.$watch(function () {\n                    return $rootScope.map._myLocation.lat;\n                }, function () {\n                    if ($rootScope.map._userMarker) {\n                        $rootScope.map._moveMarker($rootScope.map._userMarker, $rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n                    }\n                });\n\n                $interval(function () {\n                    if ($rootScope.map._updateMyPosition) {\n                        $rootScope.map._updateMyPosition($rootScope.map);\n                    }\n                }, 10000); //update every 10 secs\n\n\n                /*\n                 * refresh on resize and state change\n                 * */\n                //resize event\n                $(window).resize(function () {\n                    $rootScope.map.refresh();\n                });\n\n            }, 3000);\n\n        }]);","angular.module('app')\n    .controller('priceEstimateController', ['$rootScope', '$scope', '$http', '$ionicPopover', '$ionicSlideBoxDelegate', function ($rootScope, $scope, $http, $ionicPopover, $ionicSlideBoxDelegate) {\n\n        $rootScope.main.classes.body = 'priceEstimate';\n\n        /*\n         * prepare the results popover\n         * */\n        $scope.priceEstimatorCtrlMain = {\n            /*\n             * priceEstimateArray contains the data obtained from price estimates\n             * including the types of cars available\n             * distance etc,\n             *\n             * updated when start/end location is chosen\n             * */\n            priceEstimateArray: [],\n            showEstimates: false\n        };\n\n        /*\n         * managing the slides\n         * */\n\n        $scope.goToSlide = function (index) {\n            $ionicSlideBoxDelegate.slide(parseInt(index));\n        };\n        $scope.nextSlide = function (index) {\n            $ionicSlideBoxDelegate.next();\n        };\n        $scope.previousSlide = function (index) {\n            $ionicSlideBoxDelegate.previous();\n        };\n    }])\n    .directive('priceEstimator', ['$rootScope', '$http', 'service_uberPrices', function ($rootScope, $http, service_uberPrices) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.priceEstimator = {\n                    isBusy: false,\n                    status: '',\n\n                    start_latitude: '',\n                    start_longitude: '',\n                    start_formatted_address: '',\n                    end_latitude: '',\n                    end_longitude: '',\n                    end_formatted_address: '',\n\n                    getPriceEstimates: function () {\n\n                        /*\n                         * these estimates should be for the whole journey\n                         * */\n                        if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.start_longitude && $scope.priceEstimator.end_latitude && $scope.priceEstimator.end_longitude) {\n\n                            $scope.priceEstimator.isBusy = true;\n                            $scope.priceEstimator.status = 'Calculating...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    return service_uberPrices.getPriceEstimates($scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude, $scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude)\n                                })\n                                .then(function (arr) {\n                                    $scope.priceEstimatorCtrlMain.priceEstimateArray = arr;\n                                    $scope.priceEstimator.isBusy = false;\n                                    /*\n                                     * show the estimates\n                                     * */\n                                    $scope.priceEstimatorCtrlMain.showEstimates = true;\n                                    $scope.goToSlide(0);\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.priceEstimator.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                });\n\n                        }\n                    }\n                };\n\n                $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.start_latitude = lat;\n                        $scope.priceEstimator.start_longitude = lng;\n                        $scope.priceEstimator.start_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $rootScope.map._setCenter(lat, lng);\n                        $scope.drawRoute();\n                    }\n                };\n\n                $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.end_latitude = lat;\n                        $scope.priceEstimator.end_longitude = lng;\n                        $scope.priceEstimator.end_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $scope.drawRoute();\n                    }\n                };\n\n                $scope.drawRoute = function () {\n                    if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.end_latitude) {\n                        $rootScope.map._setCenter($scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude);\n                        $rootScope.map._drawRoute([$scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude], [$scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude])\n                    }\n                };\n\n                $scope.startAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.start_latitude = array[0];\n                                $scope.priceEstimator.start_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n\n                $scope.endAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.end_latitude = array[0];\n                                $scope.priceEstimator.end_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n            }\n        };\n    }]);","angular.module('app')\n    .controller('requestUberController', ['$rootScope', '$scope', '$http','$ionicSlideBoxDelegate', function ($rootScope, $scope, $http, $ionicSlideBoxDelegate) {\n\n        $rootScope.main.classes.body = 'requestUber';\n\n        $scope.requestUberControllerMain = {\n\n            /*\n             * priceEstimateArray contains the data obtained from price estimates\n             * including the types of cars available\n             * distance etc\n             * */\n            priceEstimateArray: [],\n\n            /*\n             * timeEstimateArray contains the data obtained from time estimates\n             * */\n            timeEstimateArray: [],\n\n            /*\n             * all uber products available in area, update when start location is selected\n             * */\n            products: [],\n\n            showStatus: false\n        };\n\n        /*\n         * managing the slides\n         * */\n\n        $scope.goToSlide = function (index) {\n            $ionicSlideBoxDelegate.slide(parseInt(index));\n        };\n        $scope.nextSlide = function (index) {\n            $ionicSlideBoxDelegate.next();\n        };\n        $scope.previousSlide = function (index) {\n            $ionicSlideBoxDelegate.previous();\n        };\n\n    }])\n    .directive('requestUberDirective',\n    ['$rootScope', '$http', '$interval', 'service_uberProducts', 'service_uberPrices', 'service_uberTimeEstimates', 'service_rideStatus',\n        function ($rootScope, $http, $interval, service_uberProducts, service_uberPrices, service_uberTimeEstimates, service_rideStatus) {\n            return {\n                restrict: 'AE',\n                link: function ($scope, $element, $attr) {\n\n                    $scope.requestUberMain = {\n                        isBusy: false,\n                        status: '',\n\n                        start_latitude: '',\n                        start_longitude: '',\n                        start_formatted_address: '',\n                        end_latitude: '',\n                        end_longitude: '',\n                        end_formatted_address: '',\n                        products: [],\n\n                        product_id: '',\n                        selectedProductPriceEstimate: {}, //holds the selected products price estimates and so forth\n                        selectedProduct: {}, // holds the selected product\n\n                        changeProductId: function (newId, product_display_name) {\n                            if (newId) {\n\n                                $scope.requestUberMain.product_id = newId;\n\n                                //get the selected product\n                                $scope.requestUberControllerMain.products.forEach(function (product) {\n                                    if (product.product_id == newId) {\n                                        $scope.requestUberMain.selectedProduct = product;\n                                    }\n                                });\n\n\n                                $scope.requestUberControllerMain.priceEstimateArray.forEach(function (product) {\n                                    /*\n                                     * since product_ids are most of the times different, here we are\n                                     * using their names to lower case\n                                     * */\n                                    if (product.localized_display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                        $scope.requestUberMain.selectedProductPriceEstimate = product;\n                                    }\n                                });\n\n                                /*\n                                 * put in the estimates from the timeEstimateArray\n                                 * */\n                                $scope.requestUberControllerMain.timeEstimateArray.forEach(function (product) {\n                                    /*\n                                     * since product_ids are most of the times different, here we are\n                                     * using their names to lower case\n                                     * */\n                                    if (product.display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                        $scope.requestUberMain.selectedProduct.estimate = Math.ceil(product.estimate / 60);\n                                    }\n                                });\n                            }\n                        },\n\n                        requestUber: function () {\n\n                            $scope.requestUberMain.isBusy = true;\n                            $scope.requestUberMain.status = 'Requesting...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude && $scope.requestUberMain.product_id) {\n                                        return true;\n                                    } else {\n                                        throw {\n                                            code: 600\n                                        };\n                                    }\n                                })\n                                .then(function () {\n                                    return $http.post('/api/requestUber', {\n                                        start_latitude: $scope.requestUberMain.start_latitude,\n                                        start_longitude: $scope.requestUberMain.start_longitude,\n                                        end_latitude: $scope.requestUberMain.end_latitude,\n                                        end_longitude: $scope.requestUberMain.end_longitude,\n                                        product_id: $scope.requestUberMain.product_id\n                                    })\n                                        .then(function (resp) {\n                                            resp = resp.data;\n                                            $rootScope.main.responseStatusHandler(resp);\n                                            return resp;\n                                        })\n                                        .catch(function (err) {\n                                            err = err.data;\n                                            $rootScope.main.responseStatusHandler(err);\n                                            throw err;\n                                        })\n                                })\n                                .then(function (resp) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    /*\n                                     * check the ride status\n                                     * */\n                                    service_rideStatus.getRideStatus();\n                                    return true;\n                                })\n                                .catch(function (e) {\n                                    if (e.code === 600) {\n                                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                                    } else {\n                                        throw e\n                                    }\n                                    $scope.requestUberMain.isBusy = false;\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                })\n                        },\n\n                        getPriceEstimates: function () {\n\n                            /*\n                             * these estimates should be for the whole journey\n                             * */\n                            if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude) {\n\n                                $scope.requestUberMain.isBusy = true;\n                                $scope.requestUberMain.status = 'Getting cost estimates...';\n\n                                return Promise.resolve()\n                                    .then(function () {\n                                        return service_uberPrices.getPriceEstimates($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude, $scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude)\n                                    })\n                                    .then(function (arr) {\n                                        $scope.requestUberControllerMain.priceEstimateArray = arr;\n                                        $scope.requestUberMain.isBusy = false;\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        $scope.requestUberMain.isBusy = false;\n                                        console.log(err);\n                                        return true;\n                                    });\n\n                            }\n                        },\n\n                        updateTimeEstimates: function () {\n                            if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude) {\n                                console.log('Updating all eta');\n                                Promise.resolve()\n                                    .then(function () {\n                                        return service_uberTimeEstimates.getTimeEstimates($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude)\n                                            .then(function (arr) {\n                                                $scope.requestUberControllerMain.timeEstimateArray = arr;\n                                                return true;\n                                            })\n                                    })\n                            }\n                        }\n                    };\n\n                    /*\n                     * update the pickup times every 60 mins - uber api\n                     * */\n                    $interval(function () {\n                        $scope.requestUberMain.updateTimeEstimates();\n                    }, 60000);\n                    $scope.requestUberMain.updateTimeEstimates();\n\n                    $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                        lat = parseFloat(lat).toFixed(10);\n                        lng = parseFloat(lng).toFixed(10);\n\n                        if (formatted_address) {\n                            formatted_address = formatted_address.toString();\n                        }\n\n                        if (lat && lng) {\n                            $scope.requestUberMain.start_latitude = lat;\n                            $scope.requestUberMain.start_longitude = lng;\n                            $scope.requestUberMain.start_formatted_address = formatted_address;\n\n                            $rootScope.map._addMarker(lat, lng, formatted_address);\n                            $rootScope.map._setCenter(lat, lng);\n                            $scope.drawRoute();\n\n                            /*\n                             * update the products to the new location\n                             * PRODUCTS ARE ONLY UPDATED FOR THE PICKUP LOCATION\n                             * */\n                            Promise.resolve()\n                                .then(function () {\n                                    return service_uberProducts.getProducts(lat, lng)\n                                        .then(function (products) {\n                                            $scope.requestUberControllerMain.products = products;\n                                            return true;\n                                        })\n                                });\n\n                            /*\n                             * update the prices\n                             * */\n                            $scope.requestUberMain.getPriceEstimates();\n\n                            /*\n                             * update the etas for the start location only\n                             * */\n                            $scope.requestUberMain.updateTimeEstimates();\n                        }\n                    };\n\n                    $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                        lat = parseFloat(lat).toFixed(10);\n                        lng = parseFloat(lng).toFixed(10);\n\n                        if (formatted_address) {\n                            formatted_address = formatted_address.toString();\n                        }\n\n                        if (lat && lng) {\n                            $scope.requestUberMain.end_latitude = lat;\n                            $scope.requestUberMain.end_longitude = lng;\n                            $scope.requestUberMain.end_formatted_address = formatted_address;\n\n                            $rootScope.map._addMarker(lat, lng, formatted_address);\n                            $scope.drawRoute();\n\n                            /*\n                             * update the prices\n                             * */\n                            $scope.requestUberMain.getPriceEstimates();\n                        }\n                    };\n\n                    $scope.drawRoute = function () {\n                        if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.end_latitude) {\n                            $rootScope.map._setCenter($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude);\n                            $rootScope.map._drawRoute([$scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude], [$scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude])\n                        }\n                    };\n\n                    $scope.startAtMyLocation = function () {\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                    return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                } else {\n                                    return $rootScope.map._getMyPosition($rootScope.map)\n                                        .then(function () {\n                                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                            } else {\n                                                $rootScope.main.showToast('warning', 'Could not find your position');\n                                                return null;\n                                            }\n                                        })\n                                }\n                            })\n                            .then(function (array) {\n                                if (array) {\n                                    $scope.requestUberMain.start_latitude = array[0];\n                                    $scope.requestUberMain.start_longitude = array[1]\n                                } else {\n                                    //do nothing\n                                }\n                                return true;\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                            });\n                    };\n\n                    $scope.endAtMyLocation = function () {\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                    return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                } else {\n                                    return $rootScope.map._getMyPosition($rootScope.map)\n                                        .then(function () {\n                                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                            } else {\n                                                $rootScope.main.showToast('warning', 'Could not find your position');\n                                                return null;\n                                            }\n                                        })\n                                }\n                            })\n                            .then(function (array) {\n                                if (array) {\n                                    $scope.requestUberMain.end_latitude = array[0];\n                                    $scope.requestUberMain.end_longitude = array[1]\n                                } else {\n                                    //do nothing\n                                }\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                            });\n                    };\n                }\n            };\n        }]);","angular.module('app')\n    .controller('uberRideStatusController', ['$rootScope', '$scope', '$http', '$ionicSlideBoxDelegate', function ($rootScope, $scope, $http, $ionicSlideBoxDelegate) {\n\n        $rootScope.main.classes.body = 'rideStatus';\n\n        $scope.uberRideStatusControllerMain = {\n\n            /*\n             * show status by default\n             * */\n            showStatus: true\n        };\n\n        /*\n         * managing the slides\n         * */\n\n        $scope.goToSlide = function (index) {\n            $ionicSlideBoxDelegate.slide(parseInt(index));\n        };\n        $scope.nextSlide = function (index) {\n            $ionicSlideBoxDelegate.next();\n        };\n        $scope.previousSlide = function (index) {\n            $ionicSlideBoxDelegate.previous();\n        };\n\n    }])\n    .directive('uberRideStatusDirective', ['$rootScope', '$http', 'service_rideStatus', '$interval', '$timeout', function ($rootScope, $http, service_rideStatus, $interval, $timeout) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                /*\n                 * clear all markers, then start updating map with new info\n                 * */\n                $rootScope.map._removeAllPresentMarkers();\n\n                /*\n                 * check the uberStatus and keep updating the map with the driver position\n                 * */\n                $scope.uberRideStatusMain = {\n                    rideStatus: null,\n                    driver_latitude: null,\n                    driver_longitude: null,\n                    driver_info_window_marker: null,\n                    start_lat: null,\n                    start_lng: null,\n                    end_lat: null,\n                    end_lng: null,\n\n                    updateUberRequestSandbox: function () {\n                        Promise.resolve()\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'accepted'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(30000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'arriving'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'in_progress'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(45000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'completed'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                return true;\n                            })\n                    }\n                };\n\n                $scope.uberRideStatusMain.updateUberRequestSandbox();\n\n                /*\n                 * watch for the start and end, update on map\n                 * */\n                $timeout(function () {\n                    $scope.$watch(function () {\n                        return $scope.uberRideStatusMain.start_lat;\n                    }, function (val) {\n                        if (val) {\n                            $rootScope.map._addMarker(parseFloat($scope.uberRideStatusMain.start_lat).toFixed(10), parseFloat($scope.uberRideStatusMain.start_lng).toFixed(10));\n                            $rootScope.map._addMarker(parseFloat($scope.uberRideStatusMain.end_lat).toFixed(10), parseFloat($scope.uberRideStatusMain.end_lng).toFixed(10));\n                            /*\n                             * set center to me\n                             * */\n                            $rootScope.map._setCenterToMe();\n                        }\n                    });\n                }, 3000);\n\n                function checkStatus() {\n                    /*\n                     * poll from service\n                     * */\n                    var val = service_rideStatus.rideStatus();\n\n                    if (val) {\n\n                        $scope.uberRideStatusMain.rideStatus = val;\n                        $scope.uberRideStatusMain.start_lat = val.lastRide.startLatitude;\n                        $scope.uberRideStatusMain.start_lng = val.lastRide.startLongitude;\n                        $scope.uberRideStatusMain.end_lat = val.lastRide.endLatitude;\n                        $scope.uberRideStatusMain.end_lng = val.lastRide.endLongitude;\n\n                        /*\n                         * put user's position on map\n                         * */\n                        $rootScope.map._updateUserInfoWindowMarker($rootScope.main.userData.firstName);\n\n                        /*\n                         * set center to driver\n                         * */\n                        if (val.status == 'in_progress') {\n                            $rootScope.map._setCenter($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude);\n                        } else {\n                            $rootScope.map._setCenterToMe();\n                        }\n\n\n                        /*\n                         * start updating the ride status\n                         * */\n\n                        if (val.location) {\n                            $scope.uberRideStatusMain.driver_latitude = parseFloat(val.location.latitude).toFixed(10);\n                            $scope.uberRideStatusMain.driver_longitude = parseFloat(val.location.longitude).toFixed(10);\n\n\n                            /*\n                             * update the cars location\n                             * */\n                            if (!$scope.uberRideStatusMain.driver_info_window_marker) {\n                                $scope.uberRideStatusMain.driver_info_window_marker = $rootScope.map._addInfoWindowMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude, 'Driver');\n                            } else {\n                                $rootScope.map._removeMarker($scope.uberRideStatusMain.driver_info_window_marker);\n                                $scope.uberRideStatusMain.driver_info_window_marker = $rootScope.map._addInfoWindowMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude, 'Driver');\n                            }\n                        }\n                    } else {\n                        /*\n                         * if there is nothing after, then trip is finished\n                         * */\n                        $scope.uberRideStatusMain.rideStatus = null;\n                        if ($rootScope.main && $rootScope.main.userData) {\n                            $rootScope.map._updateUserInfoWindowMarker($rootScope.main.userData.firstName);\n                        }\n                        $rootScope.map._setCenterToMe();\n                    }\n                }\n\n                $timeout(function () {\n                    $interval(function () {\n                        checkStatus();\n                    }, 5000); //update every 5 secs\n                    checkStatus();\n                }, 3000);\n\n            }\n        };\n    }]);","angular.module('app')\n    .controller('indexController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'index';\n    }])\n    .directive('indexnScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n            }\n        };\n    }]);","angular.module('app')\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        return function (resp) {\n\n            if (resp !== null && typeof resp === 'object') {\n                if (resp.redirect) {\n                    if (resp.redirectPage) {\n                        $window.location.href = resp.redirectPage;\n                    }\n\n                    if (resp.redirectState) {\n                        $rootScope.main.changeState(resp.redirectState)\n                    }\n\n                    return;\n                }\n                if (resp.reload) {\n                    $rootScope.main.reloadPage();\n                    return;\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.dialog) {\n                    if (resp.id) {\n                        switch (resp.id) {\n                            case \"not-authorized\":\n                                $rootScope.main.showIonicAlert('Info', 'You are not authorized to be/access this page or resource.');\n                                break;\n                            case \"sign-in\":\n                                $rootScope.main.showIonicAlert('Info', 'Please sign in to continue.')\n                                    .then(function () {\n                                        $rootScope.main.changeState('login')\n                                    });\n                                break;\n                            default:\n                            //do nothing\n                        }\n                        return;\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.signInBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}