{"version":3,"sources":["app.js","universalCtrl.js","account/createAccount.js","account/logout.js","account/signIn.js","banners/bannerDir.js","banners/universalBanner.js","index/index.js","home_core/home_core.js","req/response_filter.js"],"names":["trackDigests","app","run","$rootScope","Promise","setScheduler","cb","$evalAsync","angular","module","config","$stateProvider","$urlRouterProvider","$interpolateProvider","startSymbol","endSymbol","when","otherwise","state","url","templateUrl","views","controllerCol","map","$state","$stateParams","localStorageServiceProvider","setPrefix","setStorageCookieDomain","document","location","hostname","search","setStorageType","controller","$filter","$window","$location","$scope","ngDialog","$anchorScroll","localStorageService","$http","toastr","$interval","main","uberRideStatus","uberRideRequestStatuses","processing","no_drivers_available","accepted","arriving","in_progress","driver_canceled","rider_canceled","completed","getRideStatus","resolve","then","console","log","post","resp","data","responseStatusHandler","err","obj","driver","ratingArray","Array","Math","ceil","rating","JSON","stringify","delay","classes","body","userData","userLocation","latitude","longitude","updateUserLocation","parseFloat","toFixed","getUserData","user","changeState","getCurrentState","current","name","toState","ifInArray","ifNotInArray","currentState","indexOf","go","startIntervalTimer","intervalInMilliseconds","fn","blood_1","blood_2","stopFight","checkLocalStorageSupport","isSupported","checkCookieIsEnabled","cookie","saveToLocalStorage","key","val","object","value","timestamp","Date","getTime","set","getFromLocalStorage","maxAgeSeconds","checkIfExistsOnLocalStorage","get","dateString","now","toString","removeFromLocalStorage","saveKeyToCookie","maxAgeInDays","getKeyFromCookie","removeKeyFromCookie","keys","len","length","exists","i","keyArray","all","clearAll","forEach","remove","goToTop","hash","back","showToast","toastType","text","clear","success","warning","closeButton","tapToDismiss","error","timeOut","clearToasts","redirectToIndex","href","redirectToLogin","reloadPage","reload","redirectToHome","redirectToPage","pathWithFirstSlash","redirectToPreviousPage","window","referrer","showExecuting","message","msg","open","className","overlay","showClose","closeByEscape","closeByDocument","cache","trapFocus","preserveFocus","checkUberRide","$on","event","toParams","fromState","fromParams","$watch","directive","restrict","link","createAccount","details","registrationDetails","password1","password2","createMain","isBusy","email","firstName","lastName","username","redirect","logout","localUserLogin","loginData","loginFormModel","password","signInMain","submitLocalLoginForm","signInBanner","show","bannerClass","banner","registrationBanner","universalBanner","$","matchHeight","byRow","property","target","oldVal","uber","access_token","factory","updateTimer","lat","lng","lastUpdated","calls","$timeout","scope","model","update","$element","element","find","geocomplete","bind","formatted_address","uberConnect","status","getUberAuthorizationUrl","requestUberControllerMain","priceEstimateArray","timeEstimateArray","products","getProducts","_getMyPosition","code","e","$attr","testBoxModel","this","requestUberMain","start_latitude","start_longitude","start_formatted_address","end_latitude","end_longitude","end_formatted_address","product_id","selectedProductPriceEstimate","selectedProduct","changeProductId","newId","product_display_name","product","localized_display_name","toLowerCase","display_name","estimate","requestUber","getPriceEstimate","prices","getTimeEstimate","times","result","updateStartLocation","drawRoute","updateEndLocation","_addMarker","_setCenter","_drawRoute","startAtMyLocation","array","endAtMyLocation","uberRideStatusMain","driver_latitude","driver_longitude","driver_marker","updateUberRequestSandbox","_removeMarker","priceEstimator","resizeMap","css","height","margin","padding-left","resize","GMaps","prototype","reject","geolocate","position","coords","userMarker","title","alert","not_supported","always","addMarker","marker","setMap","setCenter","originArr","destArr","cleanRoute","removeMarkers","origin","destination","travelMode","strokeColor","strokeOpacity","strokeWeight","div","setPosition","google","maps","LatLng","filter","$q","$log","makeBanner","not_authorized_dialog","template","sign_in_dialog","openConfirm","redirectPage","redirectState","notify","type","dialog","id","$broadcast","reason","warn"],"mappings":"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","file":"app.min.js","sourcesContent":["function trackDigests(app) {\n    app.run([\"$rootScope\", function ($rootScope) {\n        Promise.setScheduler(function (cb) {\n            $rootScope.$evalAsync(cb);\n        });\n    }]);\n}\n\n//angular sanitize included in textAngular\nvar app = angular.module('app', [\n    'ngSanitize',\n    'ui.bootstrap',\n    'toastr',\n    'ui.router',\n    'ngDialog',\n    'LocalStorageModule',\n    'angular-loading-bar',\n    'ngAnimate'\n]);\n\napp.config(function ($stateProvider, $urlRouterProvider, $interpolateProvider) {\n    //\n\n    /*symbol to work with express handlebars\n     * */\n    $interpolateProvider.startSymbol('{[{');\n    $interpolateProvider.endSymbol('}]}');\n\n    // For any unmatched url, redirect to /index\n    $urlRouterProvider.when('/home', '/home/welcome');\n    $urlRouterProvider.otherwise(\"/index\");\n\n    $stateProvider\n        .state('index', {\n            url: \"/index\",\n            templateUrl: \"_index.html\"\n        })\n        .state('register', {\n            url: \"/register\",\n            templateUrl: \"_create_account.html\"\n        })\n        .state('login', {\n            url: \"/login\",\n            templateUrl: \"_sign_in.html\"\n        })\n        .state('home', {\n            url: \"/home\",\n            templateUrl: \"_homepage.html\"\n        })\n        .state('home.welcome', {\n            url: \"/welcome\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_welcome.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        })\n        .state('home.requestUber', {\n            url: \"/requestUber\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_request_uber.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        })\n        .state('home.rideStatus', {\n            url: \"/rideStatus\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_ride_status.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        })\n        .state('home.priceEstimator', {\n            url: \"/estimator\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_price_estimates.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        })\n        .state('home.connectToUber', {\n            url: \"/connect\",\n            views: {\n                'controllerCol': {\n                    templateUrl: \"_connect_to_uber.html\"\n                },\n                'map': {\n                    templateUrl: \"_main_map.html\"\n                }\n            }\n        });\n});\n\napp.run(function ($rootScope, $state, $stateParams) {\n    $rootScope.$state = $state;\n    $rootScope.$stateParams = $stateParams;\n});\n\ntrackDigests(app);\n\n/*\n * jquery functions\n * */","angular.module('app')\n    .config(function (localStorageServiceProvider) {\n        localStorageServiceProvider\n            .setPrefix('app')\n            .setStorageCookieDomain(document.location.hostname.search(\"uber\") !== -1 ? 'uber.org' : '')\n            .setStorageType('localStorage');\n    });\n\nangular.module('app')\n    .controller('UniversalController', ['$filter', '$window', '$location', '$scope', '$rootScope', 'ngDialog', '$anchorScroll', 'localStorageService', '$http', '$state', 'toastr', '$interval',\n        function ($filter, $window, $location, $scope, $rootScope, ngDialog, $anchorScroll, localStorageService, $http, $state, toastr, $interval) {\n\n            $rootScope.main = {\n\n                /*\n                 * uberRideStatus will carry the request status of uber after the user\n                 * requests an uber\n                 * */\n                uberRideStatus: null,\n\n                uberRideRequestStatuses: {\n                    processing: \"Processing\",\n                    no_drivers_available: 'No drivers available',\n                    accepted: 'Accepted',\n                    arriving: 'Arriving',\n                    in_progress: 'In progress',\n                    driver_canceled: 'Driver canceled',\n                    rider_canceled: 'Rider canceled',\n                    completed: 'Completed'\n                },\n\n                getRideStatus: function () {\n\n                    return Promise.resolve()\n                        .then(function () {\n                            console.log('checking ride status');\n                            return $http.post('/api/getRideStatus', {})\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp;\n                                })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    throw err;\n                                })\n                        })\n                        .then(function (resp) {\n                            $rootScope.main.uberRideStatus = resp.obj;\n                            /*\n                             * put a rating array for the ng-repeat stars\n                             * */\n                            if (!$rootScope.main.uberRideStatus) return true;\n\n                            if ($rootScope.main.uberRideStatus.driver) {\n                                $rootScope.main.uberRideStatus.driver.ratingArray = new Array(Math.ceil($rootScope.main.uberRideStatus.driver.rating));\n                            }\n                            console.log(JSON.stringify($rootScope.main.uberRideStatus));\n                            return true;\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                        .then(function () {\n                            return Promise.delay(10000) //delay 10 seconds\n                                .then(function () {\n                                    return $rootScope.main.getRideStatus();\n                                });\n\n                        })\n                },\n\n                classes: {\n                    body: 'index'\n                },\n\n                userData: null,\n\n                userLocation: {\n                    latitude: '',\n                    longitude: ''\n                },\n\n                updateUserLocation: function (latitude, longitude) {\n                    $rootScope.main.userLocation.latitude = parseFloat(latitude).toFixed(10);\n                    $rootScope.main.userLocation.longitude = parseFloat(longitude).toFixed(10);\n                },\n\n                getUserData: function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post(\"/api/getUserData\", {})\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp.userData;\n                                })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    throw err;\n                                })\n                        })\n                        .then(function (user) {\n                            if (user) {\n                                $rootScope.main.userData = user;\n                            } else {\n                                $rootScope.main.userData = null;\n                            }\n                            return true;\n                        })\n                        .then(function () {\n                            if (!$rootScope.main.userData) {\n                                $rootScope.main.changeState('index', null, ['index', 'register', 'login']);\n                            } else {\n                                $rootScope.main.changeState('home', ['index', 'register', 'login'], null);\n                            }\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                },\n\n                getCurrentState: function () {\n                    return $state.current.name;\n                },\n\n                changeState: function (toState, ifInArray, ifNotInArray) {\n                    var currentState = $rootScope.main.getCurrentState();\n                    if (ifInArray) {\n                        if (ifInArray.indexOf(currentState) > -1) {\n                            $state.go(toState);\n                        }\n                    } else if (ifNotInArray) {\n                        if (ifNotInArray.indexOf(currentState) == -1) {\n                            $state.go(toState);\n                        }\n                    } else if (toState) {\n                        $state.go(toState);\n                    } else {\n                        //do nothing\n                        return true;\n                    }\n                },\n\n                startIntervalTimer: function (intervalInMilliseconds, fn) {\n                    return $interval(function () {\n                        if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {\n                            $scope.blood_1 = $scope.blood_1 - 3;\n                            $scope.blood_2 = $scope.blood_2 - 4;\n                        } else {\n                            $scope.stopFight();\n                        }\n                    }, 100);\n                },\n\n                checkLocalStorageSupport: function () {\n                    if (localStorageService.isSupported) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n\n                checkCookieIsEnabled: function () {\n                    if (localStorageService.cookie.isSupported) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n\n                saveToLocalStorage: function (key, val) {\n                    var object = {\n                        value: val,\n                        timestamp: new Date().getTime()\n                    };\n                    return localStorageService.set(key, object); //returns a boolean\n                },\n\n                getFromLocalStorage: function (key, maxAgeSeconds) {\n                    if (!maxAgeSeconds) {\n                        maxAgeSeconds = 86400; //default to one day\n                    }\n                    if ($rootScope.main.checkIfExistsOnLocalStorage(key)) {\n                        var object = localStorageService.get(key);\n                        var dateString = object.timestamp;\n                        var now = new Date().getTime().toString();\n                        if (now - dateString > (maxAgeSeconds * 1000)) {\n                            $rootScope.main.removeFromLocalStorage([key]); //remove expired item from local storage\n                            return false;\n                        } else {\n                            return object.value;\n                        }\n                    } else {\n                        return false;\n                    }\n                },\n\n                saveKeyToCookie: function (key, val, maxAgeInDays) {\n                    if (!maxAgeInDays) {\n                        maxAgeInDays = 2; //defaults to 2 day(s)\n                    }\n                    var object = {\n                        value: val,\n                        timestamp: new Date().getTime()\n                    };\n                    object = JSON.stringify(object);\n                    return localStorageService.cookie.set(key, object, maxAgeInDays); //returns a boolean\n                },\n\n                getKeyFromCookie: function (key, maxAgeSeconds) {\n                    if (!maxAgeSeconds) {\n                        maxAgeSeconds = 86400; //default to one day\n                    }\n                    var object = localStorageService.cookie.get(key);\n                    if (object) {\n                        var dateString = object.timestamp;\n                        var now = new Date().getTime().toString();\n                        if ((now - dateString) > (maxAgeSeconds * 1000)) {\n                            $rootScope.main.removeKeyFromCookie(key); //remove expired item from local storage\n                            return false;\n                        } else {\n                            return object.value;\n                        }\n                    } else {\n                        return false;\n                    }\n                },\n\n                checkIfExistsOnLocalStorage: function (key) {\n                    var keys = localStorageService.keys();\n                    var len = keys.length;\n                    var exists = false;\n                    for (var i = 0; i < len; i++) {\n                        if (keys[i] == key) {\n                            exists = true;\n                            break;\n                        }\n                    }\n                    return exists;\n                },\n\n                removeFromLocalStorage: function (keyArray, all) {  //if all is true, it clears all keys\n                    if (all) {\n                        return localStorageService.clearAll();\n                    } else {\n                        keyArray.forEach(function (key) {\n                            localStorageService.remove(key);\n                        });\n                    }\n\n                    return true;\n                },\n\n                removeKeyFromCookie: function (key) {  //if all is true, it clears all keys\n                    return localStorageService.cookie.remove(key);\n                },\n\n                goToTop: function () {\n                    $location.hash('navigation');\n                    $anchorScroll();\n                },\n\n                back: function () {\n                    $rootScope.back();\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                showToast: function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                },\n\n                clearToasts: function () {\n                    toastr.clear();\n                },\n\n                redirectToIndex: function () {\n                    $window.location.href = '/index.app';\n                },\n\n                redirectToLogin: function () {\n                    $window.location.href = '/notLoggedIn';\n                },\n\n                reloadPage: function () {\n                    $window.location.reload();\n                },\n\n                redirectToHome: function () {\n                    $window.location.href = '/';\n                },\n\n                redirectToPage: function (pathWithFirstSlash) {\n                    $window.location.href = pathWithFirstSlash;\n                },\n\n                redirectToPreviousPage: function () {\n                    window.location.href = document.referrer;\n                },\n\n                showExecuting: function (message) {\n                    var msg;\n                    if (!message || typeof message !== 'string' || message.length === 0) {\n                        msg = 'Performing action...';\n                    } else {\n                        msg = message + '...';\n                    }\n\n                    return ngDialog.open({\n                        data: {\n                            message: msg\n                        },\n                        templateUrl: '_executing_dialog',\n                        className: 'ngdialog-theme-default',\n                        overlay: true,\n                        showClose: false,\n                        closeByEscape: false,\n                        closeByDocument: false,\n                        cache: true,\n                        trapFocus: false,\n                        preserveFocus: true\n                    });\n                }\n\n            };\n\n            /*\n             * function checks if the user has requested an uber, if so, it forces the user to remain in the requestUber state\n             * */\n            $scope.checkUberRide = function () {\n                if ($rootScope.main.uberRideStatus) {\n                    $rootScope.main.changeState('home.rideStatus', null, ['home.rideStatus']);\n                }\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.getUserData();\n            });\n\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $scope.checkUberRide();\n            });\n\n\n            $scope.$watch(function () {\n                return $rootScope.main.uberRideStatus\n            }, function () {\n                $scope.checkUberRide();\n            });\n\n            /*\n             * begin polling ride statuses\n             * */\n            $rootScope.main.getRideStatus();\n\n\n        }\n    ]);","angular.module('app')\n    .controller('createAccountController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('createAccountScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.createMain = {\n                    isBusy: false\n                };\n\n                $scope.registrationDetails = {\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    username: \"\",\n                    password1: \"\",\n                    password2: \"\"\n                };\n\n                $scope.createAccount = function (redirect) {\n                    $scope.createMain.isBusy = true;\n                    return createAccount($scope.registrationDetails, redirect)\n                        .then(function () {\n                            $scope.createMain.isBusy = false;\n                        });\n                };\n\n                function createAccount(details) {\n                    return $http.post('/api/createAccount', details)\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            $scope.registrationDetails.password1 = \"\";\n                            $scope.registrationDetails.password2 = \"\";\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('logoutScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.logout = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('api/logoutClient', {}).then(function (resp) {\n                                console.log(resp);\n                                resp = resp.data;\n                                $rootScope.main.responseStatusHandler(resp);\n                                $rootScope.main.userData = null;\n                                return true;\n                            })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    return true;\n                                })\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .controller('signInController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('signInScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.signInMain = {\n                    isBusy: false\n                };\n\n                $scope.loginFormModel = {\n                    username: \"\",\n                    password: \"\"\n                };\n\n                $scope.submitLocalLoginForm = function () {\n                    $scope.signInMain.isBusy = true;\n                    return localUserLogin($scope.loginFormModel)\n                        .then(function () {\n                            $scope.signInMain.isBusy = false;\n                        });\n                };\n\n                function localUserLogin(loginData) {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('/api/localUserLogin', loginData);\n                        })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $scope.loginFormModel.password = \"\";\n                            $rootScope.main.responseStatusHandler(err);\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('signInBannerScope', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.signInBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('signInBanner', function (event, banner) {\n                    $scope.signInBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.signInBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }])\n    .directive('registrationBannerScope', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.registrationBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('registrationBanner', function (event, banner) {\n                    $scope.registrationBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.registrationBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .directive('universalBannerScope', ['$rootScope', 'globals', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .controller('indexController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'index';\n    }])\n    .directive('indexnScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n            }\n        };\n    }]);","angular.module('app')\n    .controller('homeCoreController', ['$rootScope', '$scope', '$http', function ($rootScope, $scope, $http) {\n        $rootScope.main.classes.body = 'homepage';\n\n        /*\n         * match the colum heights\n         * */\n\n        $(\"body .leftCol\").matchHeight({\n            byRow: true,\n            property: 'height',\n            target: $(\"body .mapCol\")\n        });\n\n        $scope.$watch(function () {\n            return $rootScope.main.userData\n        }, function (userData, oldVal) {\n            if (userData) {\n                if (userData.uber.access_token == '') {\n                    $rootScope.main.changeState('home.connectToUber');\n                }\n            }\n        });\n\n    }])\n    .factory(\"LocationService\", function () {\n        var startLocation = {\n            lat: lat,\n            lng: lng\n        };\n\n        var updateTimer = function () {\n            data.lastUpdated = new Date();\n            data.calls += 1;\n            console.log(\"updateTimer: \" + data.lastUpdated);\n\n            $timeout(updateTimer, 500);\n        };\n        updateTimer();\n\n        return {\n            data: data\n        };\n    })\n    .directive('locationSearchBox', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            scope: {\n                model: '=locationModel', //location-model in html\n                update: '&locationUpdate' //location-update in html\n            },\n            templateUrl: '_location_search_box.html',\n            link: function ($scope, $element) {\n                /*\n                 * auto complete for the input.geoFields\n                 * */\n                angular.element($element.find('input.geoField')).geocomplete({\n                    details: angular.element($element.find('.details'))\n                })\n                    .bind(\"geocode:result\", function () {\n                        var lat = angular.element($element.find('.details input.lat')).val();\n                        var lng = angular.element($element.find('.details input.lng')).val();\n                        var formatted_address = angular.element($element.find('.details input.formatted_address')).val();\n\n                        $scope.update(lat, lng, formatted_address);\n                    });\n            }\n        };\n    }])\n    .directive('uberConnect', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.uberConnect = {\n                    isBusy: false,\n                    status: '',\n\n                    getUberAuthorizationUrl: function () {\n\n                        $scope.uberConnect.isBusy = true;\n                        $scope.uberConnect.status = 'Connecting...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                return $http.post('/api/getUberAuthorizationUrl', {})\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.uberConnect.isBusy = false;\n                                $rootScope.main.redirectToPage(resp.url);\n                                return true;\n                            })\n                            .catch(function (err) {\n                                $scope.uberConnect.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    }\n                }\n            }\n        };\n    }])\n    .controller('requestUberController', ['$rootScope', '$scope', '$http', function ($rootScope, $scope, $http) {\n\n        $scope.requestUberControllerMain = {\n\n            /*\n             * priceEstimateArray contains the data obtained from price estimates\n             * including the types of cars available\n             * distance etc\n             * */\n            priceEstimateArray: [],\n\n            /*\n             * timeEstimateArray contains the data obtained from time estimates\n             * */\n            timeEstimateArray: [],\n\n            products: [],\n\n            getProducts: function () {\n\n                var latitude;\n                var longitude;\n\n                return Promise.resolve()\n                    .then(function () {\n                        return $rootScope.map._getMyPosition($rootScope.map);\n                    })\n                    .then(function () {\n                        latitude = $rootScope.main.userLocation.latitude;\n                        longitude = $rootScope.main.userLocation.longitude;\n\n                        if (latitude || longitude) {\n                            return true;\n                        } else {\n                            throw {\n                                code: 600\n                            };\n                        }\n                    })\n                    .then(function () {\n                        return $http.post('/api/getProducts', {\n                            latitude: latitude,\n                            longitude: longitude\n                        })\n                            .then(function (resp) {\n                                resp = resp.data;\n                                $rootScope.main.responseStatusHandler(resp);\n                                return resp;\n                            })\n                            .catch(function (err) {\n                                err = err.data;\n                                $rootScope.main.responseStatusHandler(err);\n                                throw err;\n                            })\n                    })\n                    .then(function (resp) {\n                        $scope.requestUberControllerMain.products = resp.obj.products;\n                        return true;\n                    })\n                    .catch(function (e) {\n                        if (e.code === 600) {\n                            $rootScope.main.showToast('warning', 'We could not determine your precise location to list the available products in your area');\n                        } else {\n                            throw e\n                        }\n                    })\n                    .catch(function (err) {\n                        console.log(err);\n                        return true;\n                    })\n            }\n        };\n\n        $scope.requestUberControllerMain.getProducts();\n\n    }])\n    .directive('requestUberDirective', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.testBoxModel = {\n                    lat: 2,\n                    lng: '',\n                    formatted_address: '',\n                    update: function (lat, lng, formatted_address) {\n                        console.log('yes2');\n                        this.lat = lat;\n                        this.lng = lng;\n                        this.formatted_address = formatted_address;\n                    }\n                };\n\n                $scope.$watch(function () {\n                    return $scope.testBoxModel;\n                }, function (val) {\n                    console.log('$scope.testBoxModel');\n                    console.log(JSON.stringify(val));\n                });\n\n                $scope.requestUberMain = {\n                    isBusy: false,\n                    status: '',\n\n                    start_latitude: '',\n                    start_longitude: '',\n                    start_formatted_address: '',\n                    end_latitude: '',\n                    end_longitude: '',\n                    end_formatted_address: '',\n\n                    product_id: '',\n                    selectedProductPriceEstimate: {}, //holds the selected products price estimates and so forth\n                    selectedProduct: {}, // holds the selected product\n\n                    changeProductId: function (newId, product_display_name) {\n                        if (newId) {\n\n                            $scope.requestUberMain.product_id = newId;\n\n                            //get the selected product\n                            $scope.requestUberControllerMain.products.forEach(function (product) {\n                                if (product.product_id == newId) {\n                                    $scope.requestUberMain.selectedProduct = product;\n                                }\n                            });\n\n\n                            $scope.requestUberControllerMain.priceEstimateArray.forEach(function (product) {\n                                /*\n                                 * since product_ids are most of the times different, here we are\n                                 * using their names to lower case\n                                 * */\n                                if (product.localized_display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                    $scope.requestUberMain.selectedProductPriceEstimate = product;\n                                }\n                            });\n\n                            /*\n                             * put in the estimates from the timeEstimateArray\n                             * */\n                            $scope.requestUberControllerMain.timeEstimateArray.forEach(function (product) {\n                                /*\n                                 * since product_ids are most of the times different, here we are\n                                 * using their names to lower case\n                                 * */\n                                if (product.display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                    $scope.requestUberMain.selectedProduct.estimate = Math.ceil(product.estimate / 60);\n                                }\n                            });\n                        }\n                    },\n\n                    requestUber: function () {\n\n                        $scope.requestUberMain.isBusy = true;\n                        $scope.requestUberMain.status = 'Requesting...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude && $scope.requestUberMain.product_id) {\n                                    return true;\n                                } else {\n                                    throw {\n                                        code: 600\n                                    };\n                                }\n                            })\n                            .then(function () {\n                                return $http.post('/api/requestUber', {\n                                    start_latitude: $scope.requestUberMain.start_latitude,\n                                    start_longitude: $scope.requestUberMain.start_longitude,\n                                    end_latitude: $scope.requestUberMain.end_latitude,\n                                    end_longitude: $scope.requestUberMain.end_longitude,\n                                    product_id: $scope.requestUberMain.product_id\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.requestUberMain.isBusy = false;\n                                /*\n                                 * the uberRide status is continually being checked/polled, no need to call the function here\n                                 * */\n                                /*\n                                 * start getting the ride statuses\n                                 * */\n                                $rootScope.main.getRideStatus();\n                                return true;\n                            })\n                            .catch(function (e) {\n                                if (e.code === 600) {\n                                    $rootScope.main.showToast('warning', 'Some fields are missing');\n                                } else {\n                                    throw e\n                                }\n                                $scope.requestUberMain.isBusy = false;\n                            })\n                            .catch(function (err) {\n                                $scope.requestUberMain.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    },\n\n                    getPriceEstimate: function () {\n\n                        /*\n                         * this is normally fetched when the user chooses the start & end location\n                         * */\n\n                        if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude) {\n\n                            $scope.requestUberMain.isBusy = true;\n                            $scope.requestUberMain.status = 'Getting cost estimates...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    return $http.post('/api/getPriceEstimate', {\n                                        start_latitude: $scope.requestUberMain.start_latitude,\n                                        start_longitude: $scope.requestUberMain.start_longitude,\n                                        end_latitude: $scope.requestUberMain.end_latitude,\n                                        end_longitude: $scope.requestUberMain.end_longitude\n                                    })\n                                        .then(function (resp) {\n                                            resp = resp.data;\n                                            $rootScope.main.responseStatusHandler(resp);\n                                            return resp;\n                                        })\n                                        .catch(function (err) {\n                                            err = err.data;\n                                            $rootScope.main.responseStatusHandler(err);\n                                            throw err;\n                                        })\n                                })\n                                .then(function (resp) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    $scope.requestUberControllerMain.priceEstimateArray = resp.obj.prices;\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.uberConnect.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                })\n                        }\n                    },\n\n                    getTimeEstimate: function () {\n\n                        /*\n                         * this is normally fetched when the user chooses the start location\n                         * */\n\n                        if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude) {\n\n                            $scope.requestUberMain.isBusy = true;\n                            $scope.requestUberMain.status = 'Getting time estimates...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    return $http.post('/api/getTimeEstimate', {\n                                        start_latitude: $scope.requestUberMain.start_latitude,\n                                        start_longitude: $scope.requestUberMain.start_longitude\n                                    })\n                                        .then(function (resp) {\n                                            resp = resp.data;\n                                            $rootScope.main.responseStatusHandler(resp);\n                                            return resp;\n                                        })\n                                        .catch(function (err) {\n                                            err = err.data;\n                                            $rootScope.main.responseStatusHandler(err);\n                                            throw err;\n                                        })\n                                })\n                                .then(function (resp) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    $scope.requestUberControllerMain.timeEstimateArray = resp.obj.times;\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.uberConnect.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                })\n                        }\n                    }\n                };\n\n                /*\n                 * autocomplete for the input.geoFields\n                 * */\n                angular.element('.start input.geoField').geocomplete({\n                    details: \".start .details\"\n                })\n                    .bind(\"geocode:result\", function (event, result) {\n                        var lat = angular.element('.start .details input.lat').val();\n                        var lng = angular.element('.start .details input.lng').val();\n                        var formatted_address = angular.element('.start .details input.formatted_address').val();\n\n                        if (lat && lng) {\n                            $scope.updateStartLocation(lat, lng, formatted_address);\n                            $scope.drawRoute();\n                        }\n                    });\n\n                angular.element('.end input.geoField').geocomplete({\n                    details: \".end .details\"\n                })\n                    .bind(\"geocode:result\", function (event, result) {\n                        var lat = angular.element('.end .details input.lat').val();\n                        var lng = angular.element('.end .details input.lng').val();\n                        var formatted_address = angular.element('.end .details input.formatted_address').val();\n\n                        if (lat && lng) {\n                            $scope.updateEndLocation(lat, lng, formatted_address);\n                            $scope.drawRoute();\n                        }\n                    });\n\n                $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.requestUberMain.start_latitude = lat;\n                        $scope.requestUberMain.start_longitude = lng;\n                        $scope.requestUberMain.start_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $rootScope.map._setCenter(lat, lng);\n\n                        /*\n                         * get the important metadata for uber request decision\n                         * */\n                        $scope.requestUberMain.getPriceEstimate();\n                        $scope.requestUberMain.getTimeEstimate();\n                    }\n                };\n\n                $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.requestUberMain.end_latitude = lat;\n                        $scope.requestUberMain.end_longitude = lng;\n                        $scope.requestUberMain.end_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n\n\n                        /*\n                         * get the important metadata for uber request decision\n                         * */\n                        $scope.requestUberMain.getPriceEstimate();\n                        $scope.requestUberMain.getTimeEstimate();\n                    }\n                };\n\n                $scope.drawRoute = function () {\n                    if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.end_latitude) {\n                        $rootScope.map._setCenter($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude);\n                        $rootScope.map._drawRoute([$scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude], [$scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude])\n                    }\n                };\n\n                $scope.startAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.requestUberMain.start_latitude = array[0];\n                                $scope.requestUberMain.start_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n\n                $scope.endAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.requestUberMain.end_latitude = array[0];\n                                $scope.requestUberMain.end_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n            }\n        };\n    }])\n    .directive('uberRideStatusDirective', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                /*\n                 * check the uberStatus and keep updating the map with the driver position\n                 * */\n                $scope.uberRideStatusMain = {\n                    driver_latitude: null,\n                    driver_longitude: null,\n                    driver_marker: null,\n\n                    updateUberRequestSandbox: function () {\n                        Promise.resolve()\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'accepted'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(60000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'arriving'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'in_progress'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(120000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'completed'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                return true;\n                            })\n                    }\n                };\n\n                /*\n                 * start updating the ride status\n                 * */\n                $scope.uberRideStatusMain.updateUberRequestSandbox();\n\n                $scope.$watch(function () {\n                    return $rootScope.main.uberRideStatus\n                }, function (val) {\n                    if (val.location) {\n                        $scope.uberRideStatusMain.driver_latitude = val.location.latitude;\n                        $scope.uberRideStatusMain.driver_longitude = val.location.longitude;\n\n                        /*\n                         * set user location to same ass driver when in_progress\n                         * */\n                        if (val.status == 'in_progress') {\n                            $rootScope.main.updateUserLocation($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude);\n                            /*\n                             * set center to driver\n                             * */\n                            $rootScope.map._setCenter($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude);\n                        }\n\n\n                        /*\n                         * update the cars location\n                         * */\n                        if (!$scope.uberRideStatusMain.driver_marker) {\n                            $scope.uberRideStatusMain.driver_marker = $rootScope.map._addMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude);\n                        } else {\n                            $rootScope.map._removeMarker($scope.uberRideStatusMain.driver_marker);\n                            $scope.uberRideStatusMain.driver_marker = $rootScope.map._addMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude);\n                        }\n                    }\n                });\n\n            }\n        };\n    }])\n    .controller('priceEstimatorController', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                /*\n                 * priceEstimateArray contains the data obtained from price estimates\n                 * including the types of cars available\n                 * distance etc\n                 * */\n                $scope.priceEstimateArray = [];\n            }\n        };\n    }])\n    .directive('priceEstimatorResults', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                /*\n                 * directive holds the logic for displaying the logic behind the price estimates\n                 * */\n            }\n        };\n    }])\n    .directive('priceEstimator', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.priceEstimator = {\n                    isBusy: false,\n                    status: '',\n\n                    start_latitude: '',\n                    start_longitude: '',\n                    start_formatted_address: '',\n                    end_latitude: '',\n                    end_longitude: '',\n                    end_formatted_address: '',\n\n                    getPriceEstimate: function () {\n\n                        $scope.priceEstimator.isBusy = true;\n                        $scope.priceEstimator.status = 'Calculating...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.start_longitude && $scope.priceEstimator.end_latitude && $scope.priceEstimator.end_longitude) {\n                                    return true;\n                                } else {\n                                    throw {\n                                        code: 600\n                                    };\n                                }\n                            })\n                            .then(function () {\n                                return $http.post('/api/getPriceEstimate', {\n                                    start_latitude: $scope.priceEstimator.start_latitude,\n                                    start_longitude: $scope.priceEstimator.start_longitude,\n                                    end_latitude: $scope.priceEstimator.end_latitude,\n                                    end_longitude: $scope.priceEstimator.end_longitude\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.priceEstimator.isBusy = false;\n                                $scope.priceEstimateArray = resp.obj.prices;\n                                return true;\n                            })\n                            .catch(function (e) {\n                                if (e.code === 600) {\n                                    $rootScope.main.showToast('warning', 'Some fields are missing');\n                                } else {\n                                    throw e\n                                }\n                                $scope.priceEstimator.isBusy = false;\n                            })\n                            .catch(function (err) {\n                                $scope.uberConnect.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    }\n                };\n\n                /*\n                 * autocomplete for the input.geoFields\n                 * */\n                angular.element('.start input.geoField').geocomplete({\n                    details: \".start .details\"\n                })\n                    .bind(\"geocode:result\", function (event, result) {\n                        var lat = angular.element('.start .details input.lat').val();\n                        var lng = angular.element('.start .details input.lng').val();\n                        var formatted_address = angular.element('.start .details input.formatted_address').val();\n\n                        if (lat && lng) {\n                            $scope.updateStartLocation(lat, lng, formatted_address);\n                            $scope.drawRoute();\n                        }\n                    });\n\n                angular.element('.end input.geoField').geocomplete({\n                    details: \".end .details\"\n                })\n                    .bind(\"geocode:result\", function (event, result) {\n                        var lat = angular.element('.end .details input.lat').val();\n                        var lng = angular.element('.end .details input.lng').val();\n                        var formatted_address = angular.element('.end .details input.formatted_address').val();\n\n                        if (lat && lng) {\n                            $scope.updateEndLocation(lat, lng, formatted_address);\n                            $scope.drawRoute();\n                        }\n                    });\n\n                $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.start_latitude = lat;\n                        $scope.priceEstimator.start_longitude = lng;\n                        $scope.priceEstimator.start_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $rootScope.map._setCenter(lat, lng);\n                    }\n                };\n\n                $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.end_latitude = lat;\n                        $scope.priceEstimator.end_longitude = lng;\n                        $scope.priceEstimator.end_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                    }\n                };\n\n                $scope.drawRoute = function () {\n                    if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.end_latitude) {\n                        $rootScope.map._setCenter($scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude);\n                        $rootScope.map._drawRoute([$scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude], [$scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude])\n                    }\n                };\n\n                $scope.startAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.start_latitude = array[0];\n                                $scope.priceEstimator.start_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n\n                $scope.endAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.end_latitude = array[0];\n                                $scope.priceEstimator.end_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n            }\n        };\n    }])\n    .directive('priceEstimatorDirective', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n            }\n        };\n    }])\n    .controller('mainMapController', ['$rootScope', '$http', '$scope', function ($rootScope, $http, $scope) {\n\n        function resizeMap() {\n            angular.element(\"body.homepage #map\").css({\n                \"height\": angular.element(window).height() - angular.element(\"homepage main-navigation\").height(),\n                \"margin\": 0,\n                \"padding-left\": 0\n            });\n        }\n\n        resizeMap();\n\n        angular.element(window).resize(function () {\n            resizeMap();\n        });\n\n        GMaps.prototype._getMyPosition = function (map) {\n            /*\n             * if userLocation is found, the universalController object is updated with the user location\n             * */\n            return new Promise(function (resolve, reject) {\n                GMaps.geolocate({\n                    success: function (position) {\n                        $rootScope.main.updateUserLocation(position.coords.latitude, position.coords.longitude);\n                        map._setCenter(position.coords.latitude, position.coords.longitude);\n\n                        /*\n                         * set 2 default markers\n                         * */\n\n                        userMarker = map._addMarker({\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                            title: ''\n                        });\n                    },\n                    error: function (error) {\n                        alert('Geolocation failed: ' + error.message);\n                    },\n                    not_supported: function () {\n                        alert(\"Your browser does not support geolocation\");\n                    },\n                    always: function () {\n                        resolve(true);\n                    }\n                });\n            })\n        };\n\n        GMaps.prototype._addMarker = function (lat, lng, title) {\n            return this.addMarker({\n                lat: lat,\n                lng: lng,\n                title: title || ''\n            })\n        };\n\n        GMaps.prototype._removeMarker = function (marker) {\n            marker.setMap(null);\n        };\n\n        GMaps.prototype._setCenter = function (lat, lng) {\n            this.setCenter(lat, lng);\n        };\n\n        GMaps.prototype._drawRoute = function (originArr, destArr) {\n            if (!originArr || !destArr) return;\n            if (originArr.length < 2 || destArr.length < 2) return;\n            this.cleanRoute();\n            this.removeMarkers();\n\n            this.addMarker({lat: originArr[0], lng: originArr[1]});\n            this.addMarker({lat: destArr[0], lng: destArr[1]});\n\n            this.drawRoute({\n                origin: originArr,\n                destination: destArr,\n                travelMode: 'driving',\n                strokeColor: '#09091A',\n                strokeOpacity: 0.6,\n                strokeWeight: 6\n            });\n        };\n\n        $rootScope.map = new GMaps({\n            div: '#map',\n            lat: -12.043333,\n            lng: -77.028333\n        });\n\n        var userMarker;\n        $scope.$watch(function () {\n            return $rootScope.main.userLocation.latitude;\n        }, function () {\n            if (userMarker) {\n                userMarker.setPosition(new google.maps.LatLng($rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude));\n            }\n        });\n\n        $rootScope.map._getMyPosition($rootScope.map);\n    }]);","angular.module('app')\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', 'ngDialog', function ($q, $log, $window, $rootScope, ngDialog) {\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                };\n            }\n\n            if (resp !== null && typeof resp === 'object') {\n                if (resp.redirect) {\n                    if (resp.redirectPage) {\n                        $window.location.href = resp.redirectPage;\n                    }\n\n                    if (resp.redirectState) {\n                        $rootScope.main.changeState(resp.redirectState)\n                    }\n                }\n                if (resp.reload) {\n                    $rootScope.main.reloadPage();\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.main.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.dialog) {\n                    if (resp.id) {\n                        switch (resp.id) {\n                            case \"not-authorized\":\n                                not_authorized_dialog();\n                                break;\n                            case \"sign-in\":\n                                sign_in_dialog(resp.msg);\n                                break;\n                            default:\n                            //do nothing\n                        }\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.signInBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('signInBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n\n            function not_authorized_dialog() {\n                ngDialog.open({\n                    template: '/dialog/not-authorized.html',\n                    className: 'ngdialog-theme-default',\n                    overlay: true,\n                    showClose: false,\n                    closeByEscape: true,\n                    closeByDocument: true,\n                    cache: false,\n                    trapFocus: true,\n                    preserveFocus: true\n                });\n            }\n\n            function sign_in_dialog(message) {\n                ngDialog.openConfirm({\n                    data: {\n                        message: message\n                    },\n                    template: '/dialog/sign-in.html',\n                    className: 'ngdialog-theme-default',\n                    overlay: true,\n                    showClose: false,\n                    closeByEscape: false,\n                    closeByDocument: false,\n                    cache: true,\n                    trapFocus: true,\n                    preserveFocus: true\n                }).then(function () {\n                    $rootScope.main.redirectToPage('/notLoggedIn');\n                }, function () {\n                    $rootScope.main.redirectToPage('/about');\n                });\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}