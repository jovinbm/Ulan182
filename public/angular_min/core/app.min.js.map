{"version":3,"sources":["app.js","universalCtrl.js","account/createAccount.js","account/logout.js","account/signIn.js","banners/bannerDir.js","banners/universalBanner.js","home_core/home_core.js","req/response_filter.js","index/index.js"],"names":["trackDigests","app","run","$rootScope","Promise","setScheduler","cb","$evalAsync","angular","module","config","$stateProvider","$urlRouterProvider","$interpolateProvider","startSymbol","endSymbol","when","otherwise","state","url","templateUrl","uiGmapGoogleMapApiProvider","configure","v","libraries","$state","$stateParams","localStorageServiceProvider","setPrefix","setStorageCookieDomain","document","location","hostname","search","setStorageType","controller","$filter","$window","$location","$scope","ngDialog","$anchorScroll","localStorageService","$http","toastr","$interval","main","classes","body","userData","userLocation","latitude","longitude","updateUserLocation","parseFloat","toFixed","getUserData","resolve","then","post","resp","data","responseStatusHandler","err","user","changeState","console","log","getCurrentState","current","name","toState","ifInArray","ifNotInArray","currentState","indexOf","go","startIntervalTimer","intervalInMilliseconds","fn","blood_1","blood_2","stopFight","checkLocalStorageSupport","isSupported","checkCookieIsEnabled","cookie","saveToLocalStorage","key","val","object","value","timestamp","Date","getTime","set","getFromLocalStorage","maxAgeSeconds","checkIfExistsOnLocalStorage","get","dateString","now","toString","removeFromLocalStorage","saveKeyToCookie","maxAgeInDays","JSON","stringify","getKeyFromCookie","removeKeyFromCookie","keys","len","length","exists","i","keyArray","all","clearAll","forEach","remove","goToTop","hash","back","showToast","toastType","text","clear","success","warning","closeButton","tapToDismiss","error","timeOut","clearToasts","redirectToIndex","href","redirectToLogin","reloadPage","reload","redirectToHome","redirectToPage","pathWithFirstSlash","redirectToPreviousPage","window","referrer","showExecuting","message","msg","open","className","overlay","showClose","closeByEscape","closeByDocument","cache","trapFocus","preserveFocus","$on","event","toParams","fromState","fromParams","directive","restrict","link","createAccount","details","registrationDetails","password1","password2","createMain","isBusy","email","firstName","lastName","username","redirect","logout","localUserLogin","loginData","loginFormModel","password","signInMain","submitLocalLoginForm","signInBanner","show","bannerClass","banner","registrationBanner","universalBanner","$","matchHeight","byRow","property","target","$watch","oldVal","uber","access_token","uberConnect","status","getUberAuthorizationUrl","requestUberControllerMain","uberRideStatus","priceEstimateArray","timeEstimateArray","products","getProducts","map","getMyPosition","code","obj","e","$element","$attr","requestUberMain","start_latitude","start_longitude","start_formatted_address","end_latitude","end_longitude","end_formatted_address","product_id","selectedProductPriceEstimate","selectedProduct","changeProductId","newId","product_display_name","product","localized_display_name","toLowerCase","display_name","estimate","Math","ceil","requestUber","getRideStatus","delay","getPriceEstimate","prices","getTimeEstimate","times","element","geocomplete","detailsAttribute","bind","result","lat","geometry","J","lng","M","formatted_address","updateStartLocation","drawRoute","updateEndLocation","addMarker","startAtMyLocation","array","endAtMyLocation","priceEstimator","resizeMap","css","height","margin","padding-left","resize","GMaps","div","reject","geolocate","position","coords","setCenter","title","alert","not_supported","always","originArr","destArray","cleanRoute","removeMarkers","origin","destination","travelMode","strokeColor","strokeOpacity","strokeWeight","filter","$q","$log","makeBanner","not_authorized_dialog","template","sign_in_dialog","openConfirm","redirectPage","redirectState","notify","type","dialog","id","$broadcast","reason","warn"],"mappings":"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","file":"app.min.js","sourcesContent":["function trackDigests(app) {\n    app.run([\"$rootScope\", function ($rootScope) {\n        Promise.setScheduler(function (cb) {\n            $rootScope.$evalAsync(cb);\n        });\n    }]);\n}\n\n//angular sanitize included in textAngular\nvar app = angular.module('app', [\n    'ngSanitize',\n    'ui.bootstrap',\n    'toastr',\n    'ui.router',\n    'ngDialog',\n    'LocalStorageModule',\n    'angular-loading-bar',\n    'ngAnimate',\n    'uiGmapgoogle-maps'\n]);\n\napp.config(function ($stateProvider, $urlRouterProvider, $interpolateProvider) {\n    //\n\n    /*symbol to work with express handlebars\n     * */\n    $interpolateProvider.startSymbol('{[{');\n    $interpolateProvider.endSymbol('}]}');\n\n    // For any unmatched url, redirect to /index\n    $urlRouterProvider.when('/home', '/home/welcome');\n    $urlRouterProvider.otherwise(\"/index\");\n\n    $stateProvider\n        .state('index', {\n            url: \"/index\",\n            templateUrl: \"_index.html\"\n        })\n        .state('register', {\n            url: \"/register\",\n            templateUrl: \"_create_account.html\"\n        })\n        .state('login', {\n            url: \"/login\",\n            templateUrl: \"_sign_in.html\"\n        })\n        .state('home', {\n            url: \"/home\",\n            templateUrl: \"_homepage.html\"\n        })\n        .state('home.welcome', {\n            url: \"/welcome\",\n            templateUrl: \"_welcome.html\"\n        })\n        .state('home.requestUber', {\n            url: \"/requestUber\",\n            templateUrl: \"_request_uber.html\"\n        })\n        .state('home.rideStatus', {\n            url: \"/rideStatus\",\n            templateUrl: \"_ride_status.html\"\n        })\n        .state('home.priceEstimator', {\n            url: \"/estimator\",\n            templateUrl: \"_price_estimates.html\"\n        })\n        .state('home.connectToUber', {\n            url: \"/connect\",\n            templateUrl: \"_connect_to_uber.html\"\n        });\n});\n\napp.config(function(uiGmapGoogleMapApiProvider) {\n    uiGmapGoogleMapApiProvider.configure({\n        v: '3.20', //defaults to latest 3.X anyhow\n        libraries: 'weather,geometry,visualization'\n    });\n});\n\napp.run(function ($rootScope, $state, $stateParams) {\n    $rootScope.$state = $state;\n    $rootScope.$stateParams = $stateParams;\n});\n\ntrackDigests(app);\n\n/*\n * jquery functions\n * */","angular.module('app')\n    .config(function (localStorageServiceProvider) {\n        localStorageServiceProvider\n            .setPrefix('app')\n            .setStorageCookieDomain(document.location.hostname.search(\"uber\") !== -1 ? 'uber.org' : '')\n            .setStorageType('localStorage');\n    });\n\nangular.module('app')\n    .controller('UniversalController', ['$filter', '$window', '$location', '$scope', '$rootScope', 'ngDialog', '$anchorScroll', 'localStorageService', '$http', '$state', 'toastr', '$interval',\n        function ($filter, $window, $location, $scope, $rootScope, ngDialog, $anchorScroll, localStorageService, $http, $state, toastr, $interval) {\n\n            $rootScope.main = {\n\n                classes: {\n                    body: 'index'\n                },\n\n                userData: null,\n\n                userLocation: {\n                    latitude: '',\n                    longitude: ''\n                },\n\n                updateUserLocation: function (latitude, longitude) {\n                    $rootScope.main.userLocation.latitude = parseFloat(latitude).toFixed(10);\n                    $rootScope.main.userLocation.longitude = parseFloat(longitude).toFixed(10);\n                },\n\n                getUserData: function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post(\"/api/getUserData\", {})\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp.userData;\n                                })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    throw err;\n                                })\n                        })\n                        .then(function (user) {\n                            if (user) {\n                                $rootScope.main.userData = user;\n                            } else {\n                                $rootScope.main.userData = null;\n                            }\n                            return true;\n                        })\n                        .then(function () {\n                            if (!$rootScope.main.userData) {\n                                $rootScope.main.changeState('index', null, ['index', 'register', 'login']);\n                            } else {\n                                $rootScope.main.changeState('home', ['index', 'register', 'login'], null);\n                            }\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                },\n\n                getCurrentState: function () {\n                    return $state.current.name;\n                },\n\n                changeState: function (toState, ifInArray, ifNotInArray) {\n                    var currentState = $rootScope.main.getCurrentState();\n                    if (ifInArray) {\n                        if (ifInArray.indexOf(currentState) > -1) {\n                            $state.go(toState);\n                        }\n                    } else if (ifNotInArray) {\n                        if (ifNotInArray.indexOf(currentState) == -1) {\n                            $state.go(toState);\n                        }\n                    } else if (toState) {\n                        $state.go(toState);\n                    } else {\n                        //do nothing\n                        return true;\n                    }\n                },\n\n                startIntervalTimer: function (intervalInMilliseconds, fn) {\n                    return $interval(function () {\n                        if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {\n                            $scope.blood_1 = $scope.blood_1 - 3;\n                            $scope.blood_2 = $scope.blood_2 - 4;\n                        } else {\n                            $scope.stopFight();\n                        }\n                    }, 100);\n                },\n\n                checkLocalStorageSupport: function () {\n                    if (localStorageService.isSupported) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n\n                checkCookieIsEnabled: function () {\n                    if (localStorageService.cookie.isSupported) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                },\n\n                saveToLocalStorage: function (key, val) {\n                    var object = {\n                        value: val,\n                        timestamp: new Date().getTime()\n                    };\n                    return localStorageService.set(key, object); //returns a boolean\n                },\n\n                getFromLocalStorage: function (key, maxAgeSeconds) {\n                    if (!maxAgeSeconds) {\n                        maxAgeSeconds = 86400; //default to one day\n                    }\n                    if ($rootScope.main.checkIfExistsOnLocalStorage(key)) {\n                        var object = localStorageService.get(key);\n                        var dateString = object.timestamp;\n                        var now = new Date().getTime().toString();\n                        if (now - dateString > (maxAgeSeconds * 1000)) {\n                            $rootScope.main.removeFromLocalStorage([key]); //remove expired item from local storage\n                            return false;\n                        } else {\n                            return object.value;\n                        }\n                    } else {\n                        return false;\n                    }\n                },\n\n                saveKeyToCookie: function (key, val, maxAgeInDays) {\n                    if (!maxAgeInDays) {\n                        maxAgeInDays = 2; //defaults to 2 day(s)\n                    }\n                    var object = {\n                        value: val,\n                        timestamp: new Date().getTime()\n                    };\n                    object = JSON.stringify(object);\n                    return localStorageService.cookie.set(key, object, maxAgeInDays); //returns a boolean\n                },\n\n                getKeyFromCookie: function (key, maxAgeSeconds) {\n                    if (!maxAgeSeconds) {\n                        maxAgeSeconds = 86400; //default to one day\n                    }\n                    var object = localStorageService.cookie.get(key);\n                    if (object) {\n                        var dateString = object.timestamp;\n                        var now = new Date().getTime().toString();\n                        if ((now - dateString) > (maxAgeSeconds * 1000)) {\n                            $rootScope.main.removeKeyFromCookie(key); //remove expired item from local storage\n                            return false;\n                        } else {\n                            return object.value;\n                        }\n                    } else {\n                        return false;\n                    }\n                },\n\n                checkIfExistsOnLocalStorage: function (key) {\n                    var keys = localStorageService.keys();\n                    var len = keys.length;\n                    var exists = false;\n                    for (var i = 0; i < len; i++) {\n                        if (keys[i] == key) {\n                            exists = true;\n                            break;\n                        }\n                    }\n                    return exists;\n                },\n\n                removeFromLocalStorage: function (keyArray, all) {  //if all is true, it clears all keys\n                    if (all) {\n                        return localStorageService.clearAll();\n                    } else {\n                        keyArray.forEach(function (key) {\n                            localStorageService.remove(key);\n                        });\n                    }\n\n                    return true;\n                },\n\n                removeKeyFromCookie: function (key) {  //if all is true, it clears all keys\n                    return localStorageService.cookie.remove(key);\n                },\n\n                goToTop: function () {\n                    $location.hash('navigation');\n                    $anchorScroll();\n                },\n\n                back: function () {\n                    $rootScope.back();\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                showToast: function (toastType, text) {\n                    switch (toastType) {\n                        case \"success\":\n                            toastr.clear();\n                            toastr.success(text);\n                            break;\n                        case \"warning\":\n                            toastr.clear();\n                            toastr.warning(text, 'Warning', {\n                                closeButton: true,\n                                tapToDismiss: true\n                            });\n                            break;\n                        case \"error\":\n                            toastr.clear();\n                            toastr.error(text, 'Error', {\n                                closeButton: true,\n                                tapToDismiss: true,\n                                timeOut: false\n                            });\n                            break;\n                        default:\n                            //clears current list of toasts\n                            toastr.clear();\n                    }\n                },\n\n                clearToasts: function () {\n                    toastr.clear();\n                },\n\n                redirectToIndex: function () {\n                    $window.location.href = '/index.app';\n                },\n\n                redirectToLogin: function () {\n                    $window.location.href = '/notLoggedIn';\n                },\n\n                reloadPage: function () {\n                    $window.location.reload();\n                },\n\n                redirectToHome: function () {\n                    $window.location.href = '/';\n                },\n\n                redirectToPage: function (pathWithFirstSlash) {\n                    $window.location.href = pathWithFirstSlash;\n                },\n\n                redirectToPreviousPage: function () {\n                    window.location.href = document.referrer;\n                },\n\n                showExecuting: function (message) {\n                    var msg;\n                    if (!message || typeof message !== 'string' || message.length === 0) {\n                        msg = 'Performing action...';\n                    } else {\n                        msg = message + '...';\n                    }\n\n                    return ngDialog.open({\n                        data: {\n                            message: msg\n                        },\n                        templateUrl: '_executing_dialog',\n                        className: 'ngdialog-theme-default',\n                        overlay: true,\n                        showClose: false,\n                        closeByEscape: false,\n                        closeByDocument: false,\n                        cache: true,\n                        trapFocus: false,\n                        preserveFocus: true\n                    });\n                }\n\n            };\n\n            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.getUserData();\n            })\n\n\n        }\n    ]);","angular.module('app')\n    .controller('createAccountController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('createAccountScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.createMain = {\n                    isBusy: false\n                };\n\n                $scope.registrationDetails = {\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    username: \"\",\n                    password1: \"\",\n                    password2: \"\"\n                };\n\n                $scope.createAccount = function (redirect) {\n                    $scope.createMain.isBusy = true;\n                    return createAccount($scope.registrationDetails, redirect)\n                        .then(function () {\n                            $scope.createMain.isBusy = false;\n                        });\n                };\n\n                function createAccount(details) {\n                    return $http.post('/api/createAccount', details)\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            $scope.registrationDetails.password1 = \"\";\n                            $scope.registrationDetails.password2 = \"\";\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('logoutScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.logout = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('api/logoutClient', {}).then(function (resp) {\n                                console.log(resp);\n                                resp = resp.data;\n                                $rootScope.main.responseStatusHandler(resp);\n                                $rootScope.main.userData = null;\n                                return true;\n                            })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    return true;\n                                })\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .controller('signInController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('signInScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.signInMain = {\n                    isBusy: false\n                };\n\n                $scope.loginFormModel = {\n                    username: \"\",\n                    password: \"\"\n                };\n\n                $scope.submitLocalLoginForm = function () {\n                    $scope.signInMain.isBusy = true;\n                    return localUserLogin($scope.loginFormModel)\n                        .then(function () {\n                            $scope.signInMain.isBusy = false;\n                        });\n                };\n\n                function localUserLogin(loginData) {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('/api/localUserLogin', loginData);\n                        })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $scope.loginFormModel.password = \"\";\n                            $rootScope.main.responseStatusHandler(err);\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('signInBannerScope', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.signInBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('signInBanner', function (event, banner) {\n                    $scope.signInBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.signInBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }])\n    .directive('registrationBannerScope', ['$rootScope', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.registrationBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('registrationBanner', function (event, banner) {\n                    $scope.registrationBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.registrationBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .directive('universalBannerScope', ['$rootScope', 'globals', function ($rootScope) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.universalBanner = {\n                    show: false,\n                    bannerClass: \"\",\n                    msg: \"\"\n                };\n\n                $rootScope.$on('universalBanner', function (event, banner) {\n                    $scope.universalBanner = banner;\n                });\n\n                $rootScope.$on('clearBanners', function () {\n                    $scope.universalBanner = {\n                        show: false,\n                        bannerClass: \"\",\n                        msg: \"\"\n                    };\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .controller('homeCoreController', ['$rootScope', '$scope', '$http', function ($rootScope, $scope, $http) {\n        $rootScope.main.classes.body = 'homepage';\n\n        /*\n         * match the colum heights\n         * */\n\n        $(\"body .leftCol\").matchHeight({\n            byRow: true,\n            property: 'height',\n            target: $(\"body .mapCol\")\n        });\n\n        $scope.$watch(function () {\n            return $rootScope.main.userData\n        }, function (userData, oldVal) {\n            if (userData) {\n                if (userData.uber.access_token == '') {\n                    $rootScope.main.changeState('home.connectToUber');\n                }\n            }\n        });\n\n    }])\n    .directive('homeCoreScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n            }\n        };\n    }])\n    .directive('uberConnect', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.uberConnect = {\n                    isBusy: false,\n                    status: '',\n\n                    getUberAuthorizationUrl: function () {\n\n                        $scope.uberConnect.isBusy = true;\n                        $scope.uberConnect.status = 'Connecting...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                return $http.post('/api/getUberAuthorizationUrl', {})\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.uberConnect.isBusy = false;\n                                $rootScope.main.redirectToPage(resp.url);\n                                return true;\n                            })\n                            .catch(function (err) {\n                                $scope.uberConnect.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    }\n                }\n            }\n        };\n    }])\n    .controller('requestUberController', ['$rootScope', '$scope', '$http', function ($rootScope, $scope, $http) {\n\n        $scope.requestUberControllerMain = {\n\n            /*\n             * uberRideStatus will carry the request status of uber after the user\n             * requests an uber\n             * */\n            uberRideStatus: false,\n\n            /*\n             * priceEstimateArray contains the data obtained from price estimates\n             * including the types of cars available\n             * distance etc\n             * */\n            priceEstimateArray: [],\n\n            /*\n             * timeEstimateArray contains the data obtained from time estimates\n             * */\n            timeEstimateArray: [],\n\n            products: [],\n\n            getProducts: function () {\n\n                var latitude;\n                var longitude;\n\n                return Promise.resolve()\n                    .then(function () {\n                        return $rootScope.map.getMyPosition();\n                    })\n                    .then(function () {\n                        latitude = $rootScope.main.userLocation.latitude;\n                        longitude = $rootScope.main.userLocation.longitude;\n\n                        if (latitude || longitude) {\n                            return true;\n                        } else {\n                            throw {\n                                code: 600\n                            };\n                        }\n                    })\n                    .then(function () {\n                        return $http.post('/api/getProducts', {\n                            latitude: latitude,\n                            longitude: longitude\n                        })\n                            .then(function (resp) {\n                                resp = resp.data;\n                                $rootScope.main.responseStatusHandler(resp);\n                                return resp;\n                            })\n                            .catch(function (err) {\n                                err = err.data;\n                                $rootScope.main.responseStatusHandler(err);\n                                throw err;\n                            })\n                    })\n                    .then(function (resp) {\n                        $scope.requestUberControllerMain.products = resp.obj.products;\n                        return true;\n                    })\n                    .catch(function (e) {\n                        if (e.code === 600) {\n                            $rootScope.main.showToast('warning', 'We could not determine your precise location to list the available products in your area');\n                        } else {\n                            throw e\n                        }\n                    })\n                    .catch(function (err) {\n                        console.log(err);\n                        return true;\n                    })\n            }\n        };\n\n        $scope.requestUberControllerMain.getProducts();\n\n    }])\n    .directive('requestUberDirective', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.requestUberMain = {\n                    isBusy: false,\n                    status: '',\n\n                    start_latitude: '',\n                    start_longitude: '',\n                    start_formatted_address: '',\n                    end_latitude: '',\n                    end_longitude: '',\n                    end_formatted_address: '',\n\n                    product_id: '',\n                    selectedProductPriceEstimate: {}, //holds the selected products price estimates and so forth\n                    selectedProduct: {}, // holds the selected product\n\n                    changeProductId: function (newId, product_display_name) {\n                        if (newId) {\n                            $scope.requestUberMain.product_id = newId;\n\n                            //get the selected product\n                            $scope.requestUberControllerMain.products.forEach(function (product) {\n                                if (product.product_id == newId) {\n                                    $scope.requestUberMain.selectedProduct = product;\n                                }\n                            });\n\n                            $scope.requestUberControllerMain.priceEstimateArray.forEach(function (product) {\n                                /*\n                                 * since product_ids are most of the times different, here we are\n                                 * using their names to lower case\n                                 * */\n                                if (product.localized_display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                    $scope.requestUberMain.selectedProductPriceEstimate = product;\n                                }\n                            });\n\n                            /*\n                             * put in the estimates from the timeEstimateArray\n                             * */\n                            $scope.requestUberControllerMain.timeEstimateArray.forEach(function (product) {\n                                /*\n                                 * since product_ids are most of the times different, here we are\n                                 * using their names to lower case\n                                 * */\n                                if (product.display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                    $scope.requestUberMain.selectedProduct.estimate = Math.ceil(product.estimate / 60);\n                                }\n                            });\n                        }\n                    },\n\n                    requestUber: function () {\n\n                        $scope.requestUberMain.isBusy = true;\n                        $scope.requestUberMain.status = 'Requesting...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude && $scope.requestUberMain.product_id) {\n                                    return true;\n                                } else {\n                                    throw {\n                                        code: 600\n                                    };\n                                }\n                            })\n                            .then(function () {\n                                return $http.post('/api/requestUber', {\n                                    start_latitude: $scope.requestUberMain.start_latitude,\n                                    start_longitude: $scope.requestUberMain.start_longitude,\n                                    end_latitude: $scope.requestUberMain.end_latitude,\n                                    end_longitude: $scope.requestUberMain.end_longitude,\n                                    product_id: $scope.requestUberMain.product_id\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.requestUberMain.isBusy = false;\n                                $scope.requestUberControllerMain.uberRideStatus = resp.obj;\n                                console.log(JSON.stringify($scope.requestUberControllerMain.uberRideStatus));\n                                /*\n                                 * start getting the ride statuses\n                                 * */\n                                $scope.requestUberMain.getRideStatus();\n                                return true;\n                            })\n                            .catch(function (e) {\n                                if (e.code === 600) {\n                                    $rootScope.main.showToast('warning', 'Some fields are missing');\n                                } else {\n                                    throw e\n                                }\n                                $scope.requestUberMain.isBusy = false;\n                            })\n                            .catch(function (err) {\n                                $scope.requestUberMain.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    },\n\n                    getRideStatus: function () {\n\n                        return Promise.resolve()\n                            .then(function () {\n                                console.log('checking ride status');\n                                return $http.post('/api/getRideStatus', {})\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.requestUberMain.isBusy = false;\n                                $scope.requestUberControllerMain.uberRideStatus = resp.obj;\n                                console.log(JSON.stringify($scope.requestUberControllerMain.uberRideStatus));\n                                return true;\n                            })\n                            .catch(function (err) {\n                                $scope.requestUberMain.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                            .then(function () {\n                                return Promise.delay(10000) //delay 10 seconds\n                                    .then(function () {\n                                        return $scope.requestUberMain.getRideStatus();\n                                    });\n\n                            })\n                    },\n\n                    getPriceEstimate: function () {\n\n                        if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude) {\n\n                            $scope.requestUberMain.isBusy = true;\n                            $scope.requestUberMain.status = 'Getting cost estimates...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    return $http.post('/api/getPriceEstimate', {\n                                        start_latitude: $scope.requestUberMain.start_latitude,\n                                        start_longitude: $scope.requestUberMain.start_longitude,\n                                        end_latitude: $scope.requestUberMain.end_latitude,\n                                        end_longitude: $scope.requestUberMain.end_longitude\n                                    })\n                                        .then(function (resp) {\n                                            resp = resp.data;\n                                            $rootScope.main.responseStatusHandler(resp);\n                                            return resp;\n                                        })\n                                        .catch(function (err) {\n                                            err = err.data;\n                                            $rootScope.main.responseStatusHandler(err);\n                                            throw err;\n                                        })\n                                })\n                                .then(function (resp) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    $scope.requestUberControllerMain.priceEstimateArray = resp.obj.prices;\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.uberConnect.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                })\n                        }\n                    },\n\n                    getTimeEstimate: function () {\n\n                        if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude) {\n\n                            $scope.requestUberMain.isBusy = true;\n                            $scope.requestUberMain.status = 'Getting time estimates...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    return $http.post('/api/getTimeEstimate', {\n                                        start_latitude: $scope.requestUberMain.start_latitude,\n                                        start_longitude: $scope.requestUberMain.start_longitude\n                                    })\n                                        .then(function (resp) {\n                                            resp = resp.data;\n                                            $rootScope.main.responseStatusHandler(resp);\n                                            return resp;\n                                        })\n                                        .catch(function (err) {\n                                            err = err.data;\n                                            $rootScope.main.responseStatusHandler(err);\n                                            throw err;\n                                        })\n                                })\n                                .then(function (resp) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    $scope.requestUberControllerMain.timeEstimateArray = resp.obj.times;\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.uberConnect.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                })\n                        }\n                    }\n                };\n\n                /*\n                 * autocomplete for the input.geoFields\n                 * */\n                angular.element('.start input.geoField').geocomplete({\n                    details: \".start .details\",\n                    detailsAttribute: \"data-geo\"\n                })\n                    .bind(\"geocode:result\", function (event, result) {\n                        var lat = result.geometry.location.J;\n                        var lng = result.geometry.location.M;\n                        var formatted_address = result.formatted_address;\n\n                        if (lat && lng) {\n                            $scope.updateStartLocation(lat, lng, formatted_address);\n                            //update the map and price estimate to current route\n                            $scope.drawRoute();\n                            $scope.requestUberMain.getPriceEstimate();\n                            $scope.requestUberMain.getTimeEstimate();\n                        }\n                    });\n                angular.element('.end input.geoField').geocomplete({\n                    details: \".end .details\",\n                    detailsAttribute: \"data-geo\"\n                })\n                    .bind(\"geocode:result\", function (event, result) {\n                        var lat = result.geometry.location.J;\n                        var lng = result.geometry.location.M;\n                        var formatted_address = result.formatted_address;\n\n                        if (lat && lng) {\n                            $scope.updateEndLocation(lat, lng, formatted_address);\n                            //update the map and price estimate to current route\n                            $scope.drawRoute();\n                            $scope.requestUberMain.getPriceEstimate();\n                            $scope.requestUberMain.getTimeEstimate();\n                        }\n                    });\n\n                $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.requestUberMain.start_latitude = lat;\n                        $scope.requestUberMain.start_longitude = lng;\n                        $scope.requestUberMain.start_formatted_address = formatted_address;\n\n                        $rootScope.map.addMarker(lat, lng, formatted_address);\n                    }\n                };\n\n                $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.requestUberMain.end_latitude = lat;\n                        $scope.requestUberMain.end_longitude = lng;\n                        $scope.requestUberMain.end_formatted_address = formatted_address;\n\n                        $rootScope.map.addMarker(lat, lng, formatted_address);\n                    }\n                };\n\n                $scope.drawRoute = function () {\n                    if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.end_latitude) {\n                        $rootScope.map.drawRoute([$scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude], [$scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude])\n                    }\n                };\n\n                $scope.startAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map.getMyPosition()\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.requestUberMain.start_latitude = array[0];\n                                $scope.requestUberMain.start_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n\n                $scope.endAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map.getMyPosition()\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.requestUberMain.end_latitude = array[0];\n                                $scope.requestUberMain.end_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n            }\n        };\n    }])\n    .controller('priceEstimatorController', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                /*\n                 * priceEstimateArray contains the data obtained from price estimates\n                 * including the types of cars available\n                 * distance etc\n                 * */\n                $scope.priceEstimateArray = [];\n            }\n        };\n    }])\n    .directive('priceEstimatorResults', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                /*\n                 * directive holds the logic for displaying the logic behind the price estimates\n                 * */\n            }\n        };\n    }])\n    .directive('priceEstimator', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.priceEstimator = {\n                    isBusy: false,\n                    status: '',\n\n                    start_latitude: '',\n                    start_longitude: '',\n                    start_formatted_address: '',\n                    end_latitude: '',\n                    end_longitude: '',\n                    end_formatted_address: '',\n\n                    getPriceEstimate: function () {\n\n                        $scope.priceEstimator.isBusy = true;\n                        $scope.priceEstimator.status = 'Calculating...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.start_longitude && $scope.priceEstimator.end_latitude && $scope.priceEstimator.end_longitude) {\n                                    return true;\n                                } else {\n                                    throw {\n                                        code: 600\n                                    };\n                                }\n                            })\n                            .then(function () {\n                                return $http.post('/api/getPriceEstimate', {\n                                    start_latitude: $scope.priceEstimator.start_latitude,\n                                    start_longitude: $scope.priceEstimator.start_longitude,\n                                    end_latitude: $scope.priceEstimator.end_latitude,\n                                    end_longitude: $scope.priceEstimator.end_longitude\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.priceEstimator.isBusy = false;\n                                $scope.priceEstimateArray = resp.obj.prices;\n                                return true;\n                            })\n                            .catch(function (e) {\n                                if (e.code === 600) {\n                                    $rootScope.main.showToast('warning', 'Some fields are missing');\n                                } else {\n                                    throw e\n                                }\n                                $scope.priceEstimator.isBusy = false;\n                            })\n                            .catch(function (err) {\n                                $scope.uberConnect.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    }\n                };\n\n                /*\n                 * autocomplete for the input.geoFields\n                 * */\n                angular.element('.start input.geoField').geocomplete({\n                    details: \".start .details\",\n                    detailsAttribute: \"data-geo\"\n                })\n                    .bind(\"geocode:result\", function (event, result) {\n                        var lat = result.geometry.location.J;\n                        var lng = result.geometry.location.M;\n                        var formatted_address = result.formatted_address;\n\n                        console.log(result.geometry.location);\n\n                        if (lat && lng) {\n                            $scope.updateStartLocation(lat, lng, formatted_address);\n                            $scope.drawRoute();\n                        }\n                    });\n                angular.element('.end input.geoField').geocomplete({\n                    details: \".end .details\",\n                    detailsAttribute: \"data-geo\"\n                })\n                    .bind(\"geocode:result\", function (event, result) {\n                        var lat = result.geometry.location.J;\n                        var lng = result.geometry.location.M;\n                        var formatted_address = result.formatted_address;\n\n                        if (lat && lng) {\n                            $scope.updateEndLocation(lat, lng, formatted_address);\n                            $scope.drawRoute();\n                        }\n                    });\n\n                $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.start_latitude = lat;\n                        $scope.priceEstimator.start_longitude = lng;\n                        $scope.priceEstimator.start_formatted_address = formatted_address;\n\n                        $rootScope.map.addMarker(lat, lng, formatted_address);\n                    }\n                };\n\n                $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.end_latitude = lat;\n                        $scope.priceEstimator.end_longitude = lng;\n                        $scope.priceEstimator.end_formatted_address = formatted_address;\n\n                        $rootScope.map.addMarker(lat, lng, formatted_address);\n                    }\n                };\n\n                $scope.drawRoute = function () {\n                    if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.end_latitude) {\n                        $rootScope.map.drawRoute([$scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude], [$scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude])\n                    }\n                };\n\n                $scope.startAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map.getMyPosition()\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.start_latitude = array[0];\n                                $scope.priceEstimator.start_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n\n                $scope.endAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map.getMyPosition()\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.end_latitude = array[0];\n                                $scope.priceEstimator.end_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n            }\n        };\n    }])\n    .directive('mainMapScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                /*\n                 * marker counter to switch btn markers\n                 * */\n                var marker_counter = 0;\n\n                function resizeMap() {\n                    angular.element(\"body.homepage #map\").css({\n                        \"height\": angular.element(window).height() - angular.element(\"homepage main-navigation\").height(),\n                        \"margin\": 0,\n                        \"padding-left\": 0\n                    });\n                }\n\n                resizeMap();\n\n                angular.element(window).resize(function () {\n                    resizeMap();\n                });\n\n                var map = new GMaps({\n                    div: '#map',\n                    lat: -12.043333,\n                    lng: -77.028333\n                });\n\n                $rootScope.map = {\n                    getMyPosition: function () {\n                        /*\n                         * if userLocation is found, the universalController object is updated with the user location\n                         * */\n                        return new Promise(function (resolve, reject) {\n                            GMaps.geolocate({\n                                success: function (position) {\n                                    $rootScope.main.updateUserLocation(position.coords.latitude, position.coords.longitude);\n                                    map.setCenter(position.coords.latitude, position.coords.longitude);\n\n                                    /*\n                                     * set 2 default markers\n                                     * */\n\n                                    map.addMarker({\n                                        lat: position.coords.latitude,\n                                        lng: position.coords.longitude,\n                                        title: ''\n                                    });\n\n                                    map.addMarker({\n                                        lat: position.coords.latitude - 0.004,\n                                        lng: position.coords.longitude + 0.004,\n                                        title: ''\n                                    });\n                                },\n                                error: function (error) {\n                                    alert('Geolocation failed: ' + error.message);\n                                },\n                                not_supported: function () {\n                                    alert(\"Your browser does not support geolocation\");\n                                },\n                                always: function () {\n                                    resolve(true);\n                                }\n                            });\n                        })\n                    },\n\n                    addMarker: function (lat, lng, title) {\n                        map.addMarker({\n                            lat: lat,\n                            lng: lng,\n                            title: title || ''\n                        });\n                    },\n\n                    drawRoute: function (originArr, destArray) {\n                        if (!originArr || !destArray) return;\n                        if (originArr.length < 2 || destArray.length < 2) return;\n                        map.cleanRoute();\n                        map.removeMarkers();\n\n                        $rootScope.map.addMarker(originArr[0], originArr[1]);\n                        $rootScope.map.addMarker(destArray[0], destArray[1]);\n\n                        map.drawRoute({\n                            origin: originArr,\n                            destination: destArray,\n                            travelMode: 'driving',\n                            strokeColor: '#09091A',\n                            strokeOpacity: 0.6,\n                            strokeWeight: 6\n                        });\n                    }\n                };\n\n                $rootScope.map.getMyPosition();\n            }\n        };\n    }]);","angular.module('app')\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', 'ngDialog', function ($q, $log, $window, $rootScope, ngDialog) {\n        return function (resp) {\n            function makeBanner(show, bannerClass, msg) {\n                return {\n                    show: show ? true : false,\n                    bannerClass: bannerClass,\n                    msg: msg\n                };\n            }\n\n            if (resp !== null && typeof resp === 'object') {\n                if (resp.redirect) {\n                    if (resp.redirectPage) {\n                        $window.location.href = resp.redirectPage;\n                    }\n\n                    if (resp.redirectState) {\n                        $rootScope.main.changeState(resp.redirectState)\n                    }\n                }\n                if (resp.reload) {\n                    $rootScope.main.reloadPage();\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.main.showToast(resp.type, resp.msg);\n                    }\n                }\n                if (resp.dialog) {\n                    if (resp.id) {\n                        switch (resp.id) {\n                            case \"not-authorized\":\n                                not_authorized_dialog();\n                                break;\n                            case \"sign-in\":\n                                sign_in_dialog(resp.msg);\n                                break;\n                            default:\n                            //do nothing\n                        }\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('universalBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.signInBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('signInBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.$broadcast('registrationBanner', makeBanner(true, resp.bannerClass, resp.msg));\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n\n            return true;\n\n            function not_authorized_dialog() {\n                ngDialog.open({\n                    template: '/dialog/not-authorized.html',\n                    className: 'ngdialog-theme-default',\n                    overlay: true,\n                    showClose: false,\n                    closeByEscape: true,\n                    closeByDocument: true,\n                    cache: false,\n                    trapFocus: true,\n                    preserveFocus: true\n                });\n            }\n\n            function sign_in_dialog(message) {\n                ngDialog.openConfirm({\n                    data: {\n                        message: message\n                    },\n                    template: '/dialog/sign-in.html',\n                    className: 'ngdialog-theme-default',\n                    overlay: true,\n                    showClose: false,\n                    closeByEscape: false,\n                    closeByDocument: false,\n                    cache: true,\n                    trapFocus: true,\n                    preserveFocus: true\n                }).then(function () {\n                    $rootScope.main.redirectToPage('/notLoggedIn');\n                }, function () {\n                    $rootScope.main.redirectToPage('/about');\n                });\n            }\n        };\n    }]);","angular.module('app')\n    .controller('indexController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'index';\n    }])\n    .directive('indexnScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}