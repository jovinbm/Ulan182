{"version":3,"sources":["app.js","universalCtrl.js","account/connectToUber.js","account/createAccount.js","account/logout.js","account/signIn.js","home_core/home_core.js","home_core/location_search_box.js","home_core/map.js","home_core/price_estimate.js","home_core/request_uber.js","home_core/ride_status.js","req/response_filter.js","index/index.js"],"names":["trackDigests","app","run","$rootScope","Promise","setScheduler","cb","$evalAsync","angular","module","config","$stateProvider","$urlRouterProvider","$interpolateProvider","startSymbol","endSymbol","otherwise","state","url","views","main","templateUrl","controller","$httpProvider","interceptors","push","$q","$location","$localstorage","request","headers","get","Authorization","response","when","$state","$stateParams","localStorageServiceProvider","setPrefix","setStorageCookieDomain","document","location","hostname","search","setStorageType","$filter","$window","$scope","ngDialog","$anchorScroll","localStorageService","$http","toastr","$interval","service_rideStatus","$ionicPopup","$ionicPopover","$timeout","uberRideRequestStatuses","classes","body","userData","getUserData","resolve","then","post","resp","data","responseStatusHandler","err","user","changeState","console","log","getCurrentState","current","name","toState","ifInArray","ifNotInArray","currentState","indexOf","go","redirectToLogin","href","reloadPage","reload","redirectToHome","redirectToPage","path","redirectToPreviousPage","window","referrer","showToast","toastType","text","showIonicAlert","heading","content","alert","title","template","$on","event","toParams","fromState","fromParams","$watch","oldVal","uber","access_token","directive","restrict","link","uberConnect","isBusy","status","getUberAuthorizationUrl","createAccount","details","set","token","registrationDetails","password1","password2","createMain","email","firstName","lastName","username","redirect","logout","localUserLogin","loginData","loginFormModel","password","signInMain","submitLocalLoginForm","factory","key","value","localStorage","defaultValue","setObject","JSON","stringify","getObject","parse","getProducts","lat","lng","code","timeout","latitude","longitude","products","obj","e","TimeoutError","getPriceEstimates","start_lat","start_lng","end_lat","end_lng","start_latitude","start_longitude","end_latitude","end_longitude","priceEstimateArray","prices","getTimeEstimates","timeEstimateArray","times","getUberRideStatus","rStatus","driver","ratingArray","Array","Math","ceil","rating","rideStatus","checkUberRide","processing","no_drivers_available","accepted","arriving","in_progress","driver_canceled","rider_canceled","completed","getRideStatus","$element","$attr","element","find","val","formatted_address","geocomplete","bind","$apply","resizeMap","css","height","margin","padding-left","resize","GMaps","prototype","_getMyPosition","map","_myLocation","reject","geolocate","success","position","coords","error","not_supported","_updateMyPosition","_addMarker","this","addMarker","_addInfoWindowMarker","infoWindow","_userMarker","_userInfoWindowMarker","_addUserMarker","_addUserInfoWindowMarker","_moveMarker","marker","setPosition","google","maps","LatLng","_updateUserMarker","_updateUserInfoWindowMarker","_removeMarker","setMap","_removeAllPresentMarkers","removeMarkers","_setCenter","setCenter","_setCenterToMe","_drawRoute","originArr","destArr","length","cleanRoute","drawRoute","origin","destination","travelMode","strokeColor","strokeOpacity","strokeWeight","div","$","refresh","$ionicSlideBoxDelegate","priceEstimatorCtrlMain","showEstimates","goToSlide","index","slide","parseInt","nextSlide","next","previousSlide","previous","service_uberPrices","priceEstimator","start_formatted_address","end_formatted_address","arr","updateStartLocation","parseFloat","toFixed","toString","updateEndLocation","startAtMyLocation","userLocation","array","endAtMyLocation","requestUberControllerMain","showStatus","service_uberProducts","service_uberTimeEstimates","requestUberMain","product_id","selectedProductPriceEstimate","selectedProduct","changeProductId","newId","product_display_name","forEach","product","localized_display_name","toLowerCase","display_name","estimate","requestUber","updateTimeEstimates","uberRideStatusControllerMain","checkStatus","uberRideStatusMain","lastRide","startLatitude","startLongitude","endLatitude","endLongitude","driver_latitude","driver_longitude","driver_info_window_marker","updateUberRequestSandbox","delay","filter","$log","redirectPage","redirectState","notify","type","msg","dialog","id","banner","bannerClass","signInBanner","registrationBanner","reason","warn"],"mappings":"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","file":"app.min.js","sourcesContent":["function trackDigests(app) {\n    app.run([\"$rootScope\", function ($rootScope) {\n        Promise.setScheduler(function (cb) {\n            $rootScope.$evalAsync(cb);\n        });\n    }]);\n}\n\n//angular sanitize included in textAngular\nvar app = angular.module('app', [\n    'ngSanitize',\n    'ui.bootstrap',\n    'toastr',\n    'ui.router',\n    'ngDialog',\n    'LocalStorageModule',\n    'ionic'\n]);\n\napp.config(function ($stateProvider, $urlRouterProvider, $interpolateProvider) {\n    //\n\n    /*symbol to work with express handlebars\n     * */\n    $interpolateProvider.startSymbol('{[{');\n    $interpolateProvider.endSymbol('}]}');\n\n    // For any unmatched url, redirect to /index\n    $urlRouterProvider.otherwise(\"/index\");\n\n    $stateProvider\n        .state('index', {\n            url: \"/index\",\n            views: {\n                'main': {\n                    templateUrl: \"_index.html\"\n                }\n            }\n        })\n        .state('register', {\n            url: \"/register\",\n            views: {\n                'main': {\n                    templateUrl: \"_create_account.html\"\n                }\n            }\n        })\n        .state('login', {\n            url: \"/login\",\n            views: {\n                'main': {\n                    templateUrl: \"_sign_in.html\"\n                }\n            }\n        })\n        .state('home', {\n            url: \"/home\",\n            views: {\n                'main': {\n                    templateUrl: \"_welcome.html\"\n                }\n            }\n        })\n        .state('priceEstimator', {\n            url: \"/estimator\",\n            views: {\n                'main': {\n                    controller: 'priceEstimateController',\n                    templateUrl: \"_price_estimates.html\"\n                }\n            }\n        })\n        .state('requestUber', {\n            url: \"/requestUber\",\n            views: {\n                'main': {\n                    controller: \"requestUberController\",\n                    templateUrl: \"_request_uber.html\"\n                }\n            }\n        })\n        .state('rideStatus', {\n            url: \"/rideStatus\",\n            views: {\n                'main': {\n                    controller: 'uberRideStatusController',\n                    templateUrl: \"_ride_status.html\"\n                }\n            }\n        })\n        .state('connectToUber', {\n            url: \"/connect\",\n            views: {\n                'main': {\n                    templateUrl: \"_connect_to_uber.html\"\n                }\n            }\n        });\n});\n\n/*\n * update tokens\n * */\napp.config(function ($httpProvider) {\n    $httpProvider.interceptors.push(['$q', '$location', '$localstorage', function ($q, $location, $localstorage) {\n        return {\n            'request': function (config) {\n                config.headers = config.headers || {};\n                if ($localstorage.get('token')) {\n                    config.headers.Authorization = 'Bearer ' + $localstorage.get('token');\n                }\n                return config;\n            }\n\n            , response: function (response) {\n                return response || $q.when(response);\n            }\n        };\n    }]);\n});\n\napp.run(function ($rootScope, $state, $stateParams) {\n    $rootScope.$state = $state;\n    $rootScope.$stateParams = $stateParams;\n});\n\ntrackDigests(app);","angular.module('app')\n    .config(function (localStorageServiceProvider) {\n        localStorageServiceProvider\n            .setPrefix('app')\n            .setStorageCookieDomain(document.location.hostname.search(\"uber\") !== -1 ? 'uber.org' : '')\n            .setStorageType('localStorage');\n    });\n\nangular.module('app')\n    .controller('UniversalController',\n    ['$filter', '$window', '$location', '$scope', '$rootScope', 'ngDialog', '$anchorScroll', 'localStorageService', '$http', '$state', 'toastr', '$interval', 'service_rideStatus', '$ionicPopup', '$ionicPopover', '$timeout',\n        function ($filter, $window, $location, $scope, $rootScope, ngDialog, $anchorScroll, localStorageService, $http, $state, toastr, $interval, service_rideStatus, $ionicPopup, $ionicPopover, $timeout) {\n\n            $rootScope.main = {\n\n                uberRideRequestStatuses: service_rideStatus.uberRideRequestStatuses,\n\n                classes: {\n                    body: 'index'\n                },\n\n                userData: null,\n\n                getUserData: function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post(\"/api/getUserData\", {})\n                                .then(function (resp) {\n                                    resp = resp.data;\n                                    $rootScope.main.responseStatusHandler(resp);\n                                    return resp.userData;\n                                })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    throw err;\n                                })\n                        })\n                        .then(function (user) {\n                            if (user) {\n                                $rootScope.main.userData = user;\n                            } else {\n                                $rootScope.main.userData = null;\n                            }\n                            return true;\n                        })\n                        .then(function () {\n                            if (!$rootScope.main.userData) {\n                                $rootScope.main.changeState('index', null, ['index', 'register', 'login']);\n                            } else {\n                                $rootScope.main.changeState('home', ['index', 'register', 'login'], null);\n                            }\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                },\n\n                getCurrentState: function () {\n                    return $state.current.name;\n                },\n\n                changeState: function (toState, ifInArray, ifNotInArray) {\n                    var currentState = $rootScope.main.getCurrentState();\n                    if (ifInArray) {\n                        if (ifInArray.indexOf(currentState) > -1) {\n                            $state.go(toState);\n                        }\n                    } else if (ifNotInArray) {\n                        if (ifNotInArray.indexOf(currentState) == -1) {\n                            $state.go(toState);\n                        }\n                    } else if (toState) {\n                        $state.go(toState);\n                    } else {\n                        //do nothing\n                        return true;\n                    }\n                },\n\n                redirectToLogin: function () {\n                    $window.location.href = '/notLoggedIn';\n                },\n\n                reloadPage: function () {\n                    $window.location.reload();\n                },\n\n                redirectToHome: function () {\n                    $window.location.href = '/';\n                },\n\n                redirectToPage: function (path) {\n                    $window.location.href = path;\n                },\n\n                redirectToPreviousPage: function () {\n                    window.location.href = document.referrer;\n                },\n\n                responseStatusHandler: function (resp) {\n                    $filter('responseFilter')(resp);\n                },\n\n                showToast: function (toastType, text) {\n                    return $rootScope.main.showIonicAlert('Info', text);\n                },\n\n                showIonicAlert: function (heading, content) {\n                    return $ionicPopup.alert({\n                        title: heading,\n                        template: content\n                    });\n                }\n\n            };\n\n            $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n                $rootScope.main.getUserData();\n            });\n\n\n            /*\n             * important, check if user is not connected to uber\n             * */\n            $scope.$watch(function () {\n                return $rootScope.main.userData\n            }, function (userData, oldVal) {\n                if (userData) {\n                    if (userData.uber.access_token == '') {\n                        $rootScope.main.changeState('connectToUber');\n                    }\n                }\n            });\n        }\n    ]);","angular.module('app')\n    .directive('uberConnect', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.uberConnect = {\n                    isBusy: false,\n                    status: '',\n\n                    getUberAuthorizationUrl: function () {\n\n                        $scope.uberConnect.isBusy = true;\n                        $scope.uberConnect.status = 'Connecting...';\n\n                        return Promise.resolve()\n                            .then(function () {\n                                return $http.post('/api/getUberAuthorizationUrl', {})\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return resp;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        throw err;\n                                    })\n                            })\n                            .then(function (resp) {\n                                $scope.uberConnect.isBusy = false;\n                                $rootScope.main.redirectToPage(resp.url);\n                                return true;\n                            })\n                            .catch(function (err) {\n                                $scope.uberConnect.isBusy = false;\n                                console.log(err);\n                                return true;\n                            })\n                    }\n                }\n            }\n        };\n    }])","angular.module('app')\n    .controller('createAccountController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('createAccountScope', ['$rootScope', '$http', '$localstorage', function ($rootScope, $http, $localstorage) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n                $scope.createMain = {\n                    isBusy: false\n                };\n\n                $scope.registrationDetails = {\n                    email: \"\",\n                    firstName: \"\",\n                    lastName: \"\",\n                    username: \"\",\n                    password1: \"\",\n                    password2: \"\"\n                };\n\n                $scope.createAccount = function (redirect) {\n                    $scope.createMain.isBusy = true;\n                    return createAccount($scope.registrationDetails, redirect)\n                        .then(function () {\n                            $scope.createMain.isBusy = false;\n                        });\n                };\n\n                function createAccount(details) {\n                    return $http.post('/api/createAccount', details)\n                        .then(function (resp) {\n                            resp = resp.data;\n                            /*\n                             * save the users token\n                             * */\n                            $localstorage.set('token', resp.token);\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            $scope.registrationDetails.password1 = \"\";\n                            $scope.registrationDetails.password2 = \"\";\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .directive('logoutScope', ['$rootScope', '$http', '$localstorage', function ($rootScope, $http, $localstorage) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.logout = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('/api/logoutClient', {}).then(function (resp) {\n                                console.log(resp);\n                                resp = resp.data;\n                                /*\n                                 * delete token\n                                 * */\n                                $localstorage.set('token', '');\n                                $rootScope.main.responseStatusHandler(resp);\n                                $rootScope.main.userData = null;\n                                return true;\n                            })\n                                .catch(function (err) {\n                                    err = err.data;\n                                    $rootScope.main.responseStatusHandler(err);\n                                    return true;\n                                })\n                        })\n                        .catch(function (err) {\n                            console.log(err);\n                            return true;\n                        })\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .controller('signInController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'account-crud';\n    }])\n    .directive('signInScope', ['$rootScope', '$http', '$localstorage', function ($rootScope, $http, $localstorage) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n\n                $scope.signInMain = {\n                    isBusy: false\n                };\n\n                $scope.loginFormModel = {\n                    username: \"\",\n                    password: \"\"\n                };\n\n                $scope.submitLocalLoginForm = function () {\n                    $scope.signInMain.isBusy = true;\n                    return localUserLogin($scope.loginFormModel)\n                        .then(function () {\n                            $scope.signInMain.isBusy = false;\n                        });\n                };\n\n                function localUserLogin(loginData) {\n                    return Promise.resolve()\n                        .then(function () {\n                            return $http.post('/api/localUserLogin', loginData);\n                        })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            /*\n                             * save the users token before redirecting\n                             * */\n                            $localstorage.set('token', resp.token);\n                            $rootScope.main.responseStatusHandler(resp);\n                            return true;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $scope.loginFormModel.password = \"\";\n                            $rootScope.main.responseStatusHandler(err);\n                            return true;\n                        });\n                }\n            }\n        };\n    }]);","angular.module('app')\n    .controller('homeCoreController', ['$rootScope', '$scope', '$http', function ($rootScope, $scope, $http) {\n        $rootScope.main.classes.body = 'homepage';\n\n    }])\n    .factory('$localstorage', ['$window', function ($window) {\n        return {\n            set: function (key, value) {\n                $window.localStorage[key] = value;\n            },\n            get: function (key, defaultValue) {\n                return $window.localStorage[key] || defaultValue;\n            },\n            setObject: function (key, value) {\n                $window.localStorage[key] = JSON.stringify(value);\n            },\n            getObject: function (key) {\n                return JSON.parse($window.localStorage[key] || '{}');\n            }\n        }\n    }])\n    .factory(\"service_uberProducts\", ['$interval', '$rootScope', '$http', '$timeout', function ($interval, $rootScope, $http, $timeout) {\n        /*\n         * polls the available products etc\n         * */\n\n        var format = {\n            \"products\": [\n                {\n                    \"capacity\": 4,\n                    \"description\": \"The low-cost Uber\",\n                    \"price_details\": {\n                        \"distance_unit\": \"mile\",\n                        \"cost_per_minute\": 0.26,\n                        \"service_fees\": [\n                            {\n                                \"fee\": 1.0,\n                                \"name\": \"Safe Rides Fee\"\n                            }\n                        ],\n                        \"minimum\": 5.0,\n                        \"cost_per_distance\": 1.3,\n                        \"base\": 2.2,\n                        \"cancellation_fee\": 5.0,\n                        \"currency_code\": \"USD\"\n                    },\n                    \"image\": \"http://d1a3f4spazzrp4.cloudfront.net/car.jpg\",\n                    \"display_name\": \"uberX\",\n                    \"product_id\": \"a1111c8c-c720-46c3-8534-2fcdd730040d\"\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var products = null;\n\n        function getProducts(lat, lng) {\n\n            /*\n             * either returns products or []\n             * */\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (lat && lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getProducts', {\n                        latitude: lat,\n                        longitude: lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    products = resp.obj.products;\n                    return resp.obj.products;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'We could not determine your precise location to list the available products in your area');\n                        products = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    products = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    products = [];\n                    return [];\n                })\n        }\n\n        return {\n            getProducts: getProducts, //isFunction\n            products: function () {\n                return products;\n            }\n        };\n    }])\n    .factory(\"service_uberPrices\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * polls the available products, estimates etc\n         * */\n\n        var format = {\n            \"prices\": [\n                {\n                    \"product_id\": \"08f17084-23fd-4103-aa3e-9b660223934b\",\n                    \"currency_code\": \"USD\",\n                    \"display_name\": \"UberBLACK\",\n                    \"estimate\": \"$23-29\",\n                    \"low_estimate\": 23,\n                    \"high_estimate\": 29,\n                    \"surge_multiplier\": 1,\n                    \"duration\": 640,\n                    \"distance\": 5.34\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var priceEstimateArray = null;\n\n        function getPriceEstimates(start_lat, start_lng, end_lat, end_lng) {\n\n            /*\n             * either returns array or []\n             * */\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (start_lat && start_lng && end_lat && end_lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getPriceEstimate', {\n                        start_latitude: start_lat,\n                        start_longitude: start_lng,\n                        end_latitude: end_lat,\n                        end_longitude: end_lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    priceEstimateArray = resp.obj.prices;\n                    return resp.obj.prices;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        priceEstimateArray = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    priceEstimateArray = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    priceEstimateArray = [];\n                    return [];\n                });\n        }\n\n        return {\n            getPriceEstimates: getPriceEstimates, //isFunction\n            priceEstimateArray: function () {\n                return priceEstimateArray;\n            }\n        };\n    }])\n    .factory(\"service_uberTimeEstimates\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * pickup time estimates for various products etc\n         * */\n\n        var format = {\n            \"times\": [\n                {\n                    \"product_id\": \"5f41547d-805d-4207-a297-51c571cf2a8c\",\n                    \"display_name\": \"UberBLACK\",\n                    \"estimate\": 410\n                }\n            ]\n        };\n        var TimeoutError = Promise.TimeoutError;\n\n        var timeEstimateArray = null;\n\n        function getTimeEstimates(start_lat, start_lng) {\n\n            /*\n             * either returns array or []\n             * */\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            return Promise.resolve()\n                .then(function () {\n\n                    if (start_lat && start_lng) {\n                        return true;\n                    } else {\n                        throw {\n                            code: 600\n                        };\n                    }\n                })\n                .timeout(55000) // timeout in 55 secs\n                .then(function () {\n                    return $http.post('/api/getTimeEstimate', {\n                        start_latitude: start_lat,\n                        start_longitude: start_lng\n                    })\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    timeEstimateArray = resp.obj.times;\n                    return resp.obj.times;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        timeEstimateArray = [];\n                        return [];\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    timeEstimateArray = [];\n                    return [];\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    timeEstimateArray = [];\n                    return [];\n                });\n        }\n\n        return {\n            getTimeEstimates: getTimeEstimates, //isFunction\n            timeEstimateArray: function () {\n                return timeEstimateArray;\n            }\n        };\n    }])\n    .factory(\"service_rideStatus\", ['$interval', '$rootScope', '$http', function ($interval, $rootScope, $http) {\n        /*\n         * polls the ride status\n         * */\n\n        var format = {\n            \"status\": \"accepted\",\n            \"driver\": {\n                \"phone_number\": \"(555)555-5555\",\n                \"rating\": 5,\n                \"picture_url\": \"https:\\/\\/d1w2poirtb3as9.cloudfront.net\\/img.jpeg\",\n                \"name\": \"Bob\"\n            },\n            \"eta\": 4,\n            \"location\": {\n                \"latitude\": 37.776033,\n                \"longitude\": -122.418143,\n                \"bearing\": 33\n            },\n            \"vehicle\": {\n                \"make\": \"Bugatti\",\n                \"model\": \"Veyron\",\n                \"license_plate\": \"I<3Uber\",\n                \"picture_url\": \"https:\\/\\/d1w2poirtb3as9.cloudfront.net\\/car.jpeg\"\n            },\n            \"surge_multiplier\": 1.0,\n            \"request_id\": \"b2205127-a334-4df4-b1ba-fc9f28f56c96\",\n            //cojoined details in server\n            \"mapDetails\": {\n                \"request_id\": \"b5512127-a134-4bf4-b1ba-fe9f48f56d9d\",\n                \"href\": \"https://trip.uber.com/abc123\"\n            },\n            \"lastRide\": \"**last ride details from database\"\n        };\n\n        var TimeoutError = Promise.TimeoutError;\n\n        var rideStatus = null;\n\n        var uberRideRequestStatuses = {\n            processing: \"Processing\",\n            no_drivers_available: 'No drivers available',\n            accepted: 'Accepted',\n            arriving: 'Arriving',\n            in_progress: 'In progress',\n            driver_canceled: 'Driver canceled',\n            rider_canceled: 'Rider canceled',\n            completed: 'Completed'\n        };\n\n\n        function getUberRideStatus() {\n\n            if (!$rootScope.main || !$rootScope.main.userData) return [];\n\n            /*\n             * either returns array or null**\n             * */\n\n            return Promise.resolve()\n                .timeout(8000) // timeout in 13 secs\n                .then(function () {\n                    return $http.post('/api/getRideStatus', {})\n                        .then(function (resp) {\n                            resp = resp.data;\n                            $rootScope.main.responseStatusHandler(resp);\n                            return resp;\n                        })\n                        .catch(function (err) {\n                            err = err.data;\n                            $rootScope.main.responseStatusHandler(err);\n                            throw err;\n                        })\n                })\n                .then(function (resp) {\n                    var rStatus = resp.obj;\n                    /*\n                     * put a rating array for the ng-repeat stars\n                     * */\n                    if (!rStatus) {\n                        rideStatus = null;\n                        return true;\n                    }\n\n                    if (rStatus.driver) {\n                        rStatus.driver.ratingArray = new Array(Math.ceil(rStatus.driver.rating));\n                    }\n                    rideStatus = rStatus;\n                    return rideStatus;\n                })\n                .catch(function (e) {\n                    if (e.code === 600) {\n                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                        //don't change the ride status\n                        return rideStatus;\n                    } else {\n                        throw e\n                    }\n                })\n                .catch(TimeoutError, function (e) {\n                    $rootScope.main.showToast('warning', 'Failed to get time estimates. Please check your internet connection.');\n                    //don't change the ride status\n                    return rideStatus;\n                })\n                .catch(function (err) {\n                    console.log(err);\n                    return rideStatus;\n                })\n                .then(function () {\n                    checkUberRide();\n                });\n        }\n\n        $interval(function () {\n            getUberRideStatus();\n        }, 10000); //update every 15 secs\n        getUberRideStatus();\n\n        /*\n         * function checks if the user has requested an uber, if so, it forces the user to remain in the requestUber state\n         * */\n        function checkUberRide() {\n            if (rideStatus) {\n                $rootScope.main.changeState('rideStatus', null, ['rideStatus']);\n            }\n        }\n\n        $rootScope.$on('$stateChangeSuccess', function () {\n            if (rideStatus) {\n                $rootScope.main.changeState('rideStatus', null, ['rideStatus']);\n            }\n        });\n\n        return {\n            rideStatus: function () {\n                return rideStatus\n            },\n            getRideStatus: function () {\n                return getUberRideStatus();\n            },\n            uberRideRequestStatuses: uberRideRequestStatuses\n        };\n    }]);","angular.module('app')\n    .directive('locationSearchBox', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.lat = angular.element($element.find('.details input.lat')).val();\n                $scope.lng = angular.element($element.find('.details input.lng')).val();\n                $scope.formatted_address = angular.element($element.find('.details input.formatted_address')).val();\n                /*\n                 * auto complete for the input.geoFields\n                 * */\n                angular.element($element.find('input.geoField')).geocomplete({\n                    details: angular.element($element.find('.details'))\n                })\n                    .bind(\"geocode:result\", function () {\n                        $scope.lat = angular.element($element.find('.details input.lat')).val();\n                        $scope.lng = angular.element($element.find('.details input.lng')).val();\n                        $scope.formatted_address = angular.element($element.find('.details input.formatted_address')).val();\n\n                        $scope.$apply($attr['locationUpdate']);\n                    });\n            }\n        };\n    }]);","angular.module('app')\n    .controller('mapController', ['$rootScope', '$scope', '$http', '$interval', '$timeout',\n        function ($rootScope, $scope, $http, $interval, $timeout) {\n\n            function resizeMap() {\n                angular.element(\"#map\").css({\n                    \"height\": angular.element(window).height(),\n                    \"margin\": 0,\n                    \"padding-left\": 0\n                });\n            }\n\n            angular.element(window).resize(function () {\n                resizeMap();\n            });\n\n            resizeMap();\n\n\n            GMaps.prototype._getMyPosition = function (map) {\n                if (map._myLocation.lat && map._myLocation.lng) {\n                    return {\n                        lat: map._myLocation.lat,\n                        lng: map._myLocation.lng\n                    }\n                } else {\n                    return Promise.resolve()\n                        .then(function () {\n                            return new Promise(function (resolve, reject) {\n                                GMaps.geolocate({\n                                    success: function (position) {\n                                        map._myLocation.lat = position.coords.latitude;\n                                        map._myLocation.lng = position.coords.longitude;\n                                        resolve({\n                                            lat: map._myLocation.lat,\n                                            lng: map._myLocation.lng\n                                        });\n                                    },\n                                    error: function (error) {\n                                        $rootScope.main.showToast('warning', 'Geolocation failed');\n                                        console.log(error);\n                                        resolve(null)\n                                    },\n                                    not_supported: function () {\n                                        $rootScope.main.showToast('warning', 'Your browser does not support geolocation');\n                                        resolve(null)\n                                    }\n                                });\n                            })\n                        })\n                }\n            };\n\n\n            GMaps.prototype._updateMyPosition = function (map) {\n                /*\n                 * if userLocation is found, the universalController object is updated with the user location\n                 * */\n                return new Promise(function (resolve, reject) {\n                    GMaps.geolocate({\n                        success: function (position) {\n                            map._myLocation.lat = position.coords.latitude;\n                            map._myLocation.lng = position.coords.longitude;\n                            resolve(true);\n                        },\n                        error: function (error) {\n                            console.log(error);\n                            $rootScope.main.showToast('warning', 'We could not update your location...');\n                            resolve(true);\n                        }\n                    });\n                })\n            };\n\n            GMaps.prototype._myLocation = {\n                lat: null,\n                lng: null\n            };\n\n            GMaps.prototype._addMarker = function (lat, lng, title) {\n                return this.addMarker({\n                    lat: lat,\n                    lng: lng,\n                    title: title || ''\n                });\n            };\n\n            GMaps.prototype._addInfoWindowMarker = function (lat, lng, title) {\n                return this.addMarker({\n                    lat: lat,\n                    lng: lng,\n                    infoWindow: {\n                        content: '<p>' + title + '</p>'\n                    }\n                });\n            };\n\n            GMaps.prototype._userMarker = null;\n            GMaps.prototype._userInfoWindowMarker = null;\n\n            GMaps.prototype._addUserMarker = function () {\n                this._userMarker = this.addMarker({\n                    lat: $rootScope.map._myLocation.lat,\n                    lng: $rootScope.map._myLocation.lat,\n                    title: ''\n                });\n\n                return this._userMarker\n            };\n\n            GMaps.prototype._addUserInfoWindowMarker = function (title) {\n                this._userInfoWindowMarker = this.addMarker({\n                    lat: $rootScope.map._myLocation.lat,\n                    lng: $rootScope.map._myLocation.lat,\n                    infoWindow: {\n                        content: '<p>' + title + '</p>'\n                    }\n                });\n\n                return this._userInfoWindowMarker\n            };\n\n            GMaps.prototype._moveMarker = function (marker, lat, lng) {\n                marker.setPosition(new google.maps.LatLng(lat, lng));\n            };\n\n            GMaps.prototype._updateUserMarker = function () {\n                if (!this._userMarker) {\n                    this._addUserMarker()\n                } else {\n                    this._moveMarker(this._userMarker, this._myLocation.lat, this._myLocation.lng);\n                }\n            };\n\n            GMaps.prototype._updateUserInfoWindowMarker = function (title) {\n                if (!this._userInfoWindowMarker) {\n                    this._addUserInfoWindowMarker(title)\n                } else {\n                    this._moveMarker(this._userInfoWindowMarker, this._myLocation.lat, this._myLocation.lng);\n                }\n            };\n\n            GMaps.prototype._removeMarker = function (marker) {\n                marker.setMap(null);\n            };\n\n            GMaps.prototype._removeAllPresentMarkers = function () {\n                this.removeMarkers();\n            };\n\n            GMaps.prototype._setCenter = function (lat, lng) {\n                this.setCenter(lat, lng);\n            };\n\n            GMaps.prototype._setCenterToMe = function () {\n                if (this._myLocation.lat && this._myLocation.lng) {\n                    this.setCenter(this._myLocation.lat, this._myLocation.lng);\n                }\n            };\n\n            GMaps.prototype._drawRoute = function (originArr, destArr) {\n                if (!originArr || !destArr) return;\n                if (originArr.length < 2 || destArr.length < 2) return;\n                this.cleanRoute();\n                this.removeMarkers();\n\n                this.addMarker({lat: originArr[0], lng: originArr[1]});\n                this.addMarker({lat: destArr[0], lng: destArr[1]});\n\n                this.drawRoute({\n                    origin: originArr,\n                    destination: destArr,\n                    travelMode: 'driving',\n                    strokeColor: '#09091A',\n                    strokeOpacity: 0.6,\n                    strokeWeight: 6\n                });\n            };\n\n            $rootScope.map = new GMaps({\n                div: '#map',\n                lat: -12.043333,\n                lng: -77.028333\n            });\n\n            /*\n             * prepare functions that will update stuff, wait for 3 secs\n             * */\n            $timeout(function () {\n\n                resizeMap();\n\n                $rootScope.map._updateMyPosition($rootScope.map)\n                    .then(function () {\n                        $rootScope.map._setCenter($rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n                        $rootScope.map._addUserMarker($rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n                    });\n\n                $scope.$watch(function () {\n                    return $rootScope.map._myLocation.lat;\n                }, function () {\n                    if ($rootScope.map._userMarker) {\n                        $rootScope.map._moveMarker($rootScope.map._userMarker, $rootScope.map._myLocation.lat, $rootScope.map._myLocation.lng);\n                    }\n                });\n\n                $interval(function () {\n                    if ($rootScope.map._updateMyPosition) {\n                        $rootScope.map._updateMyPosition($rootScope.map);\n                    }\n                }, 10000); //update every 10 secs\n\n\n                /*\n                 * refresh on resize and state change\n                 * */\n                //resize event\n                $(window).resize(function () {\n                    $rootScope.map.refresh();\n                });\n\n            }, 3000);\n\n        }]);","angular.module('app')\n    .controller('priceEstimateController', ['$rootScope', '$scope', '$http', '$ionicPopover', '$ionicSlideBoxDelegate', function ($rootScope, $scope, $http, $ionicPopover, $ionicSlideBoxDelegate) {\n\n        $rootScope.main.classes.body = 'priceEstimate';\n\n        /*\n         * prepare the results popover\n         * */\n        $scope.priceEstimatorCtrlMain = {\n            /*\n             * priceEstimateArray contains the data obtained from price estimates\n             * including the types of cars available\n             * distance etc,\n             *\n             * updated when start/end location is chosen\n             * */\n            priceEstimateArray: [],\n            showEstimates: false\n        };\n\n        /*\n         * managing the slides\n         * */\n\n        $scope.goToSlide = function (index) {\n            $ionicSlideBoxDelegate.slide(parseInt(index));\n        };\n        $scope.nextSlide = function (index) {\n            $ionicSlideBoxDelegate.next();\n        };\n        $scope.previousSlide = function (index) {\n            $ionicSlideBoxDelegate.previous();\n        };\n    }])\n    .directive('priceEstimator', ['$rootScope', '$http', 'service_uberPrices', function ($rootScope, $http, service_uberPrices) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                $scope.priceEstimator = {\n                    isBusy: false,\n                    status: '',\n\n                    start_latitude: '',\n                    start_longitude: '',\n                    start_formatted_address: '',\n                    end_latitude: '',\n                    end_longitude: '',\n                    end_formatted_address: '',\n\n                    getPriceEstimates: function () {\n\n                        /*\n                         * these estimates should be for the whole journey\n                         * */\n                        if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.start_longitude && $scope.priceEstimator.end_latitude && $scope.priceEstimator.end_longitude) {\n\n                            $scope.priceEstimator.isBusy = true;\n                            $scope.priceEstimator.status = 'Calculating...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    return service_uberPrices.getPriceEstimates($scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude, $scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude)\n                                })\n                                .then(function (arr) {\n                                    $scope.priceEstimatorCtrlMain.priceEstimateArray = arr;\n                                    $scope.priceEstimator.isBusy = false;\n                                    /*\n                                     * show the estimates\n                                     * */\n                                    $scope.priceEstimatorCtrlMain.showEstimates = true;\n                                    $scope.goToSlide(0);\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.priceEstimator.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                });\n\n                        }\n                    }\n                };\n\n                $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.start_latitude = lat;\n                        $scope.priceEstimator.start_longitude = lng;\n                        $scope.priceEstimator.start_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $rootScope.map._setCenter(lat, lng);\n                        $scope.drawRoute();\n                    }\n                };\n\n                $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                    lat = parseFloat(lat).toFixed(10);\n                    lng = parseFloat(lng).toFixed(10);\n\n                    if (formatted_address) {\n                        formatted_address = formatted_address.toString();\n                    }\n\n                    if (lat && lng) {\n                        $scope.priceEstimator.end_latitude = lat;\n                        $scope.priceEstimator.end_longitude = lng;\n                        $scope.priceEstimator.end_formatted_address = formatted_address;\n\n                        $rootScope.map._addMarker(lat, lng, formatted_address);\n                        $scope.drawRoute();\n                    }\n                };\n\n                $scope.drawRoute = function () {\n                    if ($scope.priceEstimator.start_latitude && $scope.priceEstimator.end_latitude) {\n                        $rootScope.map._setCenter($scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude);\n                        $rootScope.map._drawRoute([$scope.priceEstimator.start_latitude, $scope.priceEstimator.start_longitude], [$scope.priceEstimator.end_latitude, $scope.priceEstimator.end_longitude])\n                    }\n                };\n\n                $scope.startAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.start_latitude = array[0];\n                                $scope.priceEstimator.start_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n\n                $scope.endAtMyLocation = function () {\n                    return Promise.resolve()\n                        .then(function () {\n                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                            } else {\n                                return $rootScope.map._getMyPosition($rootScope.map)\n                                    .then(function () {\n                                        if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                            return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                        } else {\n                                            $rootScope.main.showToast('warning', 'Could not find your position');\n                                            return null;\n                                        }\n                                    })\n                            }\n                        })\n                        .then(function (array) {\n                            if (array) {\n                                $scope.priceEstimator.end_latitude = array[0];\n                                $scope.priceEstimator.end_longitude = array[1]\n                            } else {\n                                //do nothing\n                            }\n                        })\n                        .catch(function (e) {\n                            console.log(e);\n                            $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                        });\n                };\n            }\n        };\n    }]);","angular.module('app')\n    .controller('requestUberController', ['$rootScope', '$scope', '$http','$ionicSlideBoxDelegate', function ($rootScope, $scope, $http, $ionicSlideBoxDelegate) {\n\n        $rootScope.main.classes.body = 'requestUber';\n\n        $scope.requestUberControllerMain = {\n\n            /*\n             * priceEstimateArray contains the data obtained from price estimates\n             * including the types of cars available\n             * distance etc\n             * */\n            priceEstimateArray: [],\n\n            /*\n             * timeEstimateArray contains the data obtained from time estimates\n             * */\n            timeEstimateArray: [],\n\n            /*\n             * all uber products available in area, update when start location is selected\n             * */\n            products: [],\n\n            showStatus: false\n        };\n\n        /*\n         * managing the slides\n         * */\n\n        $scope.goToSlide = function (index) {\n            $ionicSlideBoxDelegate.slide(parseInt(index));\n        };\n        $scope.nextSlide = function (index) {\n            $ionicSlideBoxDelegate.next();\n        };\n        $scope.previousSlide = function (index) {\n            $ionicSlideBoxDelegate.previous();\n        };\n\n    }])\n    .directive('requestUberDirective',\n    ['$rootScope', '$http', '$interval', 'service_uberProducts', 'service_uberPrices', 'service_uberTimeEstimates', 'service_rideStatus',\n        function ($rootScope, $http, $interval, service_uberProducts, service_uberPrices, service_uberTimeEstimates, service_rideStatus) {\n            return {\n                restrict: 'AE',\n                link: function ($scope, $element, $attr) {\n\n                    $scope.requestUberMain = {\n                        isBusy: false,\n                        status: '',\n\n                        start_latitude: '',\n                        start_longitude: '',\n                        start_formatted_address: '',\n                        end_latitude: '',\n                        end_longitude: '',\n                        end_formatted_address: '',\n                        products: [],\n\n                        product_id: '',\n                        selectedProductPriceEstimate: {}, //holds the selected products price estimates and so forth\n                        selectedProduct: {}, // holds the selected product\n\n                        changeProductId: function (newId, product_display_name) {\n                            if (newId) {\n\n                                $scope.requestUberMain.product_id = newId;\n\n                                //get the selected product\n                                $scope.requestUberControllerMain.products.forEach(function (product) {\n                                    if (product.product_id == newId) {\n                                        $scope.requestUberMain.selectedProduct = product;\n                                    }\n                                });\n\n\n                                $scope.requestUberControllerMain.priceEstimateArray.forEach(function (product) {\n                                    /*\n                                     * since product_ids are most of the times different, here we are\n                                     * using their names to lower case\n                                     * */\n                                    if (product.localized_display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                        $scope.requestUberMain.selectedProductPriceEstimate = product;\n                                    }\n                                });\n\n                                /*\n                                 * put in the estimates from the timeEstimateArray\n                                 * */\n                                $scope.requestUberControllerMain.timeEstimateArray.forEach(function (product) {\n                                    /*\n                                     * since product_ids are most of the times different, here we are\n                                     * using their names to lower case\n                                     * */\n                                    if (product.display_name.toLowerCase() == product_display_name.toLowerCase()) {\n                                        $scope.requestUberMain.selectedProduct.estimate = Math.ceil(product.estimate / 60);\n                                    }\n                                });\n                            }\n                        },\n\n                        requestUber: function () {\n\n                            $scope.requestUberMain.isBusy = true;\n                            $scope.requestUberMain.status = 'Requesting...';\n\n                            return Promise.resolve()\n                                .then(function () {\n                                    if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude && $scope.requestUberMain.product_id) {\n                                        return true;\n                                    } else {\n                                        throw {\n                                            code: 600\n                                        };\n                                    }\n                                })\n                                .then(function () {\n                                    return $http.post('/api/requestUber', {\n                                        start_latitude: $scope.requestUberMain.start_latitude,\n                                        start_longitude: $scope.requestUberMain.start_longitude,\n                                        end_latitude: $scope.requestUberMain.end_latitude,\n                                        end_longitude: $scope.requestUberMain.end_longitude,\n                                        product_id: $scope.requestUberMain.product_id\n                                    })\n                                        .then(function (resp) {\n                                            resp = resp.data;\n                                            $rootScope.main.responseStatusHandler(resp);\n                                            return resp;\n                                        })\n                                        .catch(function (err) {\n                                            err = err.data;\n                                            $rootScope.main.responseStatusHandler(err);\n                                            throw err;\n                                        })\n                                })\n                                .then(function (resp) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    /*\n                                     * check the ride status\n                                     * */\n                                    service_rideStatus.getRideStatus();\n                                    return true;\n                                })\n                                .catch(function (e) {\n                                    if (e.code === 600) {\n                                        $rootScope.main.showToast('warning', 'Some fields are missing');\n                                    } else {\n                                        throw e\n                                    }\n                                    $scope.requestUberMain.isBusy = false;\n                                    return true;\n                                })\n                                .catch(function (err) {\n                                    $scope.requestUberMain.isBusy = false;\n                                    console.log(err);\n                                    return true;\n                                })\n                        },\n\n                        getPriceEstimates: function () {\n\n                            /*\n                             * these estimates should be for the whole journey\n                             * */\n                            if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude && $scope.requestUberMain.end_latitude && $scope.requestUberMain.end_longitude) {\n\n                                $scope.requestUberMain.isBusy = true;\n                                $scope.requestUberMain.status = 'Getting cost estimates...';\n\n                                return Promise.resolve()\n                                    .then(function () {\n                                        return service_uberPrices.getPriceEstimates($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude, $scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude)\n                                    })\n                                    .then(function (arr) {\n                                        $scope.requestUberControllerMain.priceEstimateArray = arr;\n                                        $scope.requestUberMain.isBusy = false;\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        $scope.requestUberMain.isBusy = false;\n                                        console.log(err);\n                                        return true;\n                                    });\n\n                            }\n                        },\n\n                        updateTimeEstimates: function () {\n                            if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.start_longitude) {\n                                console.log('Updating all eta');\n                                Promise.resolve()\n                                    .then(function () {\n                                        return service_uberTimeEstimates.getTimeEstimates($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude)\n                                            .then(function (arr) {\n                                                $scope.requestUberControllerMain.timeEstimateArray = arr;\n                                                return true;\n                                            })\n                                    })\n                            }\n                        }\n                    };\n\n                    /*\n                     * update the pickup times every 60 mins - uber api\n                     * */\n                    $interval(function () {\n                        $scope.requestUberMain.updateTimeEstimates();\n                    }, 60000);\n                    $scope.requestUberMain.updateTimeEstimates();\n\n                    $scope.updateStartLocation = function (lat, lng, formatted_address) {\n                        lat = parseFloat(lat).toFixed(10);\n                        lng = parseFloat(lng).toFixed(10);\n\n                        if (formatted_address) {\n                            formatted_address = formatted_address.toString();\n                        }\n\n                        if (lat && lng) {\n                            $scope.requestUberMain.start_latitude = lat;\n                            $scope.requestUberMain.start_longitude = lng;\n                            $scope.requestUberMain.start_formatted_address = formatted_address;\n\n                            $rootScope.map._addMarker(lat, lng, formatted_address);\n                            $rootScope.map._setCenter(lat, lng);\n                            $scope.drawRoute();\n\n                            /*\n                             * update the products to the new location\n                             * PRODUCTS ARE ONLY UPDATED FOR THE PICKUP LOCATION\n                             * */\n                            Promise.resolve()\n                                .then(function () {\n                                    return service_uberProducts.getProducts(lat, lng)\n                                        .then(function (products) {\n                                            $scope.requestUberControllerMain.products = products;\n                                            return true;\n                                        })\n                                });\n\n                            /*\n                             * update the prices\n                             * */\n                            $scope.requestUberMain.getPriceEstimates();\n\n                            /*\n                             * update the etas for the start location only\n                             * */\n                            $scope.requestUberMain.updateTimeEstimates();\n                        }\n                    };\n\n                    $scope.updateEndLocation = function (lat, lng, formatted_address) {\n                        lat = parseFloat(lat).toFixed(10);\n                        lng = parseFloat(lng).toFixed(10);\n\n                        if (formatted_address) {\n                            formatted_address = formatted_address.toString();\n                        }\n\n                        if (lat && lng) {\n                            $scope.requestUberMain.end_latitude = lat;\n                            $scope.requestUberMain.end_longitude = lng;\n                            $scope.requestUberMain.end_formatted_address = formatted_address;\n\n                            $rootScope.map._addMarker(lat, lng, formatted_address);\n                            $scope.drawRoute();\n\n                            /*\n                             * update the prices\n                             * */\n                            $scope.requestUberMain.getPriceEstimates();\n                        }\n                    };\n\n                    $scope.drawRoute = function () {\n                        if ($scope.requestUberMain.start_latitude && $scope.requestUberMain.end_latitude) {\n                            $rootScope.map._setCenter($scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude);\n                            $rootScope.map._drawRoute([$scope.requestUberMain.start_latitude, $scope.requestUberMain.start_longitude], [$scope.requestUberMain.end_latitude, $scope.requestUberMain.end_longitude])\n                        }\n                    };\n\n                    $scope.startAtMyLocation = function () {\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                    return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                } else {\n                                    return $rootScope.map._getMyPosition($rootScope.map)\n                                        .then(function () {\n                                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                            } else {\n                                                $rootScope.main.showToast('warning', 'Could not find your position');\n                                                return null;\n                                            }\n                                        })\n                                }\n                            })\n                            .then(function (array) {\n                                if (array) {\n                                    $scope.requestUberMain.start_latitude = array[0];\n                                    $scope.requestUberMain.start_longitude = array[1]\n                                } else {\n                                    //do nothing\n                                }\n                                return true;\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                            });\n                    };\n\n                    $scope.endAtMyLocation = function () {\n                        return Promise.resolve()\n                            .then(function () {\n                                if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                    return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                } else {\n                                    return $rootScope.map._getMyPosition($rootScope.map)\n                                        .then(function () {\n                                            if ($rootScope.main.userLocation.latitude && $rootScope.main.userLocation.longitude) {\n                                                return [$rootScope.main.userLocation.latitude, $rootScope.main.userLocation.longitude]\n                                            } else {\n                                                $rootScope.main.showToast('warning', 'Could not find your position');\n                                                return null;\n                                            }\n                                        })\n                                }\n                            })\n                            .then(function (array) {\n                                if (array) {\n                                    $scope.requestUberMain.end_latitude = array[0];\n                                    $scope.requestUberMain.end_longitude = array[1]\n                                } else {\n                                    //do nothing\n                                }\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                $rootScope.main.showToast('warning', 'An error occurred while trying to pin point your location');\n                            });\n                    };\n                }\n            };\n        }]);","angular.module('app')\n    .controller('uberRideStatusController', ['$rootScope', '$scope', '$http', '$ionicSlideBoxDelegate', function ($rootScope, $scope, $http, $ionicSlideBoxDelegate) {\n\n        $rootScope.main.classes.body = 'rideStatus';\n\n        $scope.uberRideStatusControllerMain = {\n\n            /*\n             * show status by default\n             * */\n            showStatus: true\n        };\n\n        /*\n         * managing the slides\n         * */\n\n        $scope.goToSlide = function (index) {\n            $ionicSlideBoxDelegate.slide(parseInt(index));\n        };\n        $scope.nextSlide = function (index) {\n            $ionicSlideBoxDelegate.next();\n        };\n        $scope.previousSlide = function (index) {\n            $ionicSlideBoxDelegate.previous();\n        };\n\n    }])\n    .directive('uberRideStatusDirective', ['$rootScope', '$http', 'service_rideStatus', '$interval', '$timeout', function ($rootScope, $http, service_rideStatus, $interval, $timeout) {\n        return {\n            restrict: 'AE',\n            link: function ($scope, $element, $attr) {\n\n                /*\n                 * clear all markers, then start updating map with new info\n                 * */\n                $rootScope.map._removeAllPresentMarkers();\n\n                /*\n                 * check the uberStatus and keep updating the map with the driver position\n                 * */\n                $scope.uberRideStatusMain = {\n                    rideStatus: null,\n                    driver_latitude: null,\n                    driver_longitude: null,\n                    driver_info_window_marker: null,\n                    start_lat: null,\n                    start_lng: null,\n                    end_lat: null,\n                    end_lng: null,\n\n                    updateUberRequestSandbox: function () {\n                        Promise.resolve()\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'accepted'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(30000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'arriving'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(15000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'in_progress'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .then(function () {\n                                return Promise.delay(45000);\n                            })\n                            .then(function () {\n                                return $http.post('/api/updateUberRequestSandbox', {\n                                    status: 'completed'\n                                })\n                                    .then(function (resp) {\n                                        resp = resp.data;\n                                        $rootScope.main.responseStatusHandler(resp);\n                                        return true;\n                                    })\n                                    .catch(function (err) {\n                                        err = err.data;\n                                        $rootScope.main.responseStatusHandler(err);\n                                        return true;\n                                    })\n                            })\n                            .catch(function (e) {\n                                console.log(e);\n                                return true;\n                            })\n                    }\n                };\n\n                $scope.uberRideStatusMain.updateUberRequestSandbox();\n\n                /*\n                 * watch for the start and end, update on map\n                 * */\n                $timeout(function () {\n                    $scope.$watch(function () {\n                        return $scope.uberRideStatusMain.start_lat;\n                    }, function (val) {\n                        if (val) {\n                            $rootScope.map._addMarker(parseFloat($scope.uberRideStatusMain.start_lat).toFixed(10), parseFloat($scope.uberRideStatusMain.start_lng).toFixed(10));\n                            $rootScope.map._addMarker(parseFloat($scope.uberRideStatusMain.end_lat).toFixed(10), parseFloat($scope.uberRideStatusMain.end_lng).toFixed(10));\n                            /*\n                             * set center to me\n                             * */\n                            $rootScope.map._setCenterToMe();\n                        }\n                    });\n                }, 3000);\n\n                function checkStatus() {\n                    /*\n                     * poll from service\n                     * */\n                    var val = service_rideStatus.rideStatus();\n\n                    if (val) {\n\n                        $scope.uberRideStatusMain.rideStatus = val;\n                        $scope.uberRideStatusMain.start_lat = val.lastRide.startLatitude;\n                        $scope.uberRideStatusMain.start_lng = val.lastRide.startLongitude;\n                        $scope.uberRideStatusMain.end_lat = val.lastRide.endLatitude;\n                        $scope.uberRideStatusMain.end_lng = val.lastRide.endLongitude;\n\n                        /*\n                         * put user's position on map\n                         * */\n                        $rootScope.map._updateUserInfoWindowMarker($rootScope.main.userData.firstName);\n\n                        /*\n                         * set center to driver\n                         * */\n                        if (val.status == 'in_progress') {\n                            $rootScope.map._setCenter($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude);\n                        } else {\n                            $rootScope.map._setCenterToMe();\n                        }\n\n\n                        /*\n                         * start updating the ride status\n                         * */\n\n                        if (val.location) {\n                            $scope.uberRideStatusMain.driver_latitude = parseFloat(val.location.latitude).toFixed(10);\n                            $scope.uberRideStatusMain.driver_longitude = parseFloat(val.location.longitude).toFixed(10);\n\n\n                            /*\n                             * update the cars location\n                             * */\n                            if (!$scope.uberRideStatusMain.driver_info_window_marker) {\n                                $scope.uberRideStatusMain.driver_info_window_marker = $rootScope.map._addInfoWindowMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude, 'Driver');\n                            } else {\n                                $rootScope.map._removeMarker($scope.uberRideStatusMain.driver_info_window_marker);\n                                $scope.uberRideStatusMain.driver_info_window_marker = $rootScope.map._addInfoWindowMarker($scope.uberRideStatusMain.driver_latitude, $scope.uberRideStatusMain.driver_longitude, 'Driver');\n                            }\n                        }\n                    } else {\n                        /*\n                         * if there is nothing after, then trip is finished\n                         * */\n                        $scope.uberRideStatusMain.rideStatus = null;\n                        if ($rootScope.main && $rootScope.main.userData) {\n                            $rootScope.map._updateUserInfoWindowMarker($rootScope.main.userData.firstName);\n                        }\n                        $rootScope.map._setCenterToMe();\n                    }\n                }\n\n                $timeout(function () {\n                    $interval(function () {\n                        checkStatus();\n                    }, 5000); //update every 5 secs\n                    checkStatus();\n                }, 3000);\n\n            }\n        };\n    }]);","angular.module('app')\n    .filter(\"responseFilter\", ['$q', '$log', '$window', '$rootScope', function ($q, $log, $window, $rootScope) {\n        return function (resp) {\n\n            if (resp !== null && typeof resp === 'object') {\n                if (resp.redirect) {\n                    if (resp.redirectPage) {\n                        $window.location.href = resp.redirectPage;\n                    }\n\n                    if (resp.redirectState) {\n                        $rootScope.main.changeState(resp.redirectState)\n                    }\n\n                    return;\n                }\n                if (resp.reload) {\n                    $rootScope.main.reloadPage();\n                    return;\n                }\n                if (resp.notify) {\n                    if (resp.type && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.dialog) {\n                    if (resp.id) {\n                        switch (resp.id) {\n                            case \"not-authorized\":\n                                $rootScope.main.showIonicAlert('Info', 'You are not authorized to be/access this page or resource.');\n                                break;\n                            case \"sign-in\":\n                                $rootScope.main.showIonicAlert('Info', 'Please sign in to continue.')\n                                    .then(function () {\n                                        $rootScope.main.changeState('login')\n                                    });\n                                break;\n                            default:\n                            //do nothing\n                        }\n                        return;\n                    }\n                }\n                if (resp.banner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.signInBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.registrationBanner) {\n                    if (resp.bannerClass && resp.msg) {\n                        $rootScope.main.showIonicAlert('Info', resp.msg);\n                        return;\n                    }\n                }\n                if (resp.reason) {\n                    $log.warn(resp.reason);\n                }\n            } else {\n                //do nothing\n            }\n        };\n    }]);","angular.module('app')\n    .controller('indexController', ['$rootScope', '$http', function ($rootScope, $http) {\n        $rootScope.main.classes.body = 'index';\n    }])\n    .directive('indexnScope', ['$rootScope', '$http', function ($rootScope, $http) {\n        return {\n            restrict: 'AE',\n            link: function ($scope) {\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}